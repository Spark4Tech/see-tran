# Project Directory Structure
./
    .flaskenv
    run.py
    tailwind.config.js
    gtfs_loader.py
    config.py
    requirements.txt
    cat.py
    README.md
    .gitignore
    package-lock.json
    package.json
    .nvmrc
    postcss.config.js
    app/
        auth.py
        __init__.py
        forms/
            __init__.py
            forms.py
        agents/
            agency_agent.py
            __init__.py
            component_agent.py
        utils/
            __init__.py
            errors.py
        models/
            tran.py
            __init__.py
            gtfs.py
        static/
            css/
                .keep
            images/
                favicon.ico
                ST.png
                logo.png
                transit_logos/
                    spokane_logo.png
                    kingco_logo.png
                    island_logo.png
                    godurham_logo.png
                    chapelhill_logo.png
                    cota_logo.png
                    c-tran_logo.png
                    trimet_logo.png
                vendor_logos/
                    init_logo.png
                    apollo_logo.png
                    byd_logo.png
                transit_headers/
                    cota_header.png
                    c-tran_header.png
                vendor_headers/
                    apollo_header.png
            js/
                .keep
                main.js
                vendor-page-controller.js
        templates/
            index.html
            base.html
            components.html
            standards.html
            integrations.html
            functional_areas.html
            agencies.html
            contribute.html
            vendors.html
            fragments/
                vendor_details.html
                vendor_form.html
                vendor_list.html
                agency_details.html
                functional_area_details.html
                agency_list.html
                functional_area_form.html
                functional_area_list.html
                agency_form.html
        routes/
            vendor.py
            agency.py
            standard.py
            __init__.py
            integration.py
            main.py
            component.py
            function.py
    tests/
        test_phase2_functional_areas.py
        test_phase2.py
        __init__.py
        test_vendors_crud.py
        test_phase1.py
        test_app.py
    tailwind/
        config.js
        input.css

# End of Directory Structure

# Start of app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os

db = SQLAlchemy()
migrate = Migrate()

def create_app(test_config=None):
    app = Flask(__name__)
    
    if test_config:
        app.config.update(test_config)
    else:
        # Import config classes
        from config import DevelopmentConfig, ProductionConfig, TestConfig
        
        # Use DevelopmentConfig by default, or based on environment
        flask_env = os.environ.get('FLASK_ENV', 'development')
        if flask_env == 'production':
            app.config.from_object(ProductionConfig)
        elif flask_env == 'testing':
            app.config.from_object(TestConfig)
        else:
            app.config.from_object(DevelopmentConfig)
    
    # Ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass
    
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Import models so Flask-Migrate can detect them
    with app.app_context():
        from app.models import tran  # Import existing models
        from app.models import gtfs  # Import GTFS models
    
    # register blueprints
    from app.routes.main import main as main_bp
    app.register_blueprint(main_bp)
    
    return app
# End of app/__init__.py

# Start of app/routes/main.py
# app/routes/main.py - Enhanced version
from flask import Blueprint, render_template, jsonify, request, url_for
from app import db
from app.models.tran import (
    Agency, FunctionalArea, Component, Vendor, IntegrationPoint, 
    UpdateLog, Function, Standard, Tag, TagGroup, UserRole, AgencyFunctionImplementation,
    integration_standard, component_integration
)
from app.forms.forms import AgencyForm, VendorForm
from app.auth import login_required, get_updated_by
from app.utils.errors import (
    json_error_response, json_success_response, 
    html_error_fragment, html_success_fragment,
    json_form_error_response
)
from sqlalchemy import func, case, distinct
from datetime import datetime, timedelta

main = Blueprint("main", __name__)

@main.route("/")
def index():
    return render_template("index.html")

@main.route("/components")
def components_page():
    """Components management page"""
    return render_template("components.html")

# Health and utility endpoints
@main.route("/api/health")
def health_check():
    try:
        # Test database connection
        db.session.execute(db.text('SELECT 1'))
        return jsonify({
            "status": "ok", 
            "timestamp": datetime.utcnow().isoformat(),
            "database": "connected"
        })
    except Exception as e:
        return json_error_response(f"Health check failed: {str(e)}", 500)

# Count endpoints for dashboard metrics
@main.route("/api/count/agencies")
def count_agencies():
    try:
        count = Agency.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/functional-areas")
def count_functional_areas():
    try:
        count = FunctionalArea.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/components")
def count_components():
    try:
        count = Component.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/integration-points")
def count_integration_points():
    try:
        count = IntegrationPoint.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/vendors")
def count_vendors():
    try:
        count = Vendor.query.count()
        return str(count)
    except Exception as e:
        return "0"

# Components endpoints (keeping existing functionality)
@main.route("/api/components/list")
def components_list():
    """Get all components with filtering"""
    try:
        functional_area = request.args.get('functional_area')
        vendor = request.args.get('vendor')
        agency = request.args.get('agency')
        status = request.args.get('status')
        
        # Start with components and their implementations
        query = db.session.query(Component).distinct()
        
        # Apply filters
        if functional_area:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.function)\
                         .join(Function.functional_area)\
                         .filter(FunctionalArea.name == functional_area)
        
        if vendor:
            query = query.join(Vendor).filter(Vendor.name == vendor)
            
        if agency:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.agency)\
                         .filter(Agency.name == agency)
        
        if status:
            if status == 'issues':
                query = query.filter(Component.known_issues.isnot(None))
            elif status == 'no_issues':
                query = query.filter(Component.known_issues.is_(None))
        
        components = query.all()
        
        html = ""
        for component in components:
            status_indicator = "red" if component.known_issues else "green"
            vendor_name = component.vendor.name if component.vendor else "No Vendor"
            
            # Get agencies that use this component
            agencies_using = db.session.query(Agency.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            agencies_display = ", ".join([a.name for a in agencies_using])
            if len(agencies_using) == 3:
                agencies_display += " +more"
            
            # Get functions this component implements
            functions_implemented = db.session.query(Function.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            functions_display = ", ".join([f.name for f in functions_implemented])
            if len(functions_implemented) == 3:
                functions_display += " +more"

            html += f'''
            <div class="component-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-4 hover:bg-slate-800/70 transition-all cursor-pointer"
                 data-component-id="{component.id}"
                 hx-get="/api/components/{component.id}/details" hx-target="#component-details" hx-swap="innerHTML">
                <div class="flex items-start justify-between">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                            <div class="w-3 h-3 bg-{status_indicator}-500 rounded-full"></div>
                            <h3 class="font-semibold text-white text-lg">{component.name}</h3>
                        </div>
                        <p class="text-slate-300 text-sm mb-2">{functions_display or 'No functions assigned'}</p>
                        <div class="flex items-center space-x-4 text-xs text-slate-400">
                            <span>üè¢ {vendor_name}</span>
                            <span>üèõÔ∏è {agencies_display or 'No agencies'}</span>
                            <span>üìÖ {component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="bg-slate-700 px-2 py-1 rounded text-xs text-slate-300 mb-2">
                            v{component.version or 'Unknown'}
                        </div>
                        <div class="text-xs text-slate-500">
                            {component.update_frequency or 'Unknown'}
                        </div>
                    </div>
                </div>
                {f'<div class="mt-3 p-2 bg-red-900/20 border border-red-700/30 rounded text-xs text-red-300"><strong>Issues:</strong> {component.known_issues}</div>' if component.known_issues else ''}
            </div>
            '''
        
        if not html:
            html = '''
            <div class="text-center py-12">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500">Try adjusting your filters or add new components.</p>
            </div>
            '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components: {str(e)}")

@main.route("/api/components/<int:component_id>/details")
def component_details(component_id):
    """Get detailed information about a specific component"""
    try:
        component = Component.query.get_or_404(component_id)
        
        # Get agency implementations for this component
        implementations = AgencyFunctionImplementation.query\
            .filter_by(component_id=component_id)\
            .join(Agency).join(Function).join(FunctionalArea)\
            .order_by(Agency.name, FunctionalArea.name, Function.name)\
            .all()
        
        # Build agency usage section
        agency_usage_html = ""
        if implementations:
            agency_usage_html = "<h4 class='font-medium text-white mb-3'>Agency Usage:</h4>"
            
            # Group by agency
            agencies = {}
            for impl in implementations:
                agency_name = impl.agency.name
                if agency_name not in agencies:
                    agencies[agency_name] = []
                agencies[agency_name].append(impl)
            
            for agency_name, agency_impls in agencies.items():
                agency_usage_html += f'''
                <div class="mb-4">
                    <h5 class="text-sm font-medium text-blue-400 mb-2">{agency_name}</h5>
                    <div class="space-y-2 ml-3">
                '''
                for impl in agency_impls:
                    status_color = "green" if impl.status == "Active" else "yellow"
                    agency_usage_html += f'''
                    <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                            <span class="text-sm text-slate-300">{impl.function.name}</span>
                        </div>
                        <div class="text-right">
                            <span class="text-xs text-slate-500">
                                {impl.deployment_date.strftime('%Y-%m-%d') if impl.deployment_date else 'No date'}
                            </span>
                            {f'<br><span class="text-xs text-slate-400">v{impl.version}</span>' if impl.version else ''}
                        </div>
                    </div>
                    '''
                agency_usage_html += "</div></div>"
        else:
            agency_usage_html = "<p class='text-slate-400 text-sm'>No agency usage tracked for this component.</p>"
        
        # User roles (keep this here as it's component-specific info)
        roles = ""
        if component.user_roles:
            roles = "<h4 class='font-medium text-white mb-2 mt-4'>User Roles:</h4><ul class='space-y-1'>"
            for role in component.user_roles:
                roles += f'<li class="text-sm text-slate-300">‚Ä¢ {role.role_name}: {role.description or "No description"}</li>'
            roles += "</ul>"
        
        # Additional metadata
        metadata = ""
        if component.additional_metadata:
            metadata = "<h4 class='font-medium text-white mb-2 mt-4'>Additional Information:</h4><ul class='space-y-1'>"
            for key, value in component.additional_metadata.items():
                metadata += f'<li class="text-sm text-slate-300">‚Ä¢ {key.replace("_", " ").title()}: {value}</li>'
            metadata += "</ul>"
        
        html = f'''
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-3">
                    <h2 class="text-2xl font-bold text-white">{component.name}</h2>
                    {f'<span class="px-2 py-1 bg-blue-600/20 border border-blue-600/30 rounded text-xs text-blue-300">Composite</span>' if component.is_composite else ''}
                </div>
                <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                        onclick="clearComponentDetails()">
                    ‚úï Close
                </button>
            </div>
            
            <div class="grid grid-cols-1 gap-6">
                <div>
                    <h3 class="font-medium text-white mb-3">Component Information</h3>
                    <div class="space-y-2 text-sm">
                        <p class="text-slate-300"><strong>Version:</strong> {component.version or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Deployment Date:</strong> {component.deployment_date.strftime('%B %d, %Y') if component.deployment_date else "Unknown"}</p>
                        <p class="text-slate-300"><strong>Update Frequency:</strong> {component.update_frequency or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Vendor:</strong> {component.vendor.name if component.vendor else "No Vendor"}</p>
                    </div>
                    
                    {f'<div class="bg-red-900/20 border border-red-700/30 rounded p-3 mt-4"><h4 class="font-medium text-red-300 mb-2">Known Issues:</h4><p class="text-sm text-red-200">{component.known_issues}</p></div>' if component.known_issues else '<div class="bg-green-900/20 border border-green-700/30 rounded p-3 mt-4"><h4 class="font-medium text-green-300 mb-2">Status:</h4><p class="text-sm text-green-200">No known issues</p></div>'}
                    
                    <div class="mt-6">
                        {agency_usage_html}
                    </div>
                    
                    {roles}
                    {metadata}
                </div>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading component details: {str(e)}")
    
@main.route("/api/agencies/options")
def agencies_filter_options():
    """Get agency options for filter dropdowns"""
    try:
        # Get agencies that have component implementations
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

def clear_component_details_js():
    return '''
    <script>
    function clearComponentDetails() {
        // Reset component details panel
        document.getElementById('component-details').innerHTML = `
            <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
                <p class="text-slate-500 text-sm">Select a component to view details</p>
            </div>`;
        
        // Reset vendor details panel
        document.getElementById('vendor-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
        
        // Reset integration details panel
        document.getElementById('integration-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
    }
    </script>
    '''

# Vendors Management Routes
@main.route("/vendors")
def vendors_page():
    """Vendors management page"""
    return render_template("vendors.html")

@main.route("/api/vendors/list")
def vendors_list():
    """Get all vendors with enhanced filtering and component counts"""
    try:
        search = request.args.get('search', '').lower()
        sort_by = request.args.get('sort', 'name')
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base query with component counts
        query = db.session.query(
            Vendor,
            func.count(distinct(Component.id)).label('component_count')
        ).outerjoin(Component).group_by(Vendor.id)
        
        # Apply search filter
        if search:
            query = query.filter(Vendor.name.ilike(f'%{search}%'))
        
        # Apply agency filter - Fixed SQLAlchemy warning
        if agency_filter:
            agency_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Agency)\
                .filter(Agency.name == agency_filter)
            
            # Convert subquery to select() explicitly
            query = query.filter(Component.id.in_(agency_component_ids.scalar_subquery()))
        
        # Apply functional area filter - Fixed SQLAlchemy warning
        if functional_area_filter:
            fa_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Function)\
                .join(FunctionalArea)\
                .filter(FunctionalArea.name == functional_area_filter)
            
            # Convert subquery to select() explicitly
            query = query.filter(Component.id.in_(fa_component_ids.scalar_subquery()))
        
        # Apply sorting
        if sort_by == 'components':
            query = query.order_by(func.count(distinct(Component.id)).desc())
        elif sort_by == 'recent':
            # Sort by most recent component deployment
            subquery = db.session.query(
                Component.vendor_id,
                func.max(Component.deployment_date).label('latest_deployment')
            ).group_by(Component.vendor_id).subquery()
            
            query = query.outerjoin(subquery, Vendor.id == subquery.c.vendor_id)\
                         .order_by(subquery.c.latest_deployment.desc().nullslast())
        else:
            query = query.order_by(Vendor.name)
        
        vendors_with_counts = query.all()
        
        # Add component count to vendors for template
        for vendor, component_count in vendors_with_counts:
            vendor.component_count = component_count
        
        return render_template('fragments/vendor_list.html', 
                             vendors_with_counts=vendors_with_counts)
    except Exception as e:
        return html_error_fragment(f"Error loading vendors: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/details")
def vendor_details(vendor_id):
    """Get detailed information about a specific vendor"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        
        # Get components grouped by functional area
        components_by_area = {}
        
        # Fixed query - proper joins through the relationship chain
        components_query = db.session.query(Component, FunctionalArea.name.label('area_name'))\
            .filter(Component.vendor_id == vendor_id)\
            .join(AgencyFunctionImplementation, Component.agency_usages)\
            .join(Function, AgencyFunctionImplementation.function)\
            .join(FunctionalArea, Function.functional_area)\
            .distinct(Component.id, FunctionalArea.name)\
            .all()
        
        for component, area_name in components_query:
            if area_name not in components_by_area:
                components_by_area[area_name] = []
            if component not in components_by_area[area_name]:
                components_by_area[area_name].append(component)
        
        # Get vendor statistics
        total_components = Component.query.filter_by(vendor_id=vendor_id).count()
        components_with_issues = Component.query.filter_by(vendor_id=vendor_id).filter(Component.known_issues.isnot(None)).count()
        recent_deployments = Component.query.filter_by(vendor_id=vendor_id)\
            .filter(Component.deployment_date >= datetime.now().date() - timedelta(days=365)).count()
        
        # Get integration standards - simplified approach
        vendor_components = Component.query.filter_by(vendor_id=vendor_id).all()
        integration_standards = set()
        for component in vendor_components:
            for integration_point in component.integration_points:
                for standard in integration_point.standards:
                    integration_standards.add(standard.name)
        
        vendor.total_components = total_components
        vendor.components_with_issues = components_with_issues
        vendor.recent_deployments = recent_deployments
        vendor.integration_standards = list(integration_standards)
        vendor.components_by_area = components_by_area
        
        return render_template('fragments/vendor_details.html', vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading vendor details: {str(e)}")

@main.route("/api/vendors/form")
def vendor_form():
    """Return new vendor form"""
    try:
        form = VendorForm()
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/form")
def vendor_edit_form(vendor_id):
    """Return edit vendor form"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        form.populate_from_vendor(vendor)
        
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/vendors", methods=['POST'])
@login_required
def create_vendor():
    """Create a new vendor with JSON response"""
    try:
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Vendor.query.filter_by(name=form.name.data).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Create new vendor
            vendor = Vendor()
            form.populate_vendor(vendor)
            
            db.session.add(vendor)
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' created successfully")
        else:
            # Form validation failed - return validation error response
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error creating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['POST'])
@login_required
def update_vendor(vendor_id):
    """Update an existing vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current vendor)
            existing = Vendor.query.filter(
                Vendor.name == form.name.data,
                Vendor.id != vendor_id
            ).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Update vendor
            form.populate_vendor(vendor)
            
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' updated successfully")
        else:
            # Form validation failed - return validation error response
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error updating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['DELETE'])
@login_required
def delete_vendor(vendor_id):
    """Delete a vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        name = vendor.name
        
        # Check if vendor has components (prevent deletion)
        component_count = Component.query.filter_by(vendor_id=vendor_id).count()
        if component_count > 0:
            return json_error_response(
                f"Cannot delete vendor '{name}' because it has {component_count} associated components. "
                f"Please reassign or delete the components first."
            )
        
        # Delete the vendor
        db.session.delete(vendor)
        db.session.commit()
        
        return json_success_response(f"Vendor '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error deleting vendor: {str(e)}")

@main.route("/api/vendors/stats")
def vendors_stats():
    """Get vendor statistics for dashboard with optional filtering"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor query
        vendor_query = db.session.query(Vendor)
        
        # Apply filters to get relevant vendors
        if agency_filter or functional_area_filter:
            component_subquery = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_subquery = component_subquery\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                if not agency_filter:
                    component_subquery = component_subquery.join(AgencyFunctionImplementation)
                component_subquery = component_subquery\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Fix: Use scalar_subquery() to avoid SQLAlchemy warning
            vendor_ids_subquery = component_subquery.scalar_subquery()
            vendor_query = vendor_query.filter(Vendor.id.in_(vendor_ids_subquery))
        
        stats = {
            'total_vendors': vendor_query.count(),
            'active_vendors': vendor_query.join(Component).distinct().count(),
            'top_vendor': None,
            'avg_components_per_vendor': 0
        }
        
        # Get top vendor within filtered set
        top_vendor_query = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)
        
        if agency_filter or functional_area_filter:
            # Apply same filter to top vendor query
            vendor_ids_list = [v.id for v in vendor_query.all()]
            if vendor_ids_list:
                top_vendor_query = top_vendor_query.filter(Vendor.id.in_(vendor_ids_list))
        
        top_vendor_result = top_vendor_query.group_by(Vendor.id, Vendor.name)\
                                          .order_by(func.count(Component.id).desc())\
                                          .first()
        
        if top_vendor_result:
            stats['top_vendor'] = {
                'name': top_vendor_result.name,
                'component_count': top_vendor_result.component_count
            }
        
        # Calculate average components per vendor
        if stats['active_vendors'] > 0:
            total_components_query = db.session.query(func.count(Component.id))\
                .filter(Component.vendor_id.isnot(None))
            
            if agency_filter or functional_area_filter:
                vendor_ids_list = [v.id for v in vendor_query.all()]
                if vendor_ids_list:
                    total_components_query = total_components_query\
                        .filter(Component.vendor_id.in_(vendor_ids_list))
            
            total_components = total_components_query.scalar()
            stats['avg_components_per_vendor'] = round(total_components / stats['active_vendors'], 1)
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting vendor stats: {str(e)}")

@main.route("/api/integration/standards")
def integration_standards():
    """Get most common integration standards"""
    try:
        # Get standards from the Standards table
        standards = db.session.query(
            Standard.name,
            func.count(IntegrationPoint.id).label('usage_count')
        ).join(Standard.integration_points)\
         .group_by(Standard.name)\
         .order_by(func.count(IntegrationPoint.id).desc())\
         .limit(5).all()
        
        html = ""
        for standard, count in standards:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-cyan-600/10 border border-cyan-600/20 rounded">
                <span class="text-sm text-cyan-300">{standard}</span>
                <span class="text-xs text-cyan-400">{count} uses</span>
            </div>
            '''
        
        if not html:
            html = '<div class="text-center text-slate-500 text-sm py-4">No integration standards found</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center text-slate-500 text-sm py-4">Error loading standards</div>'

@main.route("/api/vendors/performance")
def vendor_performance():
    """Get vendor performance insights with filtering support"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor filter condition
        vendor_filter_condition = True
        
        if agency_filter or functional_area_filter:
            # Build subquery for vendor IDs that match filters
            component_query = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_query = component_query\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                if not agency_filter:
                    component_query = component_query.join(AgencyFunctionImplementation)
                component_query = component_query\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Get list of vendor IDs that match the filters
            vendor_ids_list = [row[0] for row in component_query.all() if row[0] is not None]
            if vendor_ids_list:
                vendor_filter_condition = Vendor.id.in_(vendor_ids_list)
            else:
                vendor_filter_condition = False  # No vendors match filters
        
        # Most reliable vendor (least issues)
        reliable_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('total_components'),
            func.sum(case((Component.known_issues.isnot(None), 1), else_=0)).label('issues_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .having(func.count(Component.id) > 0)\
         .order_by((func.sum(case((Component.known_issues.isnot(None), 1), else_=0)) / func.count(Component.id)).asc())\
         .first()
        
        # Newest vendor (most recent first deployment)
        newest_vendor = db.session.query(
            Vendor.name,
            func.min(Component.deployment_date).label('first_deployment')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.min(Component.deployment_date).desc())\
         .first()
        
        # Largest vendor (most components)
        largest_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(Component.id).desc())\
         .first()
        
        return jsonify({
            'most_reliable': reliable_vendor.name if reliable_vendor else 'N/A',
            'newest': newest_vendor.name if newest_vendor else 'N/A',
            'largest': largest_vendor.name if largest_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting vendor performance: {str(e)}")

# Keep remaining existing endpoints
@main.route("/api/components/overview")
def components_overview():
    try:
        components = Component.query.join(FunctionalArea).join(Vendor).limit(10).all()
        
        html = ""
        for component in components:
            status_color = "green" if component.known_issues is None else "yellow"
            html += f"""
            <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:bg-slate-800/70 transition-colors">
                <div class="flex items-center space-x-4">
                    <div class="w-3 h-3 bg-{status_color}-500 rounded-full"></div>
                    <div>
                        <h4 class="font-medium text-white">{component.name}</h4>
                        <p class="text-sm text-slate-400">{component.functional_area.name} ‚Ä¢ {component.vendor.name if component.vendor else 'No Vendor'}</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-sm text-slate-300">{component.version or 'No Version'}</p>
                    <p class="text-xs text-slate-500">{component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-12">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500 mb-4">Add your first agency to get started.</p>
                <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                    Add Component
                </button>
            </div>
            """
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components overview: {str(e)}")

@main.route("/api/vendors/top")
def top_vendors():
    try:
        vendors = db.session.query(Vendor, func.count(Component.id).label('component_count'))\
            .join(Component).group_by(Vendor.id).order_by(func.count(Component.id).desc()).limit(5).all()
        
        html = ""
        for vendor, count in vendors:
            html += f"""
            <div class="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
                <div>
                    <p class="font-medium text-white text-sm">{vendor.name}</p>
                    <p class="text-xs text-slate-400">{count} components</p>
                </div>
                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-white">{count}</span>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-6 text-slate-500">
                <p class="text-sm">No vendor data available</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error loading vendors</p></div>'

@main.route("/api/integration/health")
def integration_health():
    try:
        total_components = Component.query.count()
        integrated_components = db.session.query(Component).join(Component.integration_points).distinct().count()
        
        if total_components > 0:
            health_percentage = (integrated_components / total_components) * 100
        else:
            health_percentage = 0
        
        color = "green" if health_percentage >= 80 else "yellow" if health_percentage >= 50 else "red"
        
        html = f"""
        <div class="text-center">
            <div class="relative inline-flex items-center justify-center w-16 h-16 mb-4">
                <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path class="text-slate-700" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                    <path class="text-{color}-500" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="{health_percentage}, 100" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-white">{health_percentage:.0f}%</span>
                </div>
            </div>
            <h4 class="text-sm font-medium text-white mb-1">Integration Health</h4>
            <p class="text-xs text-slate-400">{integrated_components} of {total_components} components integrated</p>
        </div>
        """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error calculating health</p></div>'

@main.route("/api/activity/recent")
def recent_activity():
    try:
        recent_updates = UpdateLog.query.join(Component).order_by(UpdateLog.update_date.desc()).limit(10).all()
        
        html = ""
        for update in recent_updates:
            time_ago = datetime.utcnow() - update.update_date
            if time_ago.days > 0:
                time_str = f"{time_ago.days}d ago"
            elif time_ago.seconds > 3600:
                time_str = f"{time_ago.seconds // 3600}h ago"
            else:
                time_str = f"{time_ago.seconds // 60}m ago"
            
            html += f"""
            <div class="flex items-center space-x-4 p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-colors">
                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="flex-1">
                    <p class="text-sm font-medium text-white">{update.component.name} updated</p>
                    <p class="text-xs text-slate-400">{update.change_summary[:100] + '...' if update.change_summary and len(update.change_summary) > 100 else update.change_summary or 'No summary provided'}</p>
                    <p class="text-xs text-slate-500 mt-1">by {update.updated_by} ‚Ä¢ {time_str}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-8">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Recent Activity</h3>
                <p class="text-slate-500">Component updates will appear here.</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-8 text-slate-500"><p class="text-sm">Error loading activity</p></div>'

@main.route("/api/components/refresh")
def components_refresh():
    return components_overview()

# Agencies Management Routes
@main.route("/agencies")
def agencies_page():
    """Agencys management page"""
    return render_template("agencies.html")

@main.route("/api/agencies/list")
def agencies_list():
    """Get all agencys with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        query = Agency.query
        
        # Apply search filter
        if search:
            query = query.filter(Agency.name.ilike(f'%{search}%'))
        
        agencies = query.order_by(Agency.name).all()
        for agency in agencies:
            agency.logo_url = url_for('static', filename=f'images/transit_logos/{agency.short_name.lower().replace(" ", "_")}_logo.png')
            
        return render_template('fragments/agency_list.html', 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading agencys: {str(e)}")

@main.route("/api/agencies/<int:agency_id>/details")
def agency_details(agency_id):
    """Get detailed information about a specific agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png')

        
        return render_template('fragments/agency_details.html', 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading agency details: {str(e)}")

@main.route("/api/agencies/form")
def agency_form():
    """Return new agency form"""
    try:
        form = AgencyForm()
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")


@main.route("/api/agencies/<int:agency_id>/form")
def agency_edit_form(agency_id):
    """Return edit agency form"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        form.populate_from_agency(agency)
        
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/agencies", methods=['POST'])
@login_required
def create_agency():
    """Create a new agency"""
    try:
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Agency.query.filter_by(name=form.name.data).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Create new agency
            agency = Agency()
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.add(agency)
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' created successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=None)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating agency: {str(e)}")
    
@main.route("/api/agencies/<int:agency_id>", methods=['POST'])  # Note: Using POST with _method=PUT for HTMX
@login_required
def update_agency(agency_id):
    """Update an existing agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current agency)
            existing = Agency.query.filter(
                Agency.name == form.name.data,
                Agency.id != agency_id
            ).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Update agency
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' updated successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=agency)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating agency: {str(e)}")

@main.route("/api/agencies/<int:agency_id>", methods=['DELETE'])
@login_required
def delete_agency(agency_id):
    """Delete an agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        name = agency.name
        
        # Delete the agency (cascade will handle related records)
        db.session.delete(agency)
        db.session.commit()
        
        return html_success_fragment(f"Agency '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting agency: {str(e)}")
    
@main.route("/api/agencies/stats")
def agencies_stats():
    """Get agency statistics for dashboard"""
    try:
        # Total agencies
        total_agencies = Agency.query.count()
        
        # Active implementations
        active_implementations = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        
        # Average implementations per agency
        avg_implementations = 0
        if total_agencies > 0:
            total_implementations = AgencyFunctionImplementation.query.count()
            avg_implementations = round(total_implementations / total_agencies, 1)
        
        # Average vendors per agency (agencies that use components from different vendors)
        avg_vendors = 0
        if total_agencies > 0:
            # Count unique vendors per agency
            vendor_counts = db.session.query(
                AgencyFunctionImplementation.agency_id,
                func.count(func.distinct(Component.vendor_id)).label('vendor_count')
            ).join(Component)\
             .filter(Component.vendor_id.isnot(None))\
             .group_by(AgencyFunctionImplementation.agency_id)\
             .all()
            
            if vendor_counts:
                total_vendor_relationships = sum([count.vendor_count for count in vendor_counts])
                agencies_with_vendors = len(vendor_counts)
                avg_vendors = round(total_vendor_relationships / agencies_with_vendors, 1)
        
        # Most active agency (agency with most implementations)
        most_active = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('impl_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        stats = {
            'total_agencies': total_agencies,
            'active_implementations': active_implementations,
            'avg_implementations_per_agency': avg_implementations,
            'avg_vendors_per_agency': avg_vendors,
            'most_active_agency': most_active.name if most_active else 'N/A',
            'most_active_count': most_active.impl_count if most_active else 0
        }
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting agency stats: {str(e)}")

@main.route("/api/count/active-implementations")
def count_active_implementations():
    """Get count of active implementations"""
    try:
        count = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/agencies/insights")
def agency_insights():
    """Get agency insights for the sidebar"""
    try:
        # Most tech-advanced agency
        tech_leader = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('tech_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most common functional area
        common_area = db.session.query(
            FunctionalArea.name,
            func.count(AgencyFunctionImplementation.id).label('usage_count')
        ).join(Function)\
         .join(AgencyFunctionImplementation)\
         .group_by(FunctionalArea.id, FunctionalArea.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most used vendor
        top_vendor = db.session.query(
            Vendor.name,
            func.count(AgencyFunctionImplementation.id).label('deployment_count')
        ).join(Component)\
         .join(AgencyFunctionImplementation)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        return jsonify({
            'tech_leader': tech_leader.name if tech_leader else 'N/A',
            'tech_leader_count': tech_leader.tech_count if tech_leader else 0,
            'common_area': common_area.name if common_area else 'N/A',
            'top_vendor': top_vendor.name if top_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting agency insights: {str(e)}")
    
# Functional Areas Management Routes
@main.route("/functional-areas")
def functional_areas_page():
    """Functional areas management page"""
    return render_template("functional_areas.html")

@main.route("/api/functional-areas/list")
def functional_areas_list():
    """Get all functional areas with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        # Simple query - no agency relationship anymore
        query = FunctionalArea.query
        
        # Apply search filter
        if search:
            query = query.filter(FunctionalArea.name.ilike(f'%{search}%'))
        
        # Order by functional area name only
        functional_areas = query.order_by(FunctionalArea.name).all()
        
        return render_template('fragments/functional_area_list.html', 
                             functional_areas=functional_areas)
    except Exception as e:
        return html_error_fragment(f"Error loading functional areas: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/details")
def functional_area_details(functional_area_id):
    """Get detailed information about a specific functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        
        return render_template('fragments/functional_area_details.html', 
                             functional_area=functional_area)
    except Exception as e:
        return html_error_fragment(f"Error loading functional area details: {str(e)}")

@main.route("/api/functional-areas/form")
def functional_area_form():
    """Return new functional area form"""
    try:
        # Get all agencys for the dropdown
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=None, 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/form")
def functional_area_edit_form(functional_area_id):
    """Return edit functional area form"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=functional_area,
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/functional-areas", methods=['POST'])
@login_required
def create_functional_area():
    """Create a new functional area"""
    try:
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency
        existing = FunctionalArea.query.filter_by(
            name=data['name'], 
            agency_id=agency_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Create new functional area
        functional_area = FunctionalArea(
            name=data['name'],
            description=data.get('description') or None,
            agency_id=agency_id
        )
        
        db.session.add(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' created successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['PUT'])
@login_required
def update_functional_area(functional_area_id):
    """Update an existing functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency (excluding current area)
        existing = FunctionalArea.query.filter(
            FunctionalArea.name == data['name'],
            FunctionalArea.agency_id == agency_id,
            FunctionalArea.id != functional_area_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Update functional area
        functional_area.name = data['name']
        functional_area.description = data.get('description') or None
        functional_area.agency_id = agency_id
        
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' updated successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['DELETE'])
@login_required
def delete_functional_area(functional_area_id):
    """Delete a functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        name = functional_area.name
        agency_name = functional_area.agency.name
        
        # Delete the functional area (cascade will handle related records)
        db.session.delete(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{name}' from {agency_name} deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting functional area: {str(e)}")

@main.route("/api/count/functions")
def count_functions():
    try:
        count = Function.query.count()
        return str(count)
    except Exception as e:
        return "0"
    

@main.route('/contribute')
def contribute():
    return render_template('contribute.html')

@main.route("/api/filter-options/functional-areas")
def functional_areas_filter_options():
    """Get functional area options that have associated components"""
    try:
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Component)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/filter-options/vendors")
def vendors_filter_options():
    """Get vendor options that have associated components"""
    try:
        vendors = db.session.query(Vendor.name)\
            .join(Component)\
            .distinct()\
            .order_by(Vendor.name)\
            .all()
        
        html = '<option value="">All Vendors</option>'
        for vendor in vendors:
            html += f'<option value="{vendor.name}">{vendor.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Vendors</option>'
    
@main.route("/api/vendors/filter-options/agencies")
def vendor_agencies_filter_options():
    """Get agencies that have vendor relationships for filter dropdown"""
    try:
        # Find agencies that have components from vendors
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

@main.route("/api/vendors/filter-options/functional-areas")
def vendor_functional_areas_filter_options():
    """Get functional areas that have vendor relationships for filter dropdown"""
    try:
        # Find functional areas that have components from vendors
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Function)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/components/<int:component_id>/vendor")
def component_vendor_details(component_id):
    """Get vendor information for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.vendor:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No vendor assigned</span>
            </div>
            '''
        
        vendor = component.vendor
        website_link = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300">{vendor.website}</a>' if vendor.website else "No website"
        
        html = f'''
        <div class="space-y-3">
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Name</span>
                <span class="text-white font-medium">{vendor.name}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Website</span>
                <span class="text-white text-sm">{website_link}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Contact</span>
                <span class="text-white text-sm">{vendor.contact_email or vendor.contact_name or "Not provided"}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Phone</span>
                <span class="text-white text-sm">{vendor.contact_phone or vendor.vendor_phone or "Not provided"}</span>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading vendor info</span></div>'

@main.route("/api/components/<int:component_id>/integrations")
def component_integration_details(component_id):
    """Get integration points for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.integration_points:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No integrations configured</span>
            </div>
            '''
        
        html = '<div class="space-y-2">'
        for ip in component.integration_points:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                <span class="text-sm text-slate-300">{ip.name}</span>
                <span class="text-xs text-slate-500">{ip.integration_type or "Standard"}</span>
            </div>
            '''
        html += '</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading integrations</span></div>'
# End of app/routes/main.py

# Start of app/models/__init__.py
# Example model - create more files in app/models/ as needed
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String
from app import db

# Import existing models
from .tran import (
    Agency, FunctionalArea, Vendor, Component, Function,
    IntegrationPoint, UserRole, UpdateLog, Standard, TagGroup, Tag,
    AgencyFunctionImplementation
)

# Import GTFS models
from .gtfs import (
    GTFSAgency, GTFSStop, GTFSRoute, GTFSCalendar, GTFSCalendarDate,
    GTFSTrip, GTFSStopTime, GTFSShape, GTFSFeedInfo,
    GTFSFareMedia, GTFSRiderCategory, GTFSFareProduct, 
    GTFSTimeframe, GTFSFareLegRule, GTFSFareTransferRule
)

__all__ = [
    # Base models
    'Agency', 'FunctionalArea', 'Function', 'Vendor', 'Component',
    'IntegrationPoint', 'UserRole', 'UpdateLog', 'Standard', 'TagGroup', 'Tag',
    'AgencyFunctionImplementation',
    
    # GTFS models  
    'GTFSAgency', 'GTFSStop', 'GTFSRoute', 'GTFSCalendar', 'GTFSCalendarDate',
    'GTFSTrip', 'GTFSStopTime', 'GTFSShape', 'GTFSFeedInfo',
    'GTFSFareMedia', 'GTFSRiderCategory', 'GTFSFareProduct', 
    'GTFSTimeframe', 'GTFSFareLegRule', 'GTFSFareTransferRule'
]


# End of app/models/__init__.py

# Start of app/models/tran.py
# models/tran.py

from datetime import datetime
from app import db
import enum

# Association Tables
component_integration = db.Table(
    'component_integration',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True)
)

function_component = db.Table(
    'function_component',
    db.Column('function_id', db.Integer, db.ForeignKey('functions.id'), primary_key=True),
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True)
)

component_tag = db.Table(
    'component_tag',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_tag = db.Table(
    'integration_tag',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_standard = db.Table(
    'integration_standard',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('standard_id', db.Integer, db.ForeignKey('standards.id'), primary_key=True)
)

# Enums
class Criticality(enum.Enum):
    high = "high"
    medium = "medium"
    low = "low"

# Core Models
class Agency(db.Model):
    __tablename__ = 'agencies'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    location = db.Column(db.String(100))
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))
    ceo = db.Column(db.String(128))
    address_hq = db.Column(db.String(256))
    phone_number = db.Column(db.String(64))
    transit_map_link = db.Column(db.String(256))
    contact_email = db.Column(db.String(255))
    contact_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    short_name = db.Column(db.String(50)) # TODO: use short name for constructing agency specific URLs for images, etc.
    additional_metadata = db.Column(db.JSON)
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_transit_system_name'),
    )

    function_implementations = db.relationship('AgencyFunctionImplementation', back_populates='agency', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Agency(name={self.name}, location={self.location})>"

class FunctionalArea(db.Model):
    __tablename__ = 'functional_areas'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    functions = db.relationship('Function', back_populates='functional_area', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<FunctionalArea(name={self.name})>"

class Function(db.Model):
    __tablename__ = 'functions'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    criticality = db.Column(db.Enum(Criticality), default=Criticality.medium, nullable=False)

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'), nullable=False)
    functional_area = db.relationship('FunctionalArea', back_populates='functions')

    components = db.relationship('Component', secondary='function_component', back_populates='functions')
    agency_implementations = db.relationship('AgencyFunctionImplementation', back_populates='function', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Function(name={self.name}, criticality={self.criticality.value})>"

class Vendor(db.Model):
    __tablename__ = 'vendors'
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_vendor_name'),
    )

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    short_name = db.Column(db.String(50))
    website = db.Column(db.String(255))
    vendor_email = db.Column(db.String(255))
    vendor_phone = db.Column(db.String(50))
    description = db.Column(db.String(500))

    components = db.relationship('Component', back_populates='vendor', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Vendor(name={self.name})>"
    
    @property
    def logo_url(self):
        """Generate vendor logo URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_logos/{self.short_name.lower().replace(" ", "_")}_logo.png')
        return None
    
    @property
    def header_url(self):
        """Generate vendor header URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_headers/{self.short_name.lower().replace(" ", "_")}_header.png')
        return None

class Component(db.Model):
    __tablename__ = 'components'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(1000))
    version = db.Column(db.String(50))
    deployment_date = db.Column(db.Date)
    update_frequency = db.Column(db.String(50))
    known_issues = db.Column(db.String(500))
    additional_metadata = db.Column(db.JSON)
    # Component nesting functionality
    parent_component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=True)
    parent_component = db.relationship('Component', remote_side=[id], backref='child_components')
    is_composite = db.Column(db.Boolean, default=False, nullable=False)
    vendor_id = db.Column(db.Integer, db.ForeignKey('vendors.id'), nullable=True)

    vendor = db.relationship('Vendor', back_populates='components')
    functions = db.relationship('Function', secondary='function_component', back_populates='components')
    integration_points = db.relationship('IntegrationPoint', secondary='component_integration', back_populates='components')
    tags = db.relationship('Tag', secondary='component_tag', back_populates='components')
    user_roles = db.relationship('UserRole', back_populates='component', cascade='all, delete-orphan')
    update_logs = db.relationship('UpdateLog', back_populates='component', cascade='all, delete-orphan')
    agency_usages = db.relationship('AgencyFunctionImplementation', back_populates='component', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Component(name={self.name}, version={self.version})>"
    
class AgencyFunctionImplementation(db.Model):
    __tablename__ = 'agency_function_implementations'
    
    id = db.Column(db.Integer, primary_key=True)
    agency_id = db.Column(db.Integer, db.ForeignKey('agencies.id'), nullable=False)
    function_id = db.Column(db.Integer, db.ForeignKey('functions.id'), nullable=False)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    
    # Agency-specific deployment details
    deployment_date = db.Column(db.Date)
    version = db.Column(db.String(50))
    deployment_notes = db.Column(db.String(1000))
    status = db.Column(db.String(50), default='Active')  # Active, Planned, Retired
    implementation_notes = db.Column(db.String(1000))
    additional_metadata = db.Column(db.JSON)
    
    # Relationships
    agency = db.relationship('Agency', back_populates='function_implementations')
    function = db.relationship('Function', back_populates='agency_implementations')  
    component = db.relationship('Component', back_populates='agency_usages')
    
    # Unique constraint
    __table_args__ = (
        db.UniqueConstraint('agency_id', 'function_id', 'component_id', 
                          name='uq_agency_function_component'),
    )
    
    def __repr__(self):
        return f"<AgencyFunctionImplementation(agency={self.agency.name if self.agency else None}, function={self.function.name if self.function else None}, component={self.component.name if self.component else None})>"

class IntegrationPoint(db.Model):
    __tablename__ = 'integration_points'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))

    standards = db.relationship('Standard', secondary=integration_standard, back_populates='integration_points')
    components = db.relationship('Component', secondary='component_integration', back_populates='integration_points')
    tags = db.relationship('Tag', secondary=integration_tag, back_populates='integration_points')

    def __repr__(self):
        return f"<IntegrationPoint(name={self.name})>"

class Standard(db.Model):
    __tablename__ = 'standards'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))
    version = db.Column(db.String(50))
    standard_url = db.Column(db.String(255))

    integration_points = db.relationship('IntegrationPoint', secondary=integration_standard, back_populates='standards')

    def __repr__(self):
        return f"<Standard(name={self.name}, version={self.version})>"

class TagGroup(db.Model):
    __tablename__ = 'tag_groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))

    tags = db.relationship('Tag', back_populates='tag_group', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TagGroup(name={self.name})>"

class Tag(db.Model):
    __tablename__ = 'tags'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    color = db.Column(db.String(20))

    tag_group_id = db.Column(db.Integer, db.ForeignKey('tag_groups.id'), nullable=False)
    tag_group = db.relationship('TagGroup', back_populates='tags')

    components = db.relationship('Component', secondary='component_tag', back_populates='tags')
    integration_points = db.relationship('IntegrationPoint', secondary=integration_tag, back_populates='tags')

    def __repr__(self):
        return f"<Tag(name={self.name})>"
    
class UserRole(db.Model):
    __tablename__ = 'user_roles'

    id = db.Column(db.Integer, primary_key=True)
    role_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    component_id = db.Column(db.Integer, db.ForeignKey('components.id'))
    component = db.relationship('Component', back_populates='user_roles')

    def __repr__(self):
        return f"<UserRole(role_name={self.role_name})>"

class UpdateLog(db.Model):
    __tablename__ = 'update_logs'

    id = db.Column(db.Integer, primary_key=True)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    updated_by = db.Column(db.String(100), nullable=False)
    update_date = db.Column(db.DateTime, default=datetime.utcnow)
    change_summary = db.Column(db.String(1000))

    component = db.relationship('Component', back_populates='update_logs')

    def __repr__(self):
        return f"<UpdateLog(component_id={self.component_id}, updated_by={self.updated_by})>"

# End of app/models/tran.py

# Start of app/models/gtfs.py
# app/models/gtfs.py
from sqlalchemy import String, Integer, Float, Date, Time, Boolean, Text, ForeignKey, DECIMAL
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import Optional
from datetime import date, time
from app import db

# GTFS Models with prefix to avoid naming conflicts
class GTFSAgency(db.Model):
    __tablename__ = "gtfs_agency"
    
    agency_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    agency_name: Mapped[str] = mapped_column(String(255), nullable=False)
    agency_url: Mapped[str] = mapped_column(String(500), nullable=False)
    agency_timezone: Mapped[str] = mapped_column(String(50), nullable=False)
    agency_lang: Mapped[Optional[str]] = mapped_column(String(10))
    agency_phone: Mapped[Optional[str]] = mapped_column(String(50))
    agency_fare_url: Mapped[Optional[str]] = mapped_column(String(500))
    
    # Relationships
    routes: Mapped[list["GTFSRoute"]] = relationship(back_populates="agency")


class GTFSStop(db.Model):
    __tablename__ = "gtfs_stops"
    
    stop_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    stop_code: Mapped[Optional[str]] = mapped_column(String(50))
    stop_name: Mapped[str] = mapped_column(String(255), nullable=False)
    stop_desc: Mapped[Optional[str]] = mapped_column(Text)
    stop_lat: Mapped[float] = mapped_column(Float, nullable=False)
    stop_lon: Mapped[float] = mapped_column(Float, nullable=False)
    zone_id: Mapped[Optional[str]] = mapped_column(String(50))
    stop_url: Mapped[Optional[str]] = mapped_column(String(500))
    location_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    parent_station: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_stops.stop_id"))
    stop_timezone: Mapped[Optional[str]] = mapped_column(String(50))
    wheelchair_boarding: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    
    # Self-referential relationship for parent station
    child_stops: Mapped[list["GTFSStop"]] = relationship(remote_side=[stop_id])
    
    # Relationships
    stop_times: Mapped[list["GTFSStopTime"]] = relationship(back_populates="stop")


class GTFSRoute(db.Model):
    __tablename__ = "gtfs_routes"
    
    route_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    agency_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_agency.agency_id"), nullable=False)
    route_short_name: Mapped[Optional[str]] = mapped_column(String(50))
    route_long_name: Mapped[str] = mapped_column(String(255), nullable=False)
    route_desc: Mapped[Optional[str]] = mapped_column(Text)
    route_type: Mapped[int] = mapped_column(Integer, nullable=False)
    route_url: Mapped[Optional[str]] = mapped_column(String(500))
    route_color: Mapped[Optional[str]] = mapped_column(String(6), default="FFFFFF")
    route_text_color: Mapped[Optional[str]] = mapped_column(String(6), default="000000")
    route_sort_order: Mapped[Optional[int]] = mapped_column(Integer)
    network_id: Mapped[Optional[str]] = mapped_column(String(50))
    
    # Relationships
    agency: Mapped["GTFSAgency"] = relationship(back_populates="routes")
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="route")


class GTFSCalendar(db.Model):
    __tablename__ = "gtfs_calendar"
    
    service_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    monday: Mapped[int] = mapped_column(Integer, nullable=False)
    tuesday: Mapped[int] = mapped_column(Integer, nullable=False)
    wednesday: Mapped[int] = mapped_column(Integer, nullable=False)
    thursday: Mapped[int] = mapped_column(Integer, nullable=False)
    friday: Mapped[int] = mapped_column(Integer, nullable=False)
    saturday: Mapped[int] = mapped_column(Integer, nullable=False)
    sunday: Mapped[int] = mapped_column(Integer, nullable=False)
    start_date: Mapped[date] = mapped_column(Date, nullable=False)
    end_date: Mapped[date] = mapped_column(Date, nullable=False)
    
    # Relationships
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="calendar")
    calendar_dates: Mapped[list["GTFSCalendarDate"]] = relationship(back_populates="calendar")


class GTFSCalendarDate(db.Model):
    __tablename__ = "gtfs_calendar_dates"
    
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), primary_key=True)
    date: Mapped[date] = mapped_column(Date, primary_key=True)
    exception_type: Mapped[int] = mapped_column(Integer, nullable=False)
    
    # Relationships
    calendar: Mapped["GTFSCalendar"] = relationship(back_populates="calendar_dates")


class GTFSTrip(db.Model):
    __tablename__ = "gtfs_trips"
    
    trip_id: Mapped[str] = mapped_column(String(100), primary_key=True)
    route_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_routes.route_id"), nullable=False)
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), nullable=False)
    trip_headsign: Mapped[Optional[str]] = mapped_column(String(255))
    trip_short_name: Mapped[Optional[str]] = mapped_column(String(50))
    direction_id: Mapped[Optional[int]] = mapped_column(Integer)
    block_id: Mapped[Optional[str]] = mapped_column(String(50))
    shape_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_shapes.shape_id"))
    wheelchair_accessible: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    bikes_allowed: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    
    # Relationships
    route: Mapped["GTFSRoute"] = relationship(back_populates="trips")
    calendar: Mapped["GTFSCalendar"] = relationship(back_populates="trips")
    shape: Mapped[Optional["GTFSShape"]] = relationship(back_populates="trips")
    stop_times: Mapped[list["GTFSStopTime"]] = relationship(back_populates="trip")


class GTFSStopTime(db.Model):
    __tablename__ = "gtfs_stop_times"
    
    trip_id: Mapped[str] = mapped_column(String(100), ForeignKey("gtfs_trips.trip_id"), primary_key=True)
    arrival_time: Mapped[time] = mapped_column(Time, nullable=False)
    departure_time: Mapped[time] = mapped_column(Time, nullable=False)
    stop_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_stops.stop_id"), nullable=False)
    stop_sequence: Mapped[int] = mapped_column(Integer, primary_key=True)
    stop_headsign: Mapped[Optional[str]] = mapped_column(String(255))
    pickup_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    drop_off_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    shape_dist_traveled: Mapped[Optional[float]] = mapped_column(Float)
    timepoint: Mapped[Optional[int]] = mapped_column(Integer, default=1)
    
    # Relationships
    trip: Mapped["GTFSTrip"] = relationship(back_populates="stop_times")
    stop: Mapped["GTFSStop"] = relationship(back_populates="stop_times")


class GTFSShape(db.Model):
    __tablename__ = "gtfs_shapes"
    
    shape_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    shape_pt_lat: Mapped[float] = mapped_column(Float, primary_key=True)
    shape_pt_lon: Mapped[float] = mapped_column(Float, primary_key=True)
    shape_pt_sequence: Mapped[int] = mapped_column(Integer, primary_key=True)
    shape_dist_traveled: Mapped[Optional[float]] = mapped_column(Float)
    
    # Relationships
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="shape")


class GTFSFeedInfo(db.Model):
    __tablename__ = "gtfs_feed_info"
    
    feed_publisher_name: Mapped[str] = mapped_column(String(255), primary_key=True)
    feed_publisher_url: Mapped[str] = mapped_column(String(500), nullable=False)
    feed_lang: Mapped[str] = mapped_column(String(10), nullable=False)
    feed_start_date: Mapped[Optional[date]] = mapped_column(Date)
    feed_end_date: Mapped[Optional[date]] = mapped_column(Date)
    feed_version: Mapped[Optional[str]] = mapped_column(String(50))
    feed_contact_email: Mapped[Optional[str]] = mapped_column(String(255))
    feed_contact_url: Mapped[Optional[str]] = mapped_column(String(500))


# GTFS-Fares v2 Tables
class GTFSFareMedia(db.Model):
    __tablename__ = "gtfs_fare_media"
    
    fare_media_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_media_name: Mapped[Optional[str]] = mapped_column(String(255))
    fare_media_type: Mapped[int] = mapped_column(Integer, nullable=False)
    
    # Relationships
    fare_products: Mapped[list["GTFSFareProduct"]] = relationship(back_populates="fare_media")


class GTFSRiderCategory(db.Model):
    __tablename__ = "gtfs_rider_categories"
    
    rider_category_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    rider_category_name: Mapped[Optional[str]] = mapped_column(String(255))
    is_default_fare_category: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    min_age: Mapped[Optional[int]] = mapped_column(Integer)
    max_age: Mapped[Optional[int]] = mapped_column(Integer)
    eligibility_url: Mapped[Optional[str]] = mapped_column(String(500))
    
    # Relationships
    fare_products: Mapped[list["GTFSFareProduct"]] = relationship(back_populates="rider_category")


class GTFSFareProduct(db.Model):
    __tablename__ = "gtfs_fare_products"
    
    fare_product_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_product_name: Mapped[Optional[str]] = mapped_column(String(255))
    rider_category_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_rider_categories.rider_category_id"))
    fare_media_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_fare_media.fare_media_id"))
    amount: Mapped[DECIMAL] = mapped_column(DECIMAL(10, 2), nullable=False)
    currency: Mapped[str] = mapped_column(String(3), nullable=False)
    
    # Relationships
    rider_category: Mapped[Optional["GTFSRiderCategory"]] = relationship(back_populates="fare_products")
    fare_media: Mapped[Optional["GTFSFareMedia"]] = relationship(back_populates="fare_products")
    fare_leg_rules: Mapped[list["GTFSFareLegRule"]] = relationship(back_populates="fare_product")
    fare_transfer_rules: Mapped[list["GTFSFareTransferRule"]] = relationship(back_populates="fare_product")


class GTFSTimeframe(db.Model):
    __tablename__ = "gtfs_timeframes"
    
    timeframe_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    start_time: Mapped[time] = mapped_column(Time, primary_key=True)
    end_time: Mapped[time] = mapped_column(Time, primary_key=True)
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), nullable=False)
    
    # Relationships with explicit primaryjoin to fix SQLAlchemy relationship issues
    fare_leg_rules_from: Mapped[list["GTFSFareLegRule"]] = relationship(
        primaryjoin="GTFSTimeframe.timeframe_group_id == GTFSFareLegRule.from_timeframe_group_id",
        back_populates="from_timeframe"
    )
    fare_leg_rules_to: Mapped[list["GTFSFareLegRule"]] = relationship(
        primaryjoin="GTFSTimeframe.timeframe_group_id == GTFSFareLegRule.to_timeframe_group_id",
        back_populates="to_timeframe"
    )


class GTFSFareLegRule(db.Model):
    __tablename__ = "gtfs_fare_leg_rules"
    
    leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    network_id: Mapped[Optional[str]] = mapped_column(String(50))
    fare_product_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_fare_products.fare_product_id"), primary_key=True)
    from_timeframe_group_id: Mapped[Optional[str]] = mapped_column(String(50), primary_key=True)
    to_timeframe_group_id: Mapped[Optional[str]] = mapped_column(String(50))
    
    # Relationships
    fare_product: Mapped["GTFSFareProduct"] = relationship(back_populates="fare_leg_rules")
    from_timeframe: Mapped[Optional["GTFSTimeframe"]] = relationship(
        foreign_keys=[from_timeframe_group_id],
        back_populates="fare_leg_rules_from"
    )
    to_timeframe: Mapped[Optional["GTFSTimeframe"]] = relationship(
        foreign_keys=[to_timeframe_group_id],
        back_populates="fare_leg_rules_to"
    )


class GTFSFareTransferRule(db.Model):
    __tablename__ = "gtfs_fare_transfer_rules"
    
    from_leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    to_leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_product_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_fare_products.fare_product_id"))
    transfer_count: Mapped[Optional[int]] = mapped_column(Integer)
    duration_limit: Mapped[Optional[int]] = mapped_column(Integer)
    duration_limit_type: Mapped[Optional[int]] = mapped_column(Integer)
    fare_transfer_type: Mapped[Optional[int]] = mapped_column(Integer)
    
    # Relationships
    fare_product: Mapped[Optional["GTFSFareProduct"]] = relationship(back_populates="fare_transfer_rules")
# End of app/models/gtfs.py

# Start of app/templates/base.html
<!doctype html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title|default("See-Tran - Transit System Intelligence") }}</title>
  <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">
  <link rel="stylesheet" href="{{ url_for("static", filename="css/tailwind.css") }}">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .glass-effect { 
      backdrop-filter: blur(10px); 
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.1);
    }
    .glow-effect {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }
    .nav-link::after {
      content: '';
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #3b82f6, #06b6d4);
      transition: width 0.3s ease;
    }
    .nav-link:hover::after {
      width: 100%;
    }
    .metric-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
      transition: all 0.3s ease;
    }
    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
  
  <!-- Navigation -->
<nav class="glass-effect border-b border-slate-700/50 sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo and Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-3 group hover:opacity-90 transition-opacity">
          <div class="w-8 h-8 rounded-lg flex items-center justify-center">
            <img src="{{ url_for('static', filename='images/logo.png') }}" 
                 alt="SeeTran Logo" 
                 class="w-5 h-5 object-contain">
          </div>
          <div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
              see-tran
            </h1>
          </div>
        </a>
      </div>

      <!-- Navigation and User Menu -->
      <div class="flex items-center space-x-8">
        <!-- Main Navigation -->
        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Dashboard</a>
          <a href="/agencies" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Agencies</a>
          <a href="/functional-areas" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Functions</a>
          <a href="/components" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Components</a>
          <a href="/vendors" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Vendors</a>
          <a href="/integration" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Integrations</a>
          <a href="/reports" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Reports</a>
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4 ml-8">
          <button class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors">
            <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </button>
          <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
        </div>
      </div>
    </div>
  </div>
</nav>

  <!-- Main Content -->
  <main class="min-h-screen">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="glass-effect border-t border-slate-700/50 mt-auto">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-slate-400 text-sm">
          SeeTran Platform. Transit system visibility and intelligence.
        </div>
        <div class="flex space-x-6 mt-4 md:mt-0 items-center">
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Documentation</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">API</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Support</a>
          <a href="/contribute" class="inline-flex items-center text-emerald-400 hover:text-emerald-300 text-sm font-medium">
            üåê Open Source <span class="hidden sm:inline">&nbsp;| See how it works</span>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="{{ url_for("static", filename="js/htmx.min.js") }}"></script>
  <script src="{{ url_for("static", filename="js/main.js") }}"></script>
  <script>
    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Add loading states for HTMX requests
    document.body.addEventListener('htmx:beforeRequest', function(e) {
      const target = e.target;
      if (target.classList.contains('btn-loading')) {
        target.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      }
    });
  </script>
  {% block scripts %}{% endblock %}
</body>
</html>
# End of app/templates/base.html

# Start of app/templates/index.html
{% extends "base.html" %}
{% block content %}

<!-- Hero Section -->
<div class="relative overflow-hidden">
  <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-6">
        <span class="bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 bg-clip-text text-transparent">
          Transit System
        </span>
        <br>
        <span class="text-white">Intelligence Platform</span>
      </h1>
      <p class="text-xl text-slate-300 mb-8 max-w-3xl mx-auto">
        Comprehensive visibility into public transit system infrastructure, vendor relationships, 
        and system integrations in real-time.
      </p>
      <div class="flex flex-col sm:flex-row justify-center gap-4">
        <button hx-get="/api/health" hx-swap="innerHTML" hx-target="#health-demo" 
                class="px-8 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-semibold 
                       hover:from-blue-700 hover:to-cyan-700 transition-all glow-effect">
          Test System Health
        </button>
        <button class="px-8 py-3 border border-slate-600 rounded-lg font-semibold hover:bg-slate-800 transition-all">
          View the Docs
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Dashboard Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  
  <!-- Metrics Overview -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
    
    <!-- Transit Agency Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Transit Agencies</h3>
      <p class="text-xs text-slate-500">Active transportation networks</p>
    </div>

    <!-- Functional Areas Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/functional-areas" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Functional Areas</h3>
      <p class="text-xs text-slate-500">Operational domains</p>
    </div>

    <!-- Active Components Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/components" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Active Components</h3>
      <p class="text-xs text-slate-500">Deployed technology components</p>
    </div>

    <!-- Integration Points Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/integration-points" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Integration Points</h3>
      <p class="text-xs text-slate-500">System interconnections</p>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- System Status Panel -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">System Status</h2>
          <div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-sm text-slate-300">All Systems Operational</span>
          </div>
        </div>
        
        <!-- Demo System Status -->
        <div class="space-y-4">
          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Database Connection</h4>
                <p class="text-sm text-slate-400">SQLite ‚Ä¢ Local Development</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Response: 2ms</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Web Server</h4>
                <p class="text-sm text-slate-400">Flask Development Server</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Port: 5000</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">HTMX Integration</h4>
                <p class="text-sm text-slate-400">Dynamic UI Updates</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Active</p>
              <p class="text-xs text-slate-500">v2.0.4</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      
      <!-- System Health Demo -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">System Health</h3>
        <div id="health-demo" class="text-center">
          <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold text-white mb-2">Excellent</h4>
          <p class="text-sm text-slate-400">All systems functioning normally</p>
        </div>
      </div>

      <!-- Getting Started -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Getting Started</h3>
        <div class="space-y-3">
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">1</span>
            </div>
            <p class="text-sm text-slate-300">Add your first transit agency</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">2</span>
            </div>
            <p class="text-sm text-slate-300">Define functional areas</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">3</span>
            </div>
            <p class="text-sm text-slate-300">Configure system integration</p>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Transit Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Generate Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Information Cards -->
  <div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">System Tracking</h3>
      <p class="text-slate-400 text-sm">Monitor all your transit technology components, versions, and deployment status in one centralized dashboard.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Vendor Management</h3>
      <p class="text-slate-400 text-sm">Track vendor relationships, contact information, and system dependencies across your entire transit network.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Integration Mapping</h3>
      <p class="text-slate-400 text-sm">Visualize system integrations, data flows, and interconnections to understand your technology ecosystem.</p>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Auto-refresh metrics every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Add smooth animations for loaded content
document.body.addEventListener('htmx:afterSwap', function(e) {
  const newContent = e.detail.target;
  newContent.style.opacity = '0';
  newContent.style.transform = 'translateY(10px)';
  
  setTimeout(() => {
    newContent.style.transition = 'all 0.3s ease';
    newContent.style.opacity = '1';
    newContent.style.transform = 'translateY(0)';
  }, 50);
});
</script>
{% endblock %}
# End of app/templates/index.html

# Start of app/templates/agencies.html
{% extends "base.html" %}

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Transit Agency Management</h1>
    <p class="text-slate-400">Manage transit agencies and their organizational structure.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Agencies</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Implementations</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Tech/Agency</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Vendors/Agency</h3>
    </div>
  </div>

  <!-- Actions Bar -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search -->
      <div class="relative flex-1 max-w-md">
        <input type="text" id="agency-search" placeholder="Search transit agencies..." 
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
               hx-get="/api/agencies/list" hx-target="#agencies-list" hx-trigger="keyup changed delay:300ms" 
               hx-vals="js:{search: event.target.value}">
        <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
        </svg>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                class="px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Transit Agency
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Agencies List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Transit Agencies</h2>
          <button hx-get="/api/agencies/list" hx-target="#agencies-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="agencies-list" hx-get="/api/agencies/list" hx-trigger="load">
          <!-- Agencies will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Details/Form Sidebar -->
    <div class="space-y-6 sticky top-24 max-h-[calc(100vh-6rem)] overflow-y-auto">
      
      <!-- Agency Details Panel -->
      <div id="agency-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Agency Details</h3>
          <p class="text-slate-500 text-sm">Click on a transit agency to view details or use the Add button to create a new one.</p>
        </div>
      </div>

      <!-- Agency Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Transit Insights</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Tech Leader</span>
            <span class="text-blue-400 font-medium text-sm" id="tech-leader-agency">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Top Technology</span>
            <span class="text-green-400 font-medium text-sm" id="common-tech-area">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Leading Vendor</span>
            <span class="text-purple-400 font-medium text-sm" id="top-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                  class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Agency Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Load agency stats
document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/agencies/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('active-implementations-count').textContent = data.active_implementations;
      document.getElementById('avg-implementations-count').textContent = data.avg_implementations_per_agency;
      document.getElementById('avg-vendors-count').textContent = data.avg_vendors_per_agency;
    });

  // Load agency insights
  fetch('/api/agencies/insights')
    .then(response => response.json())
    .then(data => {
      document.getElementById('tech-leader-agency').textContent = data.tech_leader;
      document.getElementById('common-tech-area').textContent = data.common_area;
      document.getElementById('top-vendor').textContent = data.top_vendor;
    });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Success/error handling for forms
document.body.addEventListener('htmx:afterRequest', function(e) {
  if (e.detail.xhr.status === 200 && e.detail.requestConfig.verb === 'post') {
    // Success: refresh list and show success message
    htmx.trigger('#agencies-list', 'refresh');
  }
});
</script>
{% endblock %}
# End of app/templates/agencies.html

