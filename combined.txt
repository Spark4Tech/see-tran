# Project Directory Structure
./
    setup.sh
    .flaskenv
    run.py
    tailwind.config.js
    config.py
    combined.txt
    requirements.txt
    cat.py
    README.md
    .gitignore
    package-lock.json
    package.json
    .nvmrc
    postcss.config.js
    app/
        config_delete_me.py
        __init__.py
        models/
            tran.py
            __init__.py
            json/
                vendors.json
                tag_assignments.json
                transit_system.json
                standards.json
                tags.json
                functions.json
            data/
                categories.json
                transit_systems.json
                vendors.json
                functional_areas.json
                tran.json
                standards.json
                functions.json
        static/
            css/
                .keep
            js/
                .keep
        templates/
            index.html
            base.html
            systems.html
            vendors.html
        routes/
            __init__.py
            main.py
    tests/
        __init__.py
        test_app.py
    tailwind/
        config.js
        input.css
    scripts/
        load_functional_areas.py
        load_tran.py
        load_transit_systems.py
        load_vendors.py
        load_categories.py
        load_functions.py
        load_standards.py
    prompts/
        Data_Model.md
        Vendors.md
        More_Vendors.md
        Full_Vendors.md
        Technical_Design.md

# End of Directory Structure

# Start of app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os

db = SQLAlchemy()
migrate = Migrate()

def create_app(test_config=None):
    app = Flask(__name__)
    
    if test_config:
        app.config.update(test_config)
    else:
        # Import config classes
        from config import DevelopmentConfig, ProductionConfig, TestConfig
        
        # Use DevelopmentConfig by default, or based on environment
        flask_env = os.environ.get('FLASK_ENV', 'development')
        if flask_env == 'production':
            app.config.from_object(ProductionConfig)
        elif flask_env == 'testing':
            app.config.from_object(TestConfig)
        else:
            app.config.from_object(DevelopmentConfig)
    
    # Ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass
    
    db.init_app(app)
    migrate.init_app(app, db)
    
    # register blueprints
    from app.routes.main import main as main_bp
    app.register_blueprint(main_bp)
    
    return app
# End of app/__init__.py

# Start of run.py
# run.py
from app import create_app, db
from app.models.tran import (
    TransitSystem, FunctionalArea, Vendor, System,
    IntegrationPoint, UserRole, UpdateLog
)
import os

# Create the Flask app using the factory pattern
# The create_app() function now handles config selection internally
app = create_app()

# Ensure models are imported so Flask-Migrate can detect them
@app.shell_context_processor
def make_shell_context():
    return {
        'app': app,
        'db': db,
        'TransitSystem': TransitSystem,
        'FunctionalArea': FunctionalArea,
        'Vendor': Vendor,
        'System': System,
        'IntegrationPoint': IntegrationPoint,
        'UserRole': UserRole,
        'UpdateLog': UpdateLog
    }

if __name__ == '__main__':
    app.run(debug=True)
# End of run.py

# Start of app/routes/__init__.py

# End of app/routes/__init__.py

# Start of app/routes/main.py
from flask import Blueprint, render_template, jsonify, request
from app import db
from app.models.tran import TransitSystem, FunctionalArea, System, Vendor, IntegrationPoint, UpdateLog
from sqlalchemy import func
from datetime import datetime, timedelta

main = Blueprint("main", __name__)

@main.route("/")
def index():
    return render_template("index.html")

@main.route("/systems")
def systems_page():
    """Systems management page"""
    return render_template("systems.html")

@main.route("/api/health")
def health_check():
    return jsonify({"status": "ok", "timestamp": datetime.utcnow().isoformat()})

# Count endpoints for dashboard metrics
@main.route("/api/count/transit-systems")
def count_transit_systems():
    count = TransitSystem.query.count()
    return str(count)

@main.route("/api/count/functional-areas")
def count_functional_areas():
    count = FunctionalArea.query.count()
    return str(count)

@main.route("/api/count/systems")
def count_systems():
    count = System.query.count()
    return str(count)

@main.route("/api/count/integration-points")
def count_integration_points():
    count = IntegrationPoint.query.count()
    return str(count)

@main.route("/api/count/vendors")
def count_vendors():
    count = Vendor.query.count()
    return str(count)

@main.route("/api/systems/list")
def systems_list():
    """Get all systems with filtering"""
    functional_area = request.args.get('functional_area')
    vendor = request.args.get('vendor')
    status = request.args.get('status')
    
    query = System.query.join(FunctionalArea).join(TransitSystem)
    
    # Apply filters
    if functional_area:
        query = query.filter(FunctionalArea.name == functional_area)
    if vendor:
        query = query.join(Vendor).filter(Vendor.name == vendor)
    if status:
        if status == 'issues':
            query = query.filter(System.known_issues.isnot(None))
        elif status == 'no_issues':
            query = query.filter(System.known_issues.is_(None))
    
    systems = query.all()
    
    html = ""
    for system in systems:
        status_indicator = "red" if system.known_issues else "green"
        vendor_name = system.vendor.name if system.vendor else "No Vendor"
        
        html += f'''
        <div class="system-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-4 hover:bg-slate-800/70 transition-all cursor-pointer"
             hx-get="/api/systems/{system.id}/details" hx-target="#system-details" hx-swap="innerHTML">
            <div class="flex items-start justify-between">
                <div class="flex-1">
                    <div class="flex items-center space-x-3 mb-2">
                        <div class="w-3 h-3 bg-{status_indicator}-500 rounded-full"></div>
                        <h3 class="font-semibold text-white text-lg">{system.name}</h3>
                    </div>
                    <p class="text-slate-300 text-sm mb-2">{system.function}</p>
                    <div class="flex items-center space-x-4 text-xs text-slate-400">
                        <span>üìç {system.functional_area.name}</span>
                        <span>üè¢ {vendor_name}</span>
                        <span>üìÖ {system.deployment_date.strftime('%Y-%m-%d') if system.deployment_date else 'No Date'}</span>
                    </div>
                </div>
                <div class="text-right">
                    <div class="bg-slate-700 px-2 py-1 rounded text-xs text-slate-300 mb-2">
                        v{system.version or 'Unknown'}
                    </div>
                    <div class="text-xs text-slate-500">
                        {system.update_frequency or 'Unknown'}
                    </div>
                </div>
            </div>
            {f'<div class="mt-3 p-2 bg-red-900/20 border border-red-700/30 rounded text-xs text-red-300"><strong>Issues:</strong> {system.known_issues}</div>' if system.known_issues else ''}
        </div>
        '''
    
    if not html:
        html = '''
        <div class="text-center py-12">
            <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-slate-400 mb-2">No Systems Found</h3>
            <p class="text-slate-500">Try adjusting your filters or add new systems.</p>
        </div>
        '''
    
    return html

@main.route("/api/systems/<int:system_id>/details")
def system_details(system_id):
    """Get detailed information about a specific system"""
    system = System.query.get_or_404(system_id)
    
    # Integration points
    integrations = ""
    if system.integration_points:
        integrations = "<h4 class='font-medium text-white mb-2'>Integration Points:</h4><ul class='space-y-1'>"
        for ip in system.integration_points:
            integrations += f'<li class="text-sm text-slate-300">‚Ä¢ {ip.name} ({ip.standard or "No Standard"})</li>'
        integrations += "</ul>"
    
    # User roles
    roles = ""
    if system.user_roles:
        roles = "<h4 class='font-medium text-white mb-2 mt-4'>User Roles:</h4><ul class='space-y-1'>"
        for role in system.user_roles:
            roles += f'<li class="text-sm text-slate-300">‚Ä¢ {role.role_name}: {role.description or "No description"}</li>'
        roles += "</ul>"
    
    # Additional metadata
    metadata = ""
    if system.additional_metadata:
        metadata = "<h4 class='font-medium text-white mb-2 mt-4'>Additional Information:</h4><ul class='space-y-1'>"
        for key, value in system.additional_metadata.items():
            metadata += f'<li class="text-sm text-slate-300">‚Ä¢ {key.replace("_", " ").title()}: {value}</li>'
        metadata += "</ul>"
    
    vendor_info = ""
    if system.vendor:
        website_link = f'<a href="{system.vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300">{system.vendor.website}</a>' if system.vendor.website else "No website"
        vendor_info = f'''
        <h4 class='font-medium text-white mb-2 mt-4'>Vendor Information:</h4>
        <div class="bg-slate-700/30 p-3 rounded">
            <p class="text-sm text-slate-300 mb-1"><strong>Name:</strong> {system.vendor.name}</p>
            <p class="text-sm text-slate-300 mb-1"><strong>Website:</strong> {website_link}</p>
            <p class="text-sm text-slate-300 mb-1"><strong>Contact:</strong> {system.vendor.contact_info or "No contact info"}</p>
            <p class="text-sm text-slate-300"><strong>Description:</strong> {system.vendor.description or "No description"}</p>
        </div>
        '''
    
    html = f'''
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-white">{system.name}</h2>
            <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                    onclick="document.getElementById('system-details').innerHTML = `
                    <div class='glass-effect rounded-xl p-6 border border-slate-700/50 text-center'>
                        <div class='w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4'>
                            <svg class='w-8 h-8 text-slate-500' fill='currentColor' viewBox='0 0 20 20'>
                                <path d='M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z'/>
                            </svg>
                        </div>
                        <h3 class='text-lg font-medium text-slate-400 mb-2'>System Details</h3>
                        <p class='text-slate-500 text-sm'>Click on a system to view detailed information, vendor details, and integration points.</p>
                    </div>`">
                ‚úï Close
            </button>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
                <h3 class="font-medium text-white mb-3">System Information</h3>
                <div class="space-y-2 text-sm">
                    <p class="text-slate-300"><strong>Function:</strong> {system.function}</p>
                    <p class="text-slate-300"><strong>Version:</strong> {system.version or "Unknown"}</p>
                    <p class="text-slate-300"><strong>Deployment Date:</strong> {system.deployment_date.strftime('%B %d, %Y') if system.deployment_date else "Unknown"}</p>
                    <p class="text-slate-300"><strong>Update Frequency:</strong> {system.update_frequency or "Unknown"}</p>
                    <p class="text-slate-300"><strong>Functional Area:</strong> {system.functional_area.name}</p>
                    <p class="text-slate-300"><strong>Transit System:</strong> {system.functional_area.transit_system.name}</p>
                </div>
                
                {vendor_info}
            </div>
            
            <div>
                {f'<div class="bg-red-900/20 border border-red-700/30 rounded p-3 mb-4"><h4 class="font-medium text-red-300 mb-2">Known Issues:</h4><p class="text-sm text-red-200">{system.known_issues}</p></div>' if system.known_issues else '<div class="bg-green-900/20 border border-green-700/30 rounded p-3 mb-4"><h4 class="font-medium text-green-300 mb-2">Status:</h4><p class="text-sm text-green-200">No known issues</p></div>'}
                
                {integrations}
                {roles}
                {metadata}
            </div>
        </div>
    </div>
    '''
    
    return html

# Systems overview endpoint (from original dashboard)
@main.route("/api/systems/overview")
def systems_overview():
    systems = System.query.join(FunctionalArea).join(Vendor).limit(10).all()
    
    html = ""
    for system in systems:
        status_color = "green" if system.known_issues is None else "yellow"
        html += f"""
        <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:bg-slate-800/70 transition-colors">
            <div class="flex items-center space-x-4">
                <div class="w-3 h-3 bg-{status_color}-500 rounded-full"></div>
                <div>
                    <h4 class="font-medium text-white">{system.name}</h4>
                    <p class="text-sm text-slate-400">{system.functional_area.name} ‚Ä¢ {system.vendor.name if system.vendor else 'No Vendor'}</p>
                </div>
            </div>
            <div class="text-right">
                <p class="text-sm text-slate-300">{system.version or 'No Version'}</p>
                <p class="text-xs text-slate-500">{system.deployment_date.strftime('%Y-%m-%d') if system.deployment_date else 'No Date'}</p>
            </div>
        </div>
        """
    
    if not html:
        html = """
        <div class="text-center py-12">
            <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <h3 class="text-lg font-medium text-slate-400 mb-2">No Systems Found</h3>
            <p class="text-slate-500 mb-4">Add your first transit system to get started.</p>
            <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                Add System
            </button>
        </div>
        """
    
    return html

# Top vendors endpoint
@main.route("/api/vendors/top")
def top_vendors():
    vendors = db.session.query(Vendor, func.count(System.id).label('system_count')).join(System).group_by(Vendor.id).order_by(func.count(System.id).desc()).limit(5).all()
    
    html = ""
    for vendor, count in vendors:
        html += f"""
        <div class="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
            <div>
                <p class="font-medium text-white text-sm">{vendor.name}</p>
                <p class="text-xs text-slate-400">{count} systems</p>
            </div>
            <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                <span class="text-xs font-bold text-white">{count}</span>
            </div>
        </div>
        """
    
    if not html:
        html = """
        <div class="text-center py-6 text-slate-500">
            <p class="text-sm">No vendor data available</p>
        </div>
        """
    
    return html

# Integration health endpoint
@main.route("/api/integration/health")
def integration_health():
    total_systems = System.query.count()
    integrated_systems = db.session.query(System).join(System.integration_points).distinct().count()
    
    if total_systems > 0:
        health_percentage = (integrated_systems / total_systems) * 100
    else:
        health_percentage = 0
    
    color = "green" if health_percentage >= 80 else "yellow" if health_percentage >= 50 else "red"
    
    html = f"""
    <div class="text-center">
        <div class="relative inline-flex items-center justify-center w-16 h-16 mb-4">
            <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                <path class="text-slate-700" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"/>
                <path class="text-{color}-500" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="{health_percentage}, 100" d="M18 2.0845
                    a 15.9155 15.9155 0 0 1 0 31.831
                    a 15.9155 15.9155 0 0 1 0 -31.831"/>
            </svg>
            <div class="absolute inset-0 flex items-center justify-center">
                <span class="text-lg font-bold text-white">{health_percentage:.0f}%</span>
            </div>
        </div>
        <h4 class="text-sm font-medium text-white mb-1">Integration Health</h4>
        <p class="text-xs text-slate-400">{integrated_systems} of {total_systems} systems integrated</p>
    </div>
    """
    
    return html

# Recent activity endpoint
@main.route("/api/activity/recent")
def recent_activity():
    # Get recent update logs
    recent_updates = UpdateLog.query.join(System).order_by(UpdateLog.update_date.desc()).limit(10).all()
    
    html = ""
    for update in recent_updates:
        time_ago = datetime.utcnow() - update.update_date
        if time_ago.days > 0:
            time_str = f"{time_ago.days}d ago"
        elif time_ago.seconds > 3600:
            time_str = f"{time_ago.seconds // 3600}h ago"
        else:
            time_str = f"{time_ago.seconds // 60}m ago"
        
        html += f"""
        <div class="flex items-center space-x-4 p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-colors">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
                </svg>
            </div>
            <div class="flex-1">
                <p class="text-sm font-medium text-white">{update.system.name} updated</p>
                <p class="text-xs text-slate-400">{update.change_summary[:100] + '...' if update.change_summary and len(update.change_summary) > 100 else update.change_summary or 'No summary provided'}</p>
                <p class="text-xs text-slate-500 mt-1">by {update.updated_by} ‚Ä¢ {time_str}</p>
            </div>
        </div>
        """
    
    if not html:
        html = """
        <div class="text-center py-8">
            <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
            </svg>
            <h3 class="text-lg font-medium text-slate-400 mb-2">No Recent Activity</h3>
            <p class="text-slate-500">System updates will appear here.</p>
        </div>
        """
    
    return html

# Systems refresh endpoint (same as overview but with different response)
@main.route("/api/systems/refresh")
def systems_refresh():
    return systems_overview()

@main.route("/vendors")
def vendors_page():
    """Vendors management page"""
    return render_template("vendors.html")

@main.route("/api/vendors/list")
def vendors_list():
    """Get all vendors with filtering and system counts"""
    search = request.args.get('search', '').lower()
    sort_by = request.args.get('sort', 'name')  # name, systems, recent
    
    # Base query with system counts
    query = db.session.query(
        Vendor,
        func.count(System.id).label('system_count')
    ).outerjoin(System).group_by(Vendor.id)
    
    # Apply search filter
    if search:
        query = query.filter(Vendor.name.ilike(f'%{search}%'))
    
    # Apply sorting
    if sort_by == 'systems':
        query = query.order_by(func.count(System.id).desc())
    elif sort_by == 'recent':
        # Sort by most recently deployed system
        subquery = db.session.query(
            System.vendor_id,
            func.max(System.deployment_date).label('latest_deployment')
        ).group_by(System.vendor_id).subquery()
        
        query = query.outerjoin(subquery, Vendor.id == subquery.c.vendor_id)\
                     .order_by(subquery.c.latest_deployment.desc().nullslast())
    else:  # default: name
        query = query.order_by(Vendor.name)
    
    vendors_with_counts = query.all()
    
    html = ""
    for vendor, system_count in vendors_with_counts:
        # Get functional areas this vendor operates in
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(System).filter(System.vendor_id == vendor.id)\
            .distinct().all()
        
        fa_names = [fa.name for fa in functional_areas]
        fa_display = ", ".join(fa_names[:2])
        if len(fa_names) > 2:
            fa_display += f" +{len(fa_names) - 2} more"
        
        # Recent deployment info
        latest_system = System.query.filter_by(vendor_id=vendor.id)\
            .order_by(System.deployment_date.desc().nullslast()).first()
        
        latest_deployment = "No deployments"
        if latest_system and latest_system.deployment_date:
            latest_deployment = latest_system.deployment_date.strftime('%Y-%m-%d')
        
        # Vendor website link
        website_display = ""
        if vendor.website:
            domain = vendor.website.replace('https://', '').replace('http://', '').split('/')[0]
            website_display = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300 text-xs">{domain}</a>'
        
        html += f'''
        <div class="vendor-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
             hx-get="/api/vendors/{vendor.id}/details" hx-target="#vendor-details" hx-swap="innerHTML">
            <div class="flex items-start justify-between mb-4">
                <div class="flex-1">
                    <h3 class="font-semibold text-white text-xl mb-2">{vendor.name}</h3>
                    <p class="text-slate-300 text-sm mb-3">{vendor.description or 'No description available'}</p>
                    <div class="flex items-center space-x-4 text-xs text-slate-400">
                        <span>üè¢ {system_count} systems</span>
                        <span>üìç {fa_display if fa_names else 'No systems'}</span>
                        <span>üìÖ Latest: {latest_deployment}</span>
                    </div>
                </div>
                <div class="text-right">
                    <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-2">
                        <span class="text-lg font-bold text-white">{system_count}</span>
                    </div>
                    <div class="text-xs text-slate-500 text-center">Systems</div>
                </div>
            </div>
            
            <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
                <div class="flex items-center space-x-3">
                    {website_display}
                    {f'<span class="text-xs text-slate-500">‚Ä¢ {vendor.contact_info}</span>' if vendor.contact_info else ''}
                </div>
                <div class="flex items-center space-x-2">
                    <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span class="text-xs text-slate-400">Active</span>
                </div>
            </div>
        </div>
        '''
    
    if not html:
        html = '''
        <div class="text-center py-12">
            <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-slate-400 mb-2">No Vendors Found</h3>
            <p class="text-slate-500">Try adjusting your search or add new vendors.</p>
        </div>
        '''
    
    return html

@main.route("/api/vendors/<int:vendor_id>/details")
def vendor_details(vendor_id):
    """Get detailed information about a specific vendor"""
    vendor = Vendor.query.get_or_404(vendor_id)
    
    # Get all systems by this vendor grouped by functional area
    systems_by_area = {}
    systems = System.query.filter_by(vendor_id=vendor.id).join(FunctionalArea).all()
    
    for system in systems:
        area_name = system.functional_area.name
        if area_name not in systems_by_area:
            systems_by_area[area_name] = []
        systems_by_area[area_name].append(system)
    
    # Build systems display
    systems_html = ""
    if systems_by_area:
        systems_html = "<h4 class='font-medium text-white mb-3'>Systems Portfolio:</h4>"
        for area_name, area_systems in systems_by_area.items():
            systems_html += f'''
            <div class="mb-4">
                <h5 class="text-sm font-medium text-blue-400 mb-2">{area_name}</h5>
                <div class="space-y-2 ml-3">
            '''
            for system in area_systems:
                status_color = "red" if system.known_issues else "green"
                systems_html += f'''
                <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                        <span class="text-sm text-slate-300">{system.name}</span>
                    </div>
                    <span class="text-xs text-slate-500">v{system.version or 'Unknown'}</span>
                </div>
                '''
            systems_html += "</div></div>"
    else:
        systems_html = "<p class='text-slate-400 text-sm'>No systems found for this vendor.</p>"
    
    # Calculate some stats
    total_systems = len(systems)
    systems_with_issues = len([s for s in systems if s.known_issues])
    recent_deployments = len([s for s in systems if s.deployment_date and 
                             (datetime.now().date() - s.deployment_date).days <= 365])
    
    # Integration points
    integration_points = set()
    for system in systems:
        for ip in system.integration_points:
            integration_points.add(ip.name)
    
    integrations_html = ""
    if integration_points:
        integrations_html = f'''
        <h4 class='font-medium text-white mb-2 mt-4'>Integration Standards:</h4>
        <div class="flex flex-wrap gap-2">
            {' '.join([f'<span class="px-2 py-1 bg-cyan-600/20 border border-cyan-600/30 rounded text-xs text-cyan-300">{ip}</span>' for ip in integration_points])}
        </div>
        '''
    
    html = f'''
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
                <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span class="text-2xl font-bold text-white">{vendor.name[0].upper()}</span>
                </div>
                <div>
                    <h2 class="text-2xl font-bold text-white">{vendor.name}</h2>
                    <p class="text-slate-400">{vendor.description or 'No description available'}</p>
                </div>
            </div>
            <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                    onclick="document.getElementById('vendor-details').innerHTML = `
                    <div class='glass-effect rounded-xl p-6 border border-slate-700/50 text-center'>
                        <div class='w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4'>
                            <svg class='w-8 h-8 text-slate-500' fill='currentColor' viewBox='0 0 20 20'>
                                <path d='M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z'/>
                            </svg>
                        </div>
                        <h3 class='text-lg font-medium text-slate-400 mb-2'>Vendor Details</h3>
                        <p class='text-slate-500 text-sm'>Click on a vendor to view detailed information, system portfolio, and contact details.</p>
                    </div>`">
                ‚úï Close
            </button>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
            <!-- Stats Cards -->
            <div class="bg-blue-600/20 border border-blue-600/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-blue-300">{total_systems}</div>
                <div class="text-sm text-blue-200">Total Systems</div>
            </div>
            <div class="bg-green-600/20 border border-green-600/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-green-300">{total_systems - systems_with_issues}</div>
                <div class="text-sm text-green-200">Healthy Systems</div>
            </div>
            <div class="bg-purple-600/20 border border-purple-600/30 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-purple-300">{recent_deployments}</div>
                <div class="text-sm text-purple-200">Recent Deployments</div>
            </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
                <h3 class="font-medium text-white mb-3">Contact Information</h3>
                <div class="space-y-2 text-sm">
                    <p class="text-slate-300">
                        <strong>Website:</strong> 
                        {f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300 ml-2">{vendor.website}</a>' if vendor.website else '<span class="text-slate-500 ml-2">Not provided</span>'}
                    </p>
                    <p class="text-slate-300">
                        <strong>Contact:</strong> 
                        <span class="ml-2">{vendor.contact_info or 'Not provided'}</span>
                    </p>
                </div>
                
                {integrations_html}
            </div>
            
            <div>
                {systems_html}
            </div>
        </div>
    </div>
    '''
    
    return html

@main.route("/api/vendors/stats")
def vendors_stats():
    """Get vendor statistics for dashboard"""
    stats = {
        'total_vendors': Vendor.query.count(),
        'active_vendors': db.session.query(Vendor).join(System).distinct().count(),
        'top_vendor': None,
        'avg_systems_per_vendor': 0
    }
    
    # Get top vendor by system count
    top_vendor_query = db.session.query(
        Vendor.name,
        func.count(System.id).label('system_count')
    ).join(System).group_by(Vendor.id, Vendor.name)\
     .order_by(func.count(System.id).desc()).first()
    
    if top_vendor_query:
        stats['top_vendor'] = {
            'name': top_vendor_query.name,
            'system_count': top_vendor_query.system_count
        }
    
    # Calculate average systems per vendor
    if stats['active_vendors'] > 0:
        total_systems = System.query.filter(System.vendor_id.isnot(None)).count()
        stats['avg_systems_per_vendor'] = round(total_systems / stats['active_vendors'], 1)
    
    return jsonify(stats)

@main.route("/api/integration/standards")
def integration_standards():
    """Get most common integration standards"""
    standards = db.session.query(
        IntegrationPoint.standard,
        func.count(IntegrationPoint.id).label('usage_count')
    ).filter(IntegrationPoint.standard.isnot(None))\
     .group_by(IntegrationPoint.standard)\
     .order_by(func.count(IntegrationPoint.id).desc())\
     .limit(5).all()
    
    html = ""
    for standard, count in standards:
        html += f'''
        <div class="flex items-center justify-between p-2 bg-cyan-600/10 border border-cyan-600/20 rounded">
            <span class="text-sm text-cyan-300">{standard}</span>
            <span class="text-xs text-cyan-400">{count} uses</span>
        </div>
        '''
    
    if not html:
        html = '<div class="text-center text-slate-500 text-sm py-4">No integration standards found</div>'
    
    return html

@main.route("/api/vendors/performance")
def vendor_performance():
    """Get vendor performance insights"""
    # Most reliable vendor (fewest issues)
    reliable_vendor = db.session.query(
        Vendor.name,
        func.count(System.id).label('total_systems'),
        func.sum(case((System.known_issues.isnot(None), 1), else_=0)).label('issues_count')
    ).join(System).group_by(Vendor.id, Vendor.name)\
     .having(func.count(System.id) > 0)\
     .order_by((func.sum(case((System.known_issues.isnot(None), 1), else_=0)) / func.count(System.id)).asc())\
     .first()
    
    # Newest vendor (most recent first deployment)
    newest_vendor = db.session.query(
        Vendor.name,
        func.min(System.deployment_date).label('first_deployment')
    ).join(System).group_by(Vendor.id, Vendor.name)\
     .order_by(func.min(System.deployment_date).desc())\
     .first()
    
    # Largest vendor (most systems)
    largest_vendor = db.session.query(
        Vendor.name,
        func.count(System.id).label('system_count')
    ).join(System).group_by(Vendor.id, Vendor.name)\
     .order_by(func.count(System.id).desc())\
     .first()
    
    return jsonify({
        'most_reliable': reliable_vendor.name if reliable_vendor else 'N/A',
        'newest': newest_vendor.name if newest_vendor else 'N/A',
        'largest': largest_vendor.name if largest_vendor else 'N/A'
    })
# End of app/routes/main.py

# Start of app/models/__init__.py
# Example model - create more files in app/models/ as needed
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String
from app import db

class Example(db.Model):
    __tablename__ = "examples"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(64), nullable=False)

    def __repr__(self) -> str:
        return f"<Example id={self.id} name={self.name!r}>"


# End of app/models/__init__.py

# Start of app/models/tran.py
# models/tran.py

from datetime import datetime
from app import db
import enum

# Association Tables
system_integration = db.Table(
    'system_integration',
    db.Column('system_id', db.Integer, db.ForeignKey('systems.id'), primary_key=True),
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True)
)

system_function = db.Table(
    'system_function',
    db.Column('system_id', db.Integer, db.ForeignKey('systems.id'), primary_key=True),
    db.Column('function_id', db.Integer, db.ForeignKey('functions.id'), primary_key=True)
)

system_tag = db.Table(
    'system_tag',
    db.Column('system_id', db.Integer, db.ForeignKey('systems.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_tag = db.Table(
    'integration_tag',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_standard = db.Table(
    'integration_standard',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('standard_id', db.Integer, db.ForeignKey('standards.id'), primary_key=True)
)

# Enums
class Criticality(enum.Enum):
    high = "high"
    medium = "medium"
    low = "low"

# Core Models
class TransitSystem(db.Model):
    __tablename__ = 'transit_systems'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    location = db.Column(db.String(100))
    description = db.Column(db.String(500))

    functional_areas = db.relationship('FunctionalArea', back_populates='transit_system', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TransitSystem(name={self.name}, location={self.location})>"

class FunctionalArea(db.Model):
    __tablename__ = 'functional_areas'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    transit_system_id = db.Column(db.Integer, db.ForeignKey('transit_systems.id'), nullable=False)
    transit_system = db.relationship('TransitSystem', back_populates='functional_areas')

    categories = db.relationship('Category', back_populates='functional_area', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<FunctionalArea(name={self.name})>"

class Category(db.Model):
    __tablename__ = 'categories'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'), nullable=False)
    functional_area = db.relationship('FunctionalArea', back_populates='categories')

    functions = db.relationship('Function', back_populates='category', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Category(name={self.name})>"

class Function(db.Model):
    __tablename__ = 'functions'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    criticality = db.Column(db.Enum(Criticality), default=Criticality.medium, nullable=False)

    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'), nullable=False)
    category = db.relationship('Category', back_populates='functions')

    systems = db.relationship('System', secondary=system_function, back_populates='functions')

    def __repr__(self):
        return f"<Function(name={self.name}, criticality={self.criticality.value})>"

class Vendor(db.Model):
    __tablename__ = 'vendors'
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_vendor_name'),
    )

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    website = db.Column(db.String(255))
    vendor_email = db.Column(db.String(255))
    vendor_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    contact_email = db.Column(db.String(255))
    contact_phone = db.Column(db.String(50))
    description = db.Column(db.String(500))

    systems = db.relationship('System', back_populates='vendor', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Vendor(name={self.name})>"


class System(db.Model):
    __tablename__ = 'systems'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    version = db.Column(db.String(50))
    deployment_date = db.Column(db.Date)
    update_frequency = db.Column(db.String(50))
    known_issues = db.Column(db.String(500))
    additional_metadata = db.Column(db.JSON)

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'))
    functional_area = db.relationship('FunctionalArea')

    vendor_id = db.Column(db.Integer, db.ForeignKey('vendors.id'), nullable=False)
    vendor = db.relationship('Vendor', back_populates='systems')

    functions = db.relationship('Function', secondary=system_function, back_populates='systems')
    integration_points = db.relationship('IntegrationPoint', secondary=system_integration, back_populates='systems')
    tags = db.relationship('Tag', secondary=system_tag, back_populates='systems')

    user_roles = db.relationship('UserRole', back_populates='system', cascade='all, delete-orphan')
    update_logs = db.relationship('UpdateLog', back_populates='system', cascade='all, delete-orphan')

    def add_metadata(self, key: str, value: str):
        if not self.additional_metadata:
            self.additional_metadata = {}
        self.additional_metadata[key] = value

    def __repr__(self):
        return f"<System(name={self.name}, version={self.version})>"

class IntegrationPoint(db.Model):
    __tablename__ = 'integration_points'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    standards = db.relationship('Standard', secondary=integration_standard, back_populates='integration_points')
    systems = db.relationship('System', secondary=system_integration, back_populates='integration_points')
    tags = db.relationship('Tag', secondary=integration_tag, back_populates='integration_points')

    def __repr__(self):
        return f"<IntegrationPoint(name={self.name})>"

class Standard(db.Model):
    __tablename__ = 'standards'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))
    version = db.Column(db.String(50))
    standard_url = db.Column(db.String(255))

    integration_points = db.relationship('IntegrationPoint', secondary=integration_standard, back_populates='standards')

    def __repr__(self):
        return f"<Standard(name={self.name}, version={self.version})>"

class TagGroup(db.Model):
    __tablename__ = 'tag_groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))

    tags = db.relationship('Tag', back_populates='tag_group', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TagGroup(name={self.name})>"

class Tag(db.Model):
    __tablename__ = 'tags'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    color = db.Column(db.String(20))

    tag_group_id = db.Column(db.Integer, db.ForeignKey('tag_groups.id'), nullable=False)
    tag_group = db.relationship('TagGroup', back_populates='tags')

    systems = db.relationship('System', secondary=system_tag, back_populates='tags')
    integration_points = db.relationship('IntegrationPoint', secondary=integration_tag, back_populates='tags')

    def __repr__(self):
        return f"<Tag(name={self.name})>"
    
class UserRole(db.Model):
    __tablename__ = 'user_roles'

    id = db.Column(db.Integer, primary_key=True)
    role_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    system_id = db.Column(db.Integer, db.ForeignKey('systems.id'))
    system = db.relationship('System', back_populates='user_roles')

    def __repr__(self):
        return f"<UserRole(role_name={self.role_name})>"

class UpdateLog(db.Model):
    __tablename__ = 'update_logs'

    id = db.Column(db.Integer, primary_key=True)
    system_id = db.Column(db.Integer, db.ForeignKey('systems.id'), nullable=False)
    updated_by = db.Column(db.String(100), nullable=False)
    update_date = db.Column(db.DateTime, default=datetime.utcnow)
    change_summary = db.Column(db.String(1000))

    system = db.relationship('System', back_populates='update_logs')

    def __repr__(self):
        return f"<UpdateLog(system_id={self.system_id}, updated_by={self.updated_by})>"

# End of app/models/tran.py

# Start of .flaskenv
FLASK_APP=app:create_app

# End of .flaskenv

# Start of config.py
# config.py

import os
from dotenv import load_dotenv
from datetime import timedelta

basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

class Config:
    # Core Flask settings
    SECRET_KEY = os.environ.get('SECRET_KEY')
    DEBUG = os.environ.get('FLASK_ENV') == 'development'
    
    # Database settings - SQLite support
    DB_TYPE = os.environ.get('DB_TYPE', 'sqlite')
    
    if DB_TYPE == 'postgres':
        SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
    else:
        # SQLite database
        SQLALCHEMY_DATABASE_URI = f"sqlite:///{os.path.join(basedir, 'instance', 'app.db')}"
    
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    
    # Security settings
    CSRF_ENABLED = True
    
    # Application paths and cookies
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_REFRESH_EACH_REQUEST = True

    WTF_CSRF_TIME_LIMIT = 24 * 3600  # 24 hours in seconds
    WTF_CSRF_SSL_STRICT = False
    
    # File upload settings
    MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500 MB limit
    
    # Email settings
    POSTMARK_API_KEY = os.getenv('POSTMARK_API_KEY')
    POSTMARK_SENDER_EMAIL = os.getenv('POSTMARK_SENDER_EMAIL')
    POSTMARK_NOTIFY_EMAIL = os.getenv('POSTMARK_NOTIFY_EMAIL')

    CLAUDE_API_KEY = os.environ.get('CLAUDE_API_KEY')
    CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages'
    CLAUDE_MODEL = os.environ.get('CLAUDE_MODEL', 'claude-3-5-haiku-20241022')
    
    # AWS settings
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = os.environ.get('AWS_REGION', 'us-west-2')
    S3_BUCKET = os.environ.get('S3_BUCKET', 'well-app')
    
    # Application URLs
    SMS_BASE_URL = os.environ.get('SMS_BASE_URL', 'https://well.voice4equity.com/app')
    
    @staticmethod
    def get_s3_prefix(tenant_id):
        """Generate S3 key prefix for tenant isolation"""
        return f'tenant_{tenant_id}'
    
    # SMS settings
    TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
    TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
    TWILIO_FROM_NUMBER = os.getenv('TWILIO_FROM_NUMBER')

    SMS_TEST_PHONE_NUMBER = os.environ.get('SMS_TEST_PHONE_NUMBER', '+18084649192')

class DevelopmentConfig(Config):
    """Development configuration."""
    FLASK_ENV = 'development'
    DEBUG = True
    DEVELOPMENT = True
    
    # More permissive session cookie settings for development
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_DOMAIN = None  # Allow all domains in development

class ProductionConfig(Config):
    """Production configuration."""
    DEBUG = False
    DEVELOPMENT = False
    SESSION_COOKIE_SECURE = True
    PREFERRED_URL_SCHEME = 'https'
    
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_FILE_DIR = '/home/ubuntu/see-tran/flask_session'

class TestConfig(Config):
    """Test configuration."""
    TESTING = True
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False
# End of config.py

# Start of tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/templates/**/*.html",
    "./app/static/js/**/*.js",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
# End of tailwind.config.js

# Start of app/templates/base.html
<!doctype html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title|default("SeeTran - Transit System Intelligence") }}</title>
  <link rel="stylesheet" href="{{ url_for("static", filename="css/tailwind.css") }}">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .glass-effect { 
      backdrop-filter: blur(10px); 
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.1);
    }
    .glow-effect {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }
    .nav-link::after {
      content: '';
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #3b82f6, #06b6d4);
      transition: width 0.3s ease;
    }
    .nav-link:hover::after {
      width: 100%;
    }
    .metric-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
      transition: all 0.3s ease;
    }
    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
  
  <!-- Navigation -->
  <nav class="glass-effect border-b border-slate-700/50 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
              SeeTran
            </h1>
            <p class="text-xs text-slate-400">Transit System Intelligence</p>
          </div>
        </div>

        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Dashboard</a>
          <a href="/systems" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Systems</a>
          <a href="/vendors" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Vendors</a>
          <a href="/integration" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Integration</a>
          <a href="/reports" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Reports</a>
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4">
          <button class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors">
            <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </button>
          <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="min-h-screen">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="glass-effect border-t border-slate-700/50 mt-auto">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-slate-400 text-sm">
          SeeTran Platform. Transit system visibility and intelligence.
        </div>
        <div class="flex space-x-6 mt-4 md:mt-0">
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Documentation</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">API</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Support</a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="{{ url_for("static", filename="js/htmx.min.js") }}"></script>
  <script>
    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Add loading states for HTMX requests
    document.body.addEventListener('htmx:beforeRequest', function(e) {
      const target = e.target;
      if (target.classList.contains('btn-loading')) {
        target.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      }
    });
  </script>
  {% block scripts %}{% endblock %}
</body>
</html>
# End of app/templates/base.html

# Start of app/templates/index.html
{% extends "base.html" %}
{% block content %}

<!-- Hero Section -->
<div class="relative overflow-hidden">
  <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-6">
        <span class="bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 bg-clip-text text-transparent">
          Transit System
        </span>
        <br>
        <span class="text-white">Intelligence Platform</span>
      </h1>
      <p class="text-xl text-slate-300 mb-8 max-w-3xl mx-auto">
        Comprehensive visibility into your transit infrastructure, vendor relationships, 
        and system integrations in real-time.
      </p>
      <div class="flex flex-col sm:flex-row justify-center gap-4">
        <button hx-get="/api/health" hx-swap="innerHTML" hx-target="#health-demo" 
                class="px-8 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-semibold 
                       hover:from-blue-700 hover:to-cyan-700 transition-all glow-effect">
          Test System Health
        </button>
        <button class="px-8 py-3 border border-slate-600 rounded-lg font-semibold hover:bg-slate-800 transition-all">
          View Documentation
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Dashboard Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  
  <!-- Metrics Overview -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
    
    <!-- Transit Systems Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/transit-systems" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Transit Systems</h3>
      <p class="text-xs text-slate-500">Active transportation networks</p>
    </div>

    <!-- Functional Areas Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/functional-areas" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Functional Areas</h3>
      <p class="text-xs text-slate-500">Operational domains</p>
    </div>

    <!-- Active Systems Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/systems" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Active Systems</h3>
      <p class="text-xs text-slate-500">Deployed technology systems</p>
    </div>

    <!-- Integration Points Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/integration-points" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Integration Points</h3>
      <p class="text-xs text-slate-500">System interconnections</p>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- System Status Panel -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">System Status</h2>
          <div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-sm text-slate-300">All Systems Operational</span>
          </div>
        </div>
        
        <!-- Demo System Status -->
        <div class="space-y-4">
          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Database Connection</h4>
                <p class="text-sm text-slate-400">SQLite ‚Ä¢ Local Development</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Response: 2ms</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Web Server</h4>
                <p class="text-sm text-slate-400">Flask Development Server</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Port: 5000</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">HTMX Integration</h4>
                <p class="text-sm text-slate-400">Dynamic UI Updates</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Active</p>
              <p class="text-xs text-slate-500">v2.0.4</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      
      <!-- System Health Demo -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">System Health</h3>
        <div id="health-demo" class="text-center">
          <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold text-white mb-2">Excellent</h4>
          <p class="text-sm text-slate-400">All systems functioning normally</p>
        </div>
      </div>

      <!-- Getting Started -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Getting Started</h3>
        <div class="space-y-3">
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">1</span>
            </div>
            <p class="text-sm text-slate-300">Add your first transit system</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">2</span>
            </div>
            <p class="text-sm text-slate-300">Define functional areas</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">3</span>
            </div>
            <p class="text-sm text-slate-300">Configure system integration</p>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Transit System
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Generate Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Information Cards -->
  <div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">System Tracking</h3>
      <p class="text-slate-400 text-sm">Monitor all your transit technology systems, versions, and deployment status in one centralized dashboard.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Vendor Management</h3>
      <p class="text-slate-400 text-sm">Track vendor relationships, contact information, and system dependencies across your entire transit network.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Integration Mapping</h3>
      <p class="text-slate-400 text-sm">Visualize system integrations, data flows, and interconnections to understand your technology ecosystem.</p>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Auto-refresh metrics every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Add smooth animations for loaded content
document.body.addEventListener('htmx:afterSwap', function(e) {
  const newContent = e.detail.target;
  newContent.style.opacity = '0';
  newContent.style.transform = 'translateY(10px)';
  
  setTimeout(() => {
    newContent.style.transition = 'all 0.3s ease';
    newContent.style.opacity = '1';
    newContent.style.transform = 'translateY(0)';
  }, 50);
});
</script>
{% endblock %}
# End of app/templates/index.html

# Start of app/templates/systems.html
{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Systems Management</h1>
    <p class="text-slate-400">Monitor and manage all transit technology systems across your network.</p>
  </div>

  <!-- Filters and Search -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search and Filters -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" placeholder="Search systems..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none">
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Functional Area Filter -->
        <select id="functional-area-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/systems/list" hx-target="#systems-list" hx-include="[id='vendor-filter'],[id='status-filter']" hx-vals='js:{"functional_area": event.target.value}'>
          <option value="">All Functional Areas</option>
          <option value="Operations Management">Operations Management</option>
          <option value="Customer Experience & Information">Customer Experience</option>
          <option value="Fare Collection & Revenue Management">Fare Collection</option>
          <option value="Fleet Management & Vehicle Maintenance">Fleet Management</option>
          <option value="Paratransit & On-Demand Services">Paratransit</option>
          <option value="Safety & Security Systems">Safety & Security</option>
        </select>

        <!-- Vendor Filter -->
        <select id="vendor-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/systems/list" hx-target="#systems-list" hx-include="[id='functional-area-filter'],[id='status-filter']" hx-vals='js:{"vendor": event.target.value}'>
          <option value="">All Vendors</option>
          <option value="Clever Devices">Clever Devices</option>
          <option value="INIT">INIT</option>
          <option value="Transit App">Transit App</option>
          <option value="LYT.cloud">LYT.cloud</option>
          <option value="Spare Labs">Spare Labs</option>
          <option value="Aira">Aira</option>
        </select>

        <!-- Status Filter -->
        <select id="status-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/systems/list" hx-target="#systems-list" hx-include="[id='functional-area-filter'],[id='vendor-filter']" hx-vals='js:{"status": event.target.value}'>
          <option value="">All Systems</option>
          <option value="no_issues">No Issues</option>
          <option value="issues">Has Issues</option>
        </select>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button class="px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add System
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Systems List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Systems Overview</h2>
          <button hx-get="/api/systems/list" hx-target="#systems-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="systems-list" class="space-y-4" hx-get="/api/systems/list" hx-trigger="load">
          <!-- Systems will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- System Details Sidebar -->
    <div class="space-y-6">
      
      <!-- System Details Panel -->
      <div id="system-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">System Details</h3>
          <p class="text-slate-500 text-sm">Click on a system to view detailed information, vendor details, and integration points.</p>
        </div>
      </div>

      <!-- Quick Stats -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Stats</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Total Systems</span>
            <span class="text-white font-medium" hx-get="/api/count/systems" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Active Vendors</span>
            <span class="text-white font-medium" hx-get="/api/count/vendors" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Integration Points</span>
            <span class="text-white font-medium" hx-get="/api/count/integration-points" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Functional Areas</span>
            <span class="text-white font-medium" hx-get="/api/count/functional-areas" hx-trigger="load">--</span>
          </div>
        </div>
      </div>

      <!-- Legend -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Status Legend</h3>
        <div class="space-y-2">
          <div class="flex items-center space-x-3">
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
            <span class="text-slate-300 text-sm">No Known Issues</span>
          </div>
          <div class="flex items-center space-x-3">
            <div class="w-3 h-3 bg-red-500 rounded-full"></div>
            <span class="text-slate-300 text-sm">Has Known Issues</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Add system card hover effects
document.body.addEventListener('htmx:afterSwap', function(e) {
  // Add click handlers for system cards
  const systemCards = document.querySelectorAll('.system-card');
  systemCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-2px)';
    });
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
    });
  });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);
</script>
{% endblock %}
# End of app/templates/systems.html

# Start of app/templates/vendors.html
{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Vendor Management</h1>
    <p class="text-slate-400">Manage vendor relationships and track system portfolios across your transit network.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/vendors" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-systems-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Systems/Vendor</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="top-vendor-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Top Vendor Systems</h3>
    </div>
  </div>

  <!-- Search and Filters -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search and Sort -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" id="vendor-search" placeholder="Search vendors..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                 hx-get="/api/vendors/list" hx-target="#vendors-list" hx-trigger="keyup changed delay:300ms" 
                 hx-include="[id='sort-select']" hx-vals='js:{"search": event.target.value}'>
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Sort Options -->
        <select id="sort-select" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/vendors/list" hx-target="#vendors-list" hx-include="[id='vendor-search']" hx-vals='js:{"sort": event.target.value}'>
          <option value="name">Sort by Name</option>
          <option value="systems">Sort by System Count</option>
          <option value="recent">Sort by Recent Activity</option>
        </select>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button class="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Vendor
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export List
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Vendors List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Vendor Portfolio</h2>
          <button hx-get="/api/vendors/list" hx-target="#vendors-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="vendors-list" class="space-y-6" hx-get="/api/vendors/list" hx-trigger="load">
          <!-- Vendors will be loaded here -->
          <div class="animate-pulse space-y-6">
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Vendor Details Sidebar -->
    <div class="space-y-6">
      
      <!-- Vendor Details Panel -->
      <div id="vendor-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
          <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
        </div>
      </div>

      <!-- Top Integration Standards -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Integration Standards</h3>
        <div id="integration-standards" hx-get="/api/integration/standards" hx-trigger="load" class="space-y-2">
          <!-- Integration standards will be loaded here -->
          <div class="animate-pulse space-y-2">
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
          </div>
        </div>
      </div>

      <!-- Vendor Performance Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Performance Insights</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Reliable</span>
            <span class="text-green-400 font-medium text-sm" id="most-reliable-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Newest Partnership</span>
            <span class="text-blue-400 font-medium text-sm" id="newest-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Systems</span>
            <span class="text-purple-400 font-medium text-sm" id="largest-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg text-sm font-medium hover:from-purple-700 hover:to-pink-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Vendor
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Vendor Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Contacts
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Load vendor stats
document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/vendors/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('active-vendors-count').textContent = data.active_vendors;
      document.getElementById('avg-systems-count').textContent = data.avg_systems_per_vendor;
      
      if (data.top_vendor) {
        document.getElementById('top-vendor-count').textContent = data.top_vendor.system_count;
        document.getElementById('largest-vendor').textContent = data.top_vendor.name;
      }
    });
});

// Add vendor card hover effects
document.body.addEventListener('htmx:afterSwap', function(e) {
  const vendorCards = document.querySelectorAll('.vendor-card');
  vendorCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-4px)';
      this.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.3)';
    });
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
      this.style.boxShadow = 'none';
    });
  });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);
</script>
{% endblock %}
# End of app/templates/vendors.html

