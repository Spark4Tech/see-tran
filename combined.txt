# Project Directory Structure
./
    .flaskenv
    run.py
    tailwind.config.js
    config.py
    requirements.txt
    cat.py
    README.md
    .gitignore
    package-lock.json
    package.json
    .nvmrc
    postcss.config.js
    app/
        auth.py
        __init__.py
        forms/
            __init__.py
            forms.py
        agents/
            agency_agent.py
            __init__.py
            component_agent.py
        utils/
            __init__.py
            errors.py
        models/
            tran.py
            __init__.py
        static/
            css/
                .keep
            images/
                favicon.ico
                ST.png
                logo.png
                transit_logos/
                    spokane_logo.png
                    kingco_logo.png
                    island_logo.png
                    godurham_logo.png
                    chapelhill_logo.png
                    cota_logo.png
                    c-tran_logo.png
                    trimet_logo.png
                transit_headers/
                    c-tran_header.png
            js/
                .keep
        templates/
            index.html
            base.html
            components.html
            standards.html
            integrations.html
            functional_areas.html
            agencies.html
            contribute.html
            vendors.html
            fragments/
                agency_details.html
                functional_area_details.html
                agency_list.html
                functional_area_form.html
                functional_area_list.html
                agency_form.html
        routes/
            vendor.py
            agency.py
            standard.py
            __init__.py
            integration.py
            main.py
            component.py
            function.py
    tests/
        test_phase2_functional_areas.py
        test_phase2.py
        __init__.py
        test_phase1.py
        test_app.py
    tailwind/
        config.js
        input.css

# End of Directory Structure

# Start of app/routes/main.py
# app/routes/main.py - Enhanced version
from flask import Blueprint, render_template, jsonify, request, url_for
from app import db
from app.models.tran import (
    Agency, FunctionalArea, Component, Vendor, IntegrationPoint, 
    UpdateLog, Function, Standard, Tag, TagGroup, UserRole, AgencyFunctionImplementation
)
from app.forms.forms import AgencyForm
from app.auth import login_required, get_updated_by
from app.utils.errors import (
    json_error_response, json_success_response, 
    html_error_fragment, html_success_fragment
)
from sqlalchemy import func, case
from datetime import datetime, timedelta

main = Blueprint("main", __name__)

@main.route("/")
def index():
    return render_template("index.html")

@main.route("/components")
def components_page():
    """Components management page"""
    return render_template("components.html")

@main.route("/vendors")
def vendors_page():
    """Vendors management page"""
    return render_template("vendors.html")

# Health and utility endpoints
@main.route("/api/health")
def health_check():
    try:
        # Test database connection
        db.session.execute(db.text('SELECT 1'))
        return jsonify({
            "status": "ok", 
            "timestamp": datetime.utcnow().isoformat(),
            "database": "connected"
        })
    except Exception as e:
        return json_error_response(f"Health check failed: {str(e)}", 500)

# Count endpoints for dashboard metrics
@main.route("/api/count/agencies")
def count_agencies():
    try:
        count = Agency.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/functional-areas")
def count_functional_areas():
    try:
        count = FunctionalArea.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/components")
def count_components():
    try:
        count = Component.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/integration-points")
def count_integration_points():
    try:
        count = IntegrationPoint.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/vendors")
def count_vendors():
    try:
        count = Vendor.query.count()
        return str(count)
    except Exception as e:
        return "0"

# Components endpoints (keeping existing functionality)
@main.route("/api/components/list")
def components_list():
    """Get all components with filtering"""
    try:
        functional_area = request.args.get('functional_area')
        vendor = request.args.get('vendor')
        agency = request.args.get('agency')
        status = request.args.get('status')
        
        # Start with components and their implementations
        query = db.session.query(Component).distinct()
        
        # Apply filters
        if functional_area:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.function)\
                         .join(Function.functional_area)\
                         .filter(FunctionalArea.name == functional_area)
        
        if vendor:
            query = query.join(Vendor).filter(Vendor.name == vendor)
            
        if agency:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.agency)\
                         .filter(Agency.name == agency)
        
        if status:
            if status == 'issues':
                query = query.filter(Component.known_issues.isnot(None))
            elif status == 'no_issues':
                query = query.filter(Component.known_issues.is_(None))
        
        components = query.all()
        
        html = ""
        for component in components:
            status_indicator = "red" if component.known_issues else "green"
            vendor_name = component.vendor.name if component.vendor else "No Vendor"
            
            # Get agencies that use this component
            agencies_using = db.session.query(Agency.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            agencies_display = ", ".join([a.name for a in agencies_using])
            if len(agencies_using) == 3:
                agencies_display += " +more"
            
            # Get functions this component implements
            functions_implemented = db.session.query(Function.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            functions_display = ", ".join([f.name for f in functions_implemented])
            if len(functions_implemented) == 3:
                functions_display += " +more"

            html += f'''
            <div class="component-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-4 hover:bg-slate-800/70 transition-all cursor-pointer"
                 data-component-id="{component.id}"
                 hx-get="/api/components/{component.id}/details" hx-target="#component-details" hx-swap="innerHTML">
                <div class="flex items-start justify-between">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                            <div class="w-3 h-3 bg-{status_indicator}-500 rounded-full"></div>
                            <h3 class="font-semibold text-white text-lg">{component.name}</h3>
                        </div>
                        <p class="text-slate-300 text-sm mb-2">{functions_display or 'No functions assigned'}</p>
                        <div class="flex items-center space-x-4 text-xs text-slate-400">
                            <span>üè¢ {vendor_name}</span>
                            <span>üèõÔ∏è {agencies_display or 'No agencies'}</span>
                            <span>üìÖ {component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="bg-slate-700 px-2 py-1 rounded text-xs text-slate-300 mb-2">
                            v{component.version or 'Unknown'}
                        </div>
                        <div class="text-xs text-slate-500">
                            {component.update_frequency or 'Unknown'}
                        </div>
                    </div>
                </div>
                {f'<div class="mt-3 p-2 bg-red-900/20 border border-red-700/30 rounded text-xs text-red-300"><strong>Issues:</strong> {component.known_issues}</div>' if component.known_issues else ''}
            </div>
            '''
        
        if not html:
            html = '''
            <div class="text-center py-12">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500">Try adjusting your filters or add new components.</p>
            </div>
            '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components: {str(e)}")

@main.route("/api/components/<int:component_id>/details")
def component_details(component_id):
    """Get detailed information about a specific component"""
    try:
        component = Component.query.get_or_404(component_id)
        
        # Get agency implementations for this component
        implementations = AgencyFunctionImplementation.query\
            .filter_by(component_id=component_id)\
            .join(Agency).join(Function).join(FunctionalArea)\
            .order_by(Agency.name, FunctionalArea.name, Function.name)\
            .all()
        
        # Build agency usage section
        agency_usage_html = ""
        if implementations:
            agency_usage_html = "<h4 class='font-medium text-white mb-3'>Agency Usage:</h4>"
            
            # Group by agency
            agencies = {}
            for impl in implementations:
                agency_name = impl.agency.name
                if agency_name not in agencies:
                    agencies[agency_name] = []
                agencies[agency_name].append(impl)
            
            for agency_name, agency_impls in agencies.items():
                agency_usage_html += f'''
                <div class="mb-4">
                    <h5 class="text-sm font-medium text-blue-400 mb-2">{agency_name}</h5>
                    <div class="space-y-2 ml-3">
                '''
                for impl in agency_impls:
                    status_color = "green" if impl.status == "Active" else "yellow"
                    agency_usage_html += f'''
                    <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                            <span class="text-sm text-slate-300">{impl.function.name}</span>
                        </div>
                        <div class="text-right">
                            <span class="text-xs text-slate-500">
                                {impl.deployment_date.strftime('%Y-%m-%d') if impl.deployment_date else 'No date'}
                            </span>
                            {f'<br><span class="text-xs text-slate-400">v{impl.version}</span>' if impl.version else ''}
                        </div>
                    </div>
                    '''
                agency_usage_html += "</div></div>"
        else:
            agency_usage_html = "<p class='text-slate-400 text-sm'>No agency usage tracked for this component.</p>"
        
        # User roles (keep this here as it's component-specific info)
        roles = ""
        if component.user_roles:
            roles = "<h4 class='font-medium text-white mb-2 mt-4'>User Roles:</h4><ul class='space-y-1'>"
            for role in component.user_roles:
                roles += f'<li class="text-sm text-slate-300">‚Ä¢ {role.role_name}: {role.description or "No description"}</li>'
            roles += "</ul>"
        
        # Additional metadata
        metadata = ""
        if component.additional_metadata:
            metadata = "<h4 class='font-medium text-white mb-2 mt-4'>Additional Information:</h4><ul class='space-y-1'>"
            for key, value in component.additional_metadata.items():
                metadata += f'<li class="text-sm text-slate-300">‚Ä¢ {key.replace("_", " ").title()}: {value}</li>'
            metadata += "</ul>"
        
        html = f'''
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-3">
                    <h2 class="text-2xl font-bold text-white">{component.name}</h2>
                    {f'<span class="px-2 py-1 bg-blue-600/20 border border-blue-600/30 rounded text-xs text-blue-300">Composite</span>' if component.is_composite else ''}
                </div>
                <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                        onclick="clearComponentDetails()">
                    ‚úï Close
                </button>
            </div>
            
            <div class="grid grid-cols-1 gap-6">
                <div>
                    <h3 class="font-medium text-white mb-3">Component Information</h3>
                    <div class="space-y-2 text-sm">
                        <p class="text-slate-300"><strong>Version:</strong> {component.version or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Deployment Date:</strong> {component.deployment_date.strftime('%B %d, %Y') if component.deployment_date else "Unknown"}</p>
                        <p class="text-slate-300"><strong>Update Frequency:</strong> {component.update_frequency or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Vendor:</strong> {component.vendor.name if component.vendor else "No Vendor"}</p>
                    </div>
                    
                    {f'<div class="bg-red-900/20 border border-red-700/30 rounded p-3 mt-4"><h4 class="font-medium text-red-300 mb-2">Known Issues:</h4><p class="text-sm text-red-200">{component.known_issues}</p></div>' if component.known_issues else '<div class="bg-green-900/20 border border-green-700/30 rounded p-3 mt-4"><h4 class="font-medium text-green-300 mb-2">Status:</h4><p class="text-sm text-green-200">No known issues</p></div>'}
                    
                    <div class="mt-6">
                        {agency_usage_html}
                    </div>
                    
                    {roles}
                    {metadata}
                </div>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading component details: {str(e)}")
    
@main.route("/api/agencies/options")
def agencies_filter_options():
    """Get agency options for filter dropdowns"""
    try:
        # Get agencies that have component implementations
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

def clear_component_details_js():
    return '''
    <script>
    function clearComponentDetails() {
        // Reset component details panel
        document.getElementById('component-details').innerHTML = `
            <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
                <p class="text-slate-500 text-sm">Select a component to view details</p>
            </div>`;
        
        // Reset vendor details panel
        document.getElementById('vendor-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
        
        // Reset integration details panel
        document.getElementById('integration-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
    }
    </script>
    '''

# Vendors endpoints (keeping existing functionality)
@main.route("/api/vendors/list")
def vendors_list():
    """Get all vendors with filtering and component counts"""
    try:
        search = request.args.get('search', '').lower()
        sort_by = request.args.get('sort', 'name')
        
        query = db.session.query(
            Vendor,
            func.count(Component.id).label('component_count')
        ).outerjoin(Component).group_by(Vendor.id)
        
        if search:
            query = query.filter(Vendor.name.ilike(f'%{search}%'))
        
        if sort_by == 'components':
            query = query.order_by(func.count(Component.id).desc())
        elif sort_by == 'recent':
            subquery = db.session.query(
                Component.vendor_id,
                func.max(Component.deployment_date).label('latest_deployment')
            ).group_by(Component.vendor_id).subquery()
            
            query = query.outerjoin(subquery, Vendor.id == subquery.c.vendor_id)\
                         .order_by(subquery.c.latest_deployment.desc().nullslast())
        else:
            query = query.order_by(Vendor.name)
        
        vendors_with_counts = query.all()
        
        html = ""
        for vendor, component_count in vendors_with_counts:
            functional_areas = db.session.query(FunctionalArea.name)\
                .join(Component).filter(Component.vendor_id == vendor.id)\
                .distinct().all()
            
            fa_names = [fa.name for fa in functional_areas]
            fa_display = ", ".join(fa_names[:2])
            if len(fa_names) > 2:
                fa_display += f" +{len(fa_names) - 2} more"
            
            latest_component = Component.query.filter_by(vendor_id=vendor.id)\
                .order_by(Component.deployment_date.desc().nullslast()).first()
            
            latest_deployment = "No deployments"
            if latest_component and latest_component.deployment_date:
                latest_deployment = latest_component.deployment_date.strftime('%Y-%m-%d')
            
            website_display = ""
            if vendor.website:
                domain = vendor.website.replace('https://', '').replace('http://', '').split('/')[0]
                website_display = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300 text-xs">{domain}</a>'
            
            html += f'''
            <div class="vendor-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
                 hx-get="/api/vendors/{vendor.id}/details" hx-target="#vendor-details" hx-swap="innerHTML">
                <div class="flex items-start justify-between mb-4">
                    <div class="flex-1">
                        <h3 class="font-semibold text-white text-xl mb-2">{vendor.name}</h3>
                        <p class="text-slate-300 text-sm mb-3">{vendor.description or 'No description available'}</p>
                        <div class="flex items-center space-x-4 text-xs text-slate-400">
                            <span>üè¢ {component_count} components</span>
                            <span>üìç {fa_display if fa_names else 'No components'}</span>
                            <span>üìÖ Latest: {latest_deployment}</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-2">
                            <span class="text-lg font-bold text-white">{component_count}</span>
                        </div>
                        <div class="text-xs text-slate-500 text-center">Components</div>
                    </div>
                </div>
                
                <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
                    <div class="flex items-center space-x-3">
                        {website_display}
                        {f'<span class="text-xs text-slate-500">‚Ä¢ {vendor.contact_email or vendor.contact_name}</span>' if vendor.contact_email or vendor.contact_name else ''}
                    </div>
                    <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="text-xs text-slate-400">Active</span>
                    </div>
                </div>
            </div>
            '''
        
        if not html:
            html = '''
            <div class="text-center py-12">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Vendors Found</h3>
                <p class="text-slate-500">Try adjusting your search or add new vendors.</p>
            </div>
            '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading vendors: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/details")
def vendor_details(vendor_id):
    """Get detailed information about a specific vendor"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        
        components_by_area = {}
        components = Component.query.filter_by(vendor_id=vendor.id).join(FunctionalArea).all()
        
        for component in components:
            area_name = component.functional_area.name
            if area_name not in components_by_area:
                components_by_area[area_name] = []
            components_by_area[area_name].append(component)
        
        components_html = ""
        if components_by_area:
            components_html = "<h4 class='font-medium text-white mb-3'>Components Portfolio:</h4>"
            for area_name, area_components in components_by_area.items():
                components_html += f'''
                <div class="mb-4">
                    <h5 class="text-sm font-medium text-blue-400 mb-2">{area_name}</h5>
                    <div class="space-y-2 ml-3">
                '''
                for component in area_components:
                    status_color = "red" if component.known_issues else "green"
                    components_html += f'''
                    <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                            <span class="text-sm text-slate-300">{component.name}</span>
                        </div>
                        <span class="text-xs text-slate-500">v{component.version or 'Unknown'}</span>
                    </div>
                    '''
                components_html += "</div></div>"
        else:
            components_html = "<p class='text-slate-400 text-sm'>No components found for this vendor.</p>"
        
        total_components = len(components)
        components_with_issues = len([s for s in components if s.known_issues])
        recent_deployments = len([s for s in components if s.deployment_date and 
                                 (datetime.now().date() - s.deployment_date).days <= 365])
        
        integration_points = set()
        for component in components:
            for ip in component.integration_points:
                integration_points.add(ip.name)
        
        integrations_html = ""
        if integration_points:
            integrations_html = f'''
            <h4 class='font-medium text-white mb-2 mt-4'>Integration Standards:</h4>
            <div class="flex flex-wrap gap-2">
                {' '.join([f'<span class="px-2 py-1 bg-cyan-600/20 border border-cyan-600/30 rounded text-xs text-cyan-300">{ip}</span>' for ip in integration_points])}
            </div>
            '''
        
        html = f'''
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-4">
                    <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                        <span class="text-2xl font-bold text-white">{vendor.name[0].upper()}</span>
                    </div>
                    <div>
                        <h2 class="text-2xl font-bold text-white">{vendor.name}</h2>
                        <p class="text-slate-400">{vendor.description or 'No description available'}</p>
                    </div>
                </div>
                <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                        onclick="document.getElementById('vendor-details').innerHTML = `
                        <div class='glass-effect rounded-xl p-6 border border-slate-700/50 text-center'>
                            <div class='w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4'>
                                <svg class='w-8 h-8 text-slate-500' fill='currentColor' viewBox='0 0 20 20'>
                                    <path d='M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z'/>
                                </svg>
                            </div>
                            <h3 class='text-lg font-medium text-slate-400 mb-2'>Vendor Details</h3>
                            <p class='text-slate-500 text-sm'>Click on a vendor to view detailed information, component portfolio, and contact details.</p>
                        </div>`">
                    ‚úï Close
                </button>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div class="bg-blue-600/20 border border-blue-600/30 rounded-lg p-4 text-center">
                    <div class="text-2xl font-bold text-blue-300">{total_components}</div>
                    <div class="text-sm text-blue-200">Total Components</div>
                </div>
                <div class="bg-green-600/20 border border-green-600/30 rounded-lg p-4 text-center">
                    <div class="text-2xl font-bold text-green-300">{total_components - components_with_issues}</div>
                    <div class="text-sm text-green-200">Healthy Components</div>
                </div>
                <div class="bg-purple-600/20 border border-purple-600/30 rounded-lg p-4 text-center">
                    <div class="text-2xl font-bold text-purple-300">{recent_deployments}</div>
                    <div class="text-sm text-purple-200">Recent Deployments</div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                    <h3 class="font-medium text-white mb-3">Contact Information</h3>
                    <div class="space-y-2 text-sm">
                        <p class="text-slate-300">
                            <strong>Website:</strong> 
                            {f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300 ml-2">{vendor.website}</a>' if vendor.website else '<span class="text-slate-500 ml-2">Not provided</span>'}
                        </p>
                        <p class="text-slate-300">
                            <strong>Contact:</strong> 
                            <span class="ml-2">{vendor.contact_email or vendor.contact_name or 'Not provided'}</span>
                        </p>
                        <p class="text-slate-300">
                            <strong>Phone:</strong> 
                            <span class="ml-2">{vendor.contact_phone or vendor.vendor_phone or 'Not provided'}</span>
                        </p>
                    </div>
                    
                    {integrations_html}
                </div>
                
                <div>
                    {components_html}
                </div>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading vendor details: {str(e)}")

# Additional existing endpoints with error handling
@main.route("/api/vendors/stats")
def vendors_stats():
    """Get vendor statistics for dashboard"""
    try:
        stats = {
            'total_vendors': Vendor.query.count(),
            'active_vendors': db.session.query(Vendor).join(Component).distinct().count(),
            'top_vendor': None,
            'avg_components_per_vendor': 0
        }
        
        top_vendor_query = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component).group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(Component.id).desc()).first()
        
        if top_vendor_query:
            stats['top_vendor'] = {
                'name': top_vendor_query.name,
                'component_count': top_vendor_query.component_count
            }
        
        if stats['active_vendors'] > 0:
            total_components = Component.query.filter(Component.vendor_id.isnot(None)).count()
            stats['avg_components_per_vendor'] = round(total_components / stats['active_vendors'], 1)
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting vendor stats: {str(e)}")

@main.route("/api/integration/standards")
def integration_standards():
    """Get most common integration standards"""
    try:
        # Get standards from the Standards table
        standards = db.session.query(
            Standard.name,
            func.count(IntegrationPoint.id).label('usage_count')
        ).join(Standard.integration_points)\
         .group_by(Standard.name)\
         .order_by(func.count(IntegrationPoint.id).desc())\
         .limit(5).all()
        
        html = ""
        for standard, count in standards:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-cyan-600/10 border border-cyan-600/20 rounded">
                <span class="text-sm text-cyan-300">{standard}</span>
                <span class="text-xs text-cyan-400">{count} uses</span>
            </div>
            '''
        
        if not html:
            html = '<div class="text-center text-slate-500 text-sm py-4">No integration standards found</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center text-slate-500 text-sm py-4">Error loading standards</div>'

@main.route("/api/vendors/performance")
def vendor_performance():
    """Get vendor performance insights"""
    try:
        reliable_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('total_components'),
            func.sum(case((Component.known_issues.isnot(None), 1), else_=0)).label('issues_count')
        ).join(Component).group_by(Vendor.id, Vendor.name)\
         .having(func.count(Component.id) > 0)\
         .order_by((func.sum(case((Component.known_issues.isnot(None), 1), else_=0)) / func.count(Component.id)).asc())\
         .first()
        
        newest_vendor = db.session.query(
            Vendor.name,
            func.min(Component.deployment_date).label('first_deployment')
        ).join(Component).group_by(Vendor.id, Vendor.name)\
         .order_by(func.min(Component.deployment_date).desc())\
         .first()
        
        largest_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component).group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(Component.id).desc())\
         .first()
        
        return jsonify({
            'most_reliable': reliable_vendor.name if reliable_vendor else 'N/A',
            'newest': newest_vendor.name if newest_vendor else 'N/A',
            'largest': largest_vendor.name if largest_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting vendor performance: {str(e)}")

# Keep remaining existing endpoints
@main.route("/api/components/overview")
def components_overview():
    try:
        components = Component.query.join(FunctionalArea).join(Vendor).limit(10).all()
        
        html = ""
        for component in components:
            status_color = "green" if component.known_issues is None else "yellow"
            html += f"""
            <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:bg-slate-800/70 transition-colors">
                <div class="flex items-center space-x-4">
                    <div class="w-3 h-3 bg-{status_color}-500 rounded-full"></div>
                    <div>
                        <h4 class="font-medium text-white">{component.name}</h4>
                        <p class="text-sm text-slate-400">{component.functional_area.name} ‚Ä¢ {component.vendor.name if component.vendor else 'No Vendor'}</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-sm text-slate-300">{component.version or 'No Version'}</p>
                    <p class="text-xs text-slate-500">{component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-12">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500 mb-4">Add your first agency to get started.</p>
                <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                    Add Component
                </button>
            </div>
            """
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components overview: {str(e)}")

@main.route("/api/vendors/top")
def top_vendors():
    try:
        vendors = db.session.query(Vendor, func.count(Component.id).label('component_count'))\
            .join(Component).group_by(Vendor.id).order_by(func.count(Component.id).desc()).limit(5).all()
        
        html = ""
        for vendor, count in vendors:
            html += f"""
            <div class="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
                <div>
                    <p class="font-medium text-white text-sm">{vendor.name}</p>
                    <p class="text-xs text-slate-400">{count} components</p>
                </div>
                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-white">{count}</span>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-6 text-slate-500">
                <p class="text-sm">No vendor data available</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error loading vendors</p></div>'

@main.route("/api/integration/health")
def integration_health():
    try:
        total_components = Component.query.count()
        integrated_components = db.session.query(Component).join(Component.integration_points).distinct().count()
        
        if total_components > 0:
            health_percentage = (integrated_components / total_components) * 100
        else:
            health_percentage = 0
        
        color = "green" if health_percentage >= 80 else "yellow" if health_percentage >= 50 else "red"
        
        html = f"""
        <div class="text-center">
            <div class="relative inline-flex items-center justify-center w-16 h-16 mb-4">
                <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path class="text-slate-700" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                    <path class="text-{color}-500" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="{health_percentage}, 100" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-white">{health_percentage:.0f}%</span>
                </div>
            </div>
            <h4 class="text-sm font-medium text-white mb-1">Integration Health</h4>
            <p class="text-xs text-slate-400">{integrated_components} of {total_components} components integrated</p>
        </div>
        """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error calculating health</p></div>'

@main.route("/api/activity/recent")
def recent_activity():
    try:
        recent_updates = UpdateLog.query.join(Component).order_by(UpdateLog.update_date.desc()).limit(10).all()
        
        html = ""
        for update in recent_updates:
            time_ago = datetime.utcnow() - update.update_date
            if time_ago.days > 0:
                time_str = f"{time_ago.days}d ago"
            elif time_ago.seconds > 3600:
                time_str = f"{time_ago.seconds // 3600}h ago"
            else:
                time_str = f"{time_ago.seconds // 60}m ago"
            
            html += f"""
            <div class="flex items-center space-x-4 p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-colors">
                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="flex-1">
                    <p class="text-sm font-medium text-white">{update.component.name} updated</p>
                    <p class="text-xs text-slate-400">{update.change_summary[:100] + '...' if update.change_summary and len(update.change_summary) > 100 else update.change_summary or 'No summary provided'}</p>
                    <p class="text-xs text-slate-500 mt-1">by {update.updated_by} ‚Ä¢ {time_str}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-8">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Recent Activity</h3>
                <p class="text-slate-500">Component updates will appear here.</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-8 text-slate-500"><p class="text-sm">Error loading activity</p></div>'

@main.route("/api/components/refresh")
def components_refresh():
    return components_overview()

# Agencies Management Routes
@main.route("/agencies")
def agencies_page():
    """Agencys management page"""
    return render_template("agencies.html")

@main.route("/api/agencies/list")
def agencies_list():
    """Get all agencys with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        query = Agency.query
        
        # Apply search filter
        if search:
            query = query.filter(Agency.name.ilike(f'%{search}%'))
        
        agencies = query.order_by(Agency.name).all()
        for agency in agencies:
            agency.logo_url = url_for('static', filename=f'images/transit_logos/{agency.short_name.lower().replace(" ", "_")}_logo.png')
            
        return render_template('fragments/agency_list.html', 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading agencys: {str(e)}")

@main.route("/api/agencies/<int:agency_id>/details")
def agency_details(agency_id):
    """Get detailed information about a specific agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png')

        
        return render_template('fragments/agency_details.html', 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading agency details: {str(e)}")

@main.route("/api/agencies/form")
def agency_form():
    """Return new agency form"""
    try:
        form = AgencyForm()
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")


@main.route("/api/agencies/<int:agency_id>/form")
def agency_edit_form(agency_id):
    """Return edit agency form"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        form.populate_from_agency(agency)
        
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/agencies", methods=['POST'])
@login_required
def create_agency():
    """Create a new agency"""
    try:
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Agency.query.filter_by(name=form.name.data).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Create new agency
            agency = Agency()
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.add(agency)
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' created successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=None)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating agency: {str(e)}")
    
@main.route("/api/agencies/<int:agency_id>", methods=['POST'])  # Note: Using POST with _method=PUT for HTMX
@login_required
def update_agency(agency_id):
    """Update an existing agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current agency)
            existing = Agency.query.filter(
                Agency.name == form.name.data,
                Agency.id != agency_id
            ).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Update agency
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' updated successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=agency)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating agency: {str(e)}")

@main.route("/api/agencies/<int:agency_id>", methods=['DELETE'])
@login_required
def delete_agency(agency_id):
    """Delete an agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        name = agency.name
        
        # Delete the agency (cascade will handle related records)
        db.session.delete(agency)
        db.session.commit()
        
        return html_success_fragment(f"Agency '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting agency: {str(e)}")
    
# Functional Areas Management Routes
@main.route("/functional-areas")
def functional_areas_page():
    """Functional areas management page"""
    return render_template("functional_areas.html")

@main.route("/api/functional-areas/list")
def functional_areas_list():
    """Get all functional areas with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        # Simple query - no agency relationship anymore
        query = FunctionalArea.query
        
        # Apply search filter
        if search:
            query = query.filter(FunctionalArea.name.ilike(f'%{search}%'))
        
        # Order by functional area name only
        functional_areas = query.order_by(FunctionalArea.name).all()
        
        return render_template('fragments/functional_area_list.html', 
                             functional_areas=functional_areas)
    except Exception as e:
        return html_error_fragment(f"Error loading functional areas: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/details")
def functional_area_details(functional_area_id):
    """Get detailed information about a specific functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        
        return render_template('fragments/functional_area_details.html', 
                             functional_area=functional_area)
    except Exception as e:
        return html_error_fragment(f"Error loading functional area details: {str(e)}")

@main.route("/api/functional-areas/form")
def functional_area_form():
    """Return new functional area form"""
    try:
        # Get all agencys for the dropdown
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=None, 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/form")
def functional_area_edit_form(functional_area_id):
    """Return edit functional area form"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=functional_area,
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/functional-areas", methods=['POST'])
@login_required
def create_functional_area():
    """Create a new functional area"""
    try:
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency
        existing = FunctionalArea.query.filter_by(
            name=data['name'], 
            agency_id=agency_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Create new functional area
        functional_area = FunctionalArea(
            name=data['name'],
            description=data.get('description') or None,
            agency_id=agency_id
        )
        
        db.session.add(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' created successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['PUT'])
@login_required
def update_functional_area(functional_area_id):
    """Update an existing functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency (excluding current area)
        existing = FunctionalArea.query.filter(
            FunctionalArea.name == data['name'],
            FunctionalArea.agency_id == agency_id,
            FunctionalArea.id != functional_area_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Update functional area
        functional_area.name = data['name']
        functional_area.description = data.get('description') or None
        functional_area.agency_id = agency_id
        
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' updated successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['DELETE'])
@login_required
def delete_functional_area(functional_area_id):
    """Delete a functional area"""
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        name = functional_area.name
        agency_name = functional_area.agency.name
        
        # Delete the functional area (cascade will handle related records)
        db.session.delete(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{name}' from {agency_name} deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting functional area: {str(e)}")

@main.route("/api/count/functions")
def count_functions():
    try:
        count = Function.query.count()
        return str(count)
    except Exception as e:
        return "0"
    

@main.route('/contribute')
def contribute():
    return render_template('contribute.html')

@main.route("/api/filter-options/functional-areas")
def functional_areas_filter_options():
    """Get functional area options that have associated components"""
    try:
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Component)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/filter-options/vendors")
def vendors_filter_options():
    """Get vendor options that have associated components"""
    try:
        vendors = db.session.query(Vendor.name)\
            .join(Component)\
            .distinct()\
            .order_by(Vendor.name)\
            .all()
        
        html = '<option value="">All Vendors</option>'
        for vendor in vendors:
            html += f'<option value="{vendor.name}">{vendor.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Vendors</option>'

@main.route("/api/components/<int:component_id>/vendor")
def component_vendor_details(component_id):
    """Get vendor information for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.vendor:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No vendor assigned</span>
            </div>
            '''
        
        vendor = component.vendor
        website_link = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300">{vendor.website}</a>' if vendor.website else "No website"
        
        html = f'''
        <div class="space-y-3">
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Name</span>
                <span class="text-white font-medium">{vendor.name}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Website</span>
                <span class="text-white text-sm">{website_link}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Contact</span>
                <span class="text-white text-sm">{vendor.contact_email or vendor.contact_name or "Not provided"}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Phone</span>
                <span class="text-white text-sm">{vendor.contact_phone or vendor.vendor_phone or "Not provided"}</span>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading vendor info</span></div>'

@main.route("/api/components/<int:component_id>/integrations")
def component_integration_details(component_id):
    """Get integration points for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.integration_points:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No integrations configured</span>
            </div>
            '''
        
        html = '<div class="space-y-2">'
        for ip in component.integration_points:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                <span class="text-sm text-slate-300">{ip.name}</span>
                <span class="text-xs text-slate-500">{ip.integration_type or "Standard"}</span>
            </div>
            '''
        html += '</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading integrations</span></div>'
# End of app/routes/main.py

# Start of app/models/tran.py
# models/tran.py

from datetime import datetime
from app import db
import enum

# Association Tables
component_integration = db.Table(
    'component_integration',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True)
)

function_component = db.Table(
    'function_component',
    db.Column('function_id', db.Integer, db.ForeignKey('functions.id'), primary_key=True),
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True)
)

component_tag = db.Table(
    'component_tag',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_tag = db.Table(
    'integration_tag',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_standard = db.Table(
    'integration_standard',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('standard_id', db.Integer, db.ForeignKey('standards.id'), primary_key=True)
)

# Enums
class Criticality(enum.Enum):
    high = "high"
    medium = "medium"
    low = "low"

# Core Models
class Agency(db.Model):
    __tablename__ = 'agencies'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    location = db.Column(db.String(100))
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))
    ceo = db.Column(db.String(128))
    address_hq = db.Column(db.String(256))
    phone_number = db.Column(db.String(64))
    transit_map_link = db.Column(db.String(256))
    contact_email = db.Column(db.String(255))
    contact_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    short_name = db.Column(db.String(50)) # TODO: use short name for constructing agency specific URLs for images, etc.
    additional_metadata = db.Column(db.JSON)
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_transit_system_name'),
    )

    function_implementations = db.relationship('AgencyFunctionImplementation', back_populates='agency', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Agency(name={self.name}, location={self.location})>"

class FunctionalArea(db.Model):
    __tablename__ = 'functional_areas'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    functions = db.relationship('Function', back_populates='functional_area', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<FunctionalArea(name={self.name})>"

class Function(db.Model):
    __tablename__ = 'functions'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    criticality = db.Column(db.Enum(Criticality), default=Criticality.medium, nullable=False)

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'), nullable=False)
    functional_area = db.relationship('FunctionalArea', back_populates='functions')

    components = db.relationship('Component', secondary='function_component', back_populates='functions')
    agency_implementations = db.relationship('AgencyFunctionImplementation', back_populates='function', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Function(name={self.name}, criticality={self.criticality.value})>"

class Vendor(db.Model):
    __tablename__ = 'vendors'
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_vendor_name'),
    )

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    website = db.Column(db.String(255))
    vendor_email = db.Column(db.String(255))
    vendor_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    contact_email = db.Column(db.String(255))
    contact_phone = db.Column(db.String(50))
    description = db.Column(db.String(500))

    components = db.relationship('Component', back_populates='vendor', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Vendor(name={self.name})>"
    
    @property
    def contact_info(self):
        """
        Consolidated contact information for backward compatibility
        """
        if self.contact_email:
            return self.contact_email
        elif self.contact_name:
            return self.contact_name
        elif self.contact_phone:
            return self.contact_phone
        elif self.vendor_email:
            return self.vendor_email
        elif self.vendor_phone:
            return self.vendor_phone
        else:
            return None

class Component(db.Model):
    __tablename__ = 'components'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(1000))
    version = db.Column(db.String(50))
    deployment_date = db.Column(db.Date)
    update_frequency = db.Column(db.String(50))
    known_issues = db.Column(db.String(500))
    additional_metadata = db.Column(db.JSON)
    # Component nesting functionality
    parent_component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=True)
    parent_component = db.relationship('Component', remote_side=[id], backref='child_components')
    is_composite = db.Column(db.Boolean, default=False, nullable=False)
    vendor_id = db.Column(db.Integer, db.ForeignKey('vendors.id'), nullable=True)

    vendor = db.relationship('Vendor', back_populates='components')
    functions = db.relationship('Function', secondary='function_component', back_populates='components')
    integration_points = db.relationship('IntegrationPoint', secondary='component_integration', back_populates='components')
    tags = db.relationship('Tag', secondary='component_tag', back_populates='components')
    user_roles = db.relationship('UserRole', back_populates='component', cascade='all, delete-orphan')
    update_logs = db.relationship('UpdateLog', back_populates='component', cascade='all, delete-orphan')
    agency_usages = db.relationship('AgencyFunctionImplementation', back_populates='component', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Component(name={self.name}, version={self.version})>"
    
class AgencyFunctionImplementation(db.Model):
    __tablename__ = 'agency_function_implementations'
    
    id = db.Column(db.Integer, primary_key=True)
    agency_id = db.Column(db.Integer, db.ForeignKey('agencies.id'), nullable=False)
    function_id = db.Column(db.Integer, db.ForeignKey('functions.id'), nullable=False)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    
    # Agency-specific deployment details
    deployment_date = db.Column(db.Date)
    version = db.Column(db.String(50))
    deployment_notes = db.Column(db.String(1000))
    status = db.Column(db.String(50), default='Active')  # Active, Planned, Retired
    implementation_notes = db.Column(db.String(1000))
    additional_metadata = db.Column(db.JSON)
    
    # Relationships
    agency = db.relationship('Agency', back_populates='function_implementations')
    function = db.relationship('Function', back_populates='agency_implementations')  
    component = db.relationship('Component', back_populates='agency_usages')
    
    # Unique constraint
    __table_args__ = (
        db.UniqueConstraint('agency_id', 'function_id', 'component_id', 
                          name='uq_agency_function_component'),
    )
    
    def __repr__(self):
        return f"<AgencyFunctionImplementation(agency={self.agency.name if self.agency else None}, function={self.function.name if self.function else None}, component={self.component.name if self.component else None})>"

class IntegrationPoint(db.Model):
    __tablename__ = 'integration_points'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))

    standards = db.relationship('Standard', secondary=integration_standard, back_populates='integration_points')
    components = db.relationship('Component', secondary='component_integration', back_populates='integration_points')
    tags = db.relationship('Tag', secondary=integration_tag, back_populates='integration_points')

    def __repr__(self):
        return f"<IntegrationPoint(name={self.name})>"

class Standard(db.Model):
    __tablename__ = 'standards'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))
    version = db.Column(db.String(50))
    standard_url = db.Column(db.String(255))

    integration_points = db.relationship('IntegrationPoint', secondary=integration_standard, back_populates='standards')

    def __repr__(self):
        return f"<Standard(name={self.name}, version={self.version})>"

class TagGroup(db.Model):
    __tablename__ = 'tag_groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))

    tags = db.relationship('Tag', back_populates='tag_group', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TagGroup(name={self.name})>"

class Tag(db.Model):
    __tablename__ = 'tags'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    color = db.Column(db.String(20))

    tag_group_id = db.Column(db.Integer, db.ForeignKey('tag_groups.id'), nullable=False)
    tag_group = db.relationship('TagGroup', back_populates='tags')

    components = db.relationship('Component', secondary='component_tag', back_populates='tags')
    integration_points = db.relationship('IntegrationPoint', secondary=integration_tag, back_populates='tags')

    def __repr__(self):
        return f"<Tag(name={self.name})>"
    
class UserRole(db.Model):
    __tablename__ = 'user_roles'

    id = db.Column(db.Integer, primary_key=True)
    role_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    component_id = db.Column(db.Integer, db.ForeignKey('components.id'))
    component = db.relationship('Component', back_populates='user_roles')

    def __repr__(self):
        return f"<UserRole(role_name={self.role_name})>"

class UpdateLog(db.Model):
    __tablename__ = 'update_logs'

    id = db.Column(db.Integer, primary_key=True)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    updated_by = db.Column(db.String(100), nullable=False)
    update_date = db.Column(db.DateTime, default=datetime.utcnow)
    change_summary = db.Column(db.String(1000))

    component = db.relationship('Component', back_populates='update_logs')

    def __repr__(self):
        return f"<UpdateLog(component_id={self.component_id}, updated_by={self.updated_by})>"

# End of app/models/tran.py

# Start of app/templates/base.html
<!doctype html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title|default("SeeTran - Transit System Intelligence") }}</title>
  <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">
  <link rel="stylesheet" href="{{ url_for("static", filename="css/tailwind.css") }}">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .glass-effect { 
      backdrop-filter: blur(10px); 
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.1);
    }
    .glow-effect {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }
    .nav-link::after {
      content: '';
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #3b82f6, #06b6d4);
      transition: width 0.3s ease;
    }
    .nav-link:hover::after {
      width: 100%;
    }
    .metric-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
      transition: all 0.3s ease;
    }
    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
  
  <!-- Navigation -->
  <nav class="glass-effect border-b border-slate-700/50 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        
        <!-- Logo and Brand -->
        <div class="flex items-center space-x-3">
          <div class="flex items-center space-x-3">
          <div class="w-8 h-8 rounded-lg flex items-center justify-center">
            <img src="{{ url_for('static', filename='images/logo.png') }}" 
                 alt="SeeTran Logo" 
                 class="w-5 h-5 object-contain">
          </div>
          <div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
              see-tran
            </h1>
            <p class="text-xs text-slate-400">Transit System Intelligence</p>
          </div>
        </div>

        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Dashboard</a>
          <a href="/agencies" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Transit Agencies</a>
          <a href="/functional-areas" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Functional Areas</a>
          <a href="/components" class="nav-link text-slate-300 hover:text-white text-sm font-medium">System Components</a>
          <a href="/vendors" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Vendors</a>
          <a href="/integration" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Integration</a>
          <a href="/reports" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Reports</a>
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4">
          <button class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors">
            <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </button>
          <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="min-h-screen">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="glass-effect border-t border-slate-700/50 mt-auto">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-slate-400 text-sm">
          SeeTran Platform. Transit system visibility and intelligence.
        </div>
        <div class="flex space-x-6 mt-4 md:mt-0 items-center">
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Documentation</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">API</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Support</a>
          <a href="/contribute" class="inline-flex items-center text-emerald-400 hover:text-emerald-300 text-sm font-medium">
            üåê Open Source <span class="hidden sm:inline">&nbsp;| See how it works</span>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="{{ url_for("static", filename="js/htmx.min.js") }}"></script>
  <script>
    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Add loading states for HTMX requests
    document.body.addEventListener('htmx:beforeRequest', function(e) {
      const target = e.target;
      if (target.classList.contains('btn-loading')) {
        target.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      }
    });
  </script>
  {% block scripts %}{% endblock %}
</body>
</html>
# End of app/templates/base.html

# Start of app/templates/vendors.html
{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Vendor Management</h1>
    <p class="text-slate-400">Manage vendor relationships and track system portfolios across your transit network.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/vendors" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-systems-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Systems/Vendor</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="top-vendor-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Top Vendor Systems</h3>
    </div>
  </div>

  <!-- Search and Filters -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search and Sort -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" id="vendor-search" placeholder="Search vendors..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                 hx-get="/api/vendors/list" hx-target="#vendors-list" hx-trigger="keyup changed delay:300ms" 
                 hx-include="[id='sort-select']" hx-vals='js:{"search": event.target.value}'>
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Sort Options -->
        <select id="sort-select" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/vendors/list" hx-target="#vendors-list" hx-include="[id='vendor-search']" hx-vals='js:{"sort": event.target.value}'>
          <option value="name">Sort by Name</option>
          <option value="systems">Sort by System Count</option>
          <option value="recent">Sort by Recent Activity</option>
        </select>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button class="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Vendor
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export List
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Vendors List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Vendor Portfolio</h2>
          <button hx-get="/api/vendors/list" hx-target="#vendors-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="vendors-list" class="space-y-6" hx-get="/api/vendors/list" hx-trigger="load">
          <!-- Vendors will be loaded here -->
          <div class="animate-pulse space-y-6">
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Vendor Details Sidebar -->
    <div class="space-y-6">
      
      <!-- Vendor Details Panel -->
      <div id="vendor-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
          <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
        </div>
      </div>

      <!-- Top Integration Standards -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Integration Standards</h3>
        <div id="integration-standards" hx-get="/api/integration/standards" hx-trigger="load" class="space-y-2">
          <!-- Integration standards will be loaded here -->
          <div class="animate-pulse space-y-2">
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
          </div>
        </div>
      </div>

      <!-- Vendor Performance Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Performance Insights</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Reliable</span>
            <span class="text-green-400 font-medium text-sm" id="most-reliable-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Newest Partnership</span>
            <span class="text-blue-400 font-medium text-sm" id="newest-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Systems</span>
            <span class="text-purple-400 font-medium text-sm" id="largest-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg text-sm font-medium hover:from-purple-700 hover:to-pink-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Vendor
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Vendor Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Contacts
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Load vendor stats
document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/vendors/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('active-vendors-count').textContent = data.active_vendors;
      document.getElementById('avg-systems-count').textContent = data.avg_systems_per_vendor;
      
      if (data.top_vendor) {
        document.getElementById('top-vendor-count').textContent = data.top_vendor.system_count;
        document.getElementById('largest-vendor').textContent = data.top_vendor.name;
      }
    });
});

// Add vendor card hover effects
document.body.addEventListener('htmx:afterSwap', function(e) {
  const vendorCards = document.querySelectorAll('.vendor-card');
  vendorCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-4px)';
      this.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.3)';
    });
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
      this.style.boxShadow = 'none';
    });
  });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);
</script>
{% endblock %}
# End of app/templates/vendors.html

# Start of app/templates/fragments/agency_details.html
<div class="glass-effect rounded-xl overflow-hidden border border-slate-700/50">
  <!-- Header Image -->
  <div class="relative aspect-[2/1] bg-gradient-to-r from-slate-800 to-slate-700">
    <img src="{{ agency.header_url }}" 
         alt="{{ agency.name }} header" 
         class="w-full h-full object-cover"
         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
    <!-- Fallback gradient when image doesn't exist -->
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20 hidden items-center justify-center">
      <svg class="w-12 h-12 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
      </svg>
    </div>
  </div>
  
  <!-- Content with name and buttons -->
  <div class="p-6">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-2xl font-bold text-white">{{ agency.name }}</h2>
      <div class="flex gap-2">
      <button hx-get="/api/agencies/{{ agency.id }}/form" hx-target="#agency-details" hx-swap="innerHTML"
              class="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors">
        Edit
      </button>
      <button onclick="closeAgencyDetails()"
              class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
        ‚úï Close
      </button>
    </div>
  </div>
  
  <div class="space-y-6">
    <!-- Basic Information Section -->
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
        </svg>
        Location & Identity
      </h3>
      <div class="space-y-3 text-sm">
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Location:</span>
          <span class="text-white">{{ agency.location or 'Not specified' }}</span>
        </div>
        {% if agency.description %}
        <div class="pt-1">
          <span class="text-slate-400 block mb-2">Description:</span>
          <p class="text-slate-300 leading-relaxed">{{ agency.description }}</p>
        </div>
        {% endif %}
      </div>
    </div>

    <!-- Leadership & Organization -->
    {% if agency.ceo %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-green-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
        </svg>
        Leadership
      </h3>
      <div class="text-sm">
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">CEO:</span>
          <span class="text-white">{{ agency.ceo }}</span>
        </div>
      </div>
    </div>
    {% endif %}

    <!-- Contact Information -->
    {% if agency.contact_name or agency.contact_email or agency.contact_phone or agency.phone_number %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
        </svg>
        Contact Information
      </h3>
      <div class="space-y-3 text-sm">
        {% if agency.contact_name %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Contact Person:</span>
          <span class="text-white">{{ agency.contact_name }}</span>
        </div>
        {% endif %}
        {% if agency.contact_email %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Email:</span>
          <a href="mailto:{{ agency.contact_email }}" class="text-blue-400 hover:text-blue-300 transition-colors break-all">{{ agency.contact_email }}</a>
        </div>
        {% endif %}
        {% if agency.contact_phone %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Phone:</span>
          <a href="tel:{{ agency.contact_phone }}" class="text-blue-400 hover:text-blue-300 transition-colors">{{ agency.contact_phone }}</a>
        </div>
        {% endif %}
        {% if agency.phone_number and agency.phone_number != agency.contact_phone %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Main Phone:</span>
          <a href="tel:{{ agency.phone_number }}" class="text-blue-400 hover:text-blue-300 transition-colors">{{ agency.phone_number }}</a>
        </div>
        {% endif %}
      </div>
    </div>
    {% endif %}

    <!-- Address & Location -->
    {% if agency.address_hq %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-orange-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm0 2v.01H16V6H4zm0 2v8h12V8H4z" clip-rule="evenodd"/>
        </svg>
        Headquarters
      </h3>
      <div class="text-sm">
        <p class="text-slate-300 leading-relaxed">{{ agency.address_hq }}</p>
      </div>
    </div>
    {% endif %}

    <!-- Online Resources -->
    {% if agency.website or agency.agency_map_link %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
        </svg>
        Online Resources
      </h3>
      <div class="space-y-3 text-sm">
        {% if agency.website %}
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
          <span class="text-slate-400 mb-2 sm:mb-0">Website:</span>
          <a href="{{ agency.website }}" target="_blank" class="text-blue-400 hover:text-blue-300 transition-colors flex items-center w-fit">
            Visit Site
            <svg class="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
              <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-1a1 1 0 10-2 0v1H5V7h1a1 1 0 000-2H5z"/>
            </svg>
          </a>
        </div>
        {% endif %}
        {% if agency.agency_map_link %}
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
          <span class="text-slate-400 mb-2 sm:mb-0">Transit Map:</span>
          <a href="{{ agency.agency_map_link }}" target="_blank" class="text-blue-400 hover:text-blue-300 transition-colors flex items-center w-fit">
            View Map
            <svg class="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
              <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-1a1 1 0 10-2 0v1H5V7h1a1 1 0 000-2H5z"/>
            </svg>
          </a>
        </div>
        {% endif %}
      </div>
    </div>
    {% endif %}

    <!-- Additional Metadata -->
    {% if agency.additional_metadata %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
        </svg>
        Additional Information
      </h3>
      <div class="text-sm space-y-2">
        {% for key, value in agency.additional_metadata.items() %}
        <div class="flex flex-col sm:flex-row sm:justify-between py-1">
          <span class="text-slate-400 mb-1 sm:mb-0">{{ key|title }}:</span>
          <span class="text-white">{{ value }}</span>
        </div>
        {% endfor %}
      </div>
    </div>
    {% endif %}

    <!-- Function Implementations -->
    {% if agency.function_implementations %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z"/>
        </svg>
        Technology Implementations ({{ agency.function_implementations|length }})
      </h3>
      <div class="space-y-3 max-h-64 overflow-y-auto">
        {% for impl in agency.function_implementations %}
        <div class="bg-slate-600/30 rounded-lg p-3">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1">
            <span class="text-sm font-medium text-white mb-1 sm:mb-0">{{ impl.function.name }}</span>
            <div class="flex items-center space-x-2">
              <span class="text-xs text-slate-400 bg-slate-700 px-2 py-1 rounded">
                {{ impl.function.functional_area.name }}
              </span>
              <span class="text-xs px-2 py-1 rounded 
                {% if impl.status == 'Active' %}bg-green-600/20 text-green-300
                {% elif impl.status == 'Planned' %}bg-yellow-600/20 text-yellow-300
                {% else %}bg-slate-600/20 text-slate-300{% endif %}">
                {{ impl.status }}
              </span>
            </div>
          </div>
          <div class="text-xs text-slate-400 flex items-center justify-between">
            <span>Component: {{ impl.component.name }}</span>
            {% if impl.deployment_date %}
            <span>Deployed: {{ impl.deployment_date.strftime('%Y-%m-%d') }}</span>
            {% endif %}
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
    {% endif %}
  </div>
</div>

<script>
function closeAgencyDetails() {
  document.getElementById('agency-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Agency Details</h3>
      <p class="text-slate-500 text-sm">Click on a transit agency to view details or use the Add button to create a new one.</p>
    </div>`;
}
</script>
# End of app/templates/fragments/agency_details.html

# Start of app/templates/fragments/agency_list.html
{% if agencies %}
  {% for agency in agencies %}
  <div class="agency-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
       hx-get="/api/agencies/{{ agency.id }}/details" hx-target="#agency-details" hx-swap="innerHTML">
    
    <div class="flex items-start justify-between mb-4">
      <div class="flex items-start space-x-4 flex-1">
        <!-- Agency Logo -->
        {% if agency.logo_url %}
        <div class="w-12 h-12 rounded-lg overflow-hidden bg-slate-700 flex-shrink-0">
          <img src="{{ agency.logo_url }}" alt="{{ agency.name }} logo" 
               class="w-full h-full object-contain">
        </div>
        {% else %}
        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center flex-shrink-0">
          <span class="text-lg font-bold text-white">{{ agency.name[0].upper() }}</span>
        </div>
        {% endif %}
        
        <!-- Agency Info -->
        <div class="flex-1">
          <div class="flex items-center space-x-3 mb-2">
            <h3 class="font-semibold text-white text-lg">{{ agency.name }}</h3>
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
          </div>
          
          {% if agency.location %}
          <p class="text-slate-300 text-sm mb-2">üìç {{ agency.location }}</p>
          {% endif %}
          
          {% if agency.description %}
          <p class="text-slate-400 text-sm mb-3">{{ agency.description[:120] }}{% if agency.description|length > 120 %}...{% endif %}</p>
          {% endif %}
          
          <div class="flex items-center space-x-4 text-xs text-slate-400">
            <span>üîß {{ agency.function_implementations|length }} implementations</span>
            {% if agency.contact_name %}
            <span>üë§ {{ agency.contact_name }}</span>
            {% endif %}
          </div>
        </div>
      </div>
      
      <!-- Stats Badge -->
      <div class="text-center">
        <div class="w-10 h-10 bg-blue-600/20 border border-blue-600/30 rounded-full flex items-center justify-center mb-1">
          <span class="text-sm font-bold text-blue-300">{{ agency.function_implementations|length }}</span>
        </div>
        <div class="text-xs text-slate-500">Tech</div>
      </div>
    </div>
    
    <!-- Footer with Quick Actions -->
    <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
      <div class="flex items-center space-x-3">
        {% if agency.website %}
        <a href="{{ agency.website }}" target="_blank" 
           class="text-xs text-blue-400 hover:text-blue-300 transition-colors"
           onclick="event.stopPropagation()" title="Website">
          üåê Website
        </a>
        {% endif %}
        
        {% if agency.contact_email %}
        <a href="mailto:{{ agency.contact_email }}" 
           class="text-xs text-green-400 hover:text-green-300 transition-colors"
           onclick="event.stopPropagation()" title="Email">
          üìß Contact
        </a>
        {% endif %}
      </div>
      
      <button class="text-xs text-slate-500 hover:text-slate-300 transition-colors"
              hx-get="/api/agencies/{{ agency.id }}/form" hx-target="#agency-details" hx-swap="innerHTML"
              onclick="event.stopPropagation()">
        Edit ‚Üí
      </button>
    </div>
  </div>
  {% endfor %}
{% else %}
<div class="text-center py-12">
  <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
    </svg>
  </div>
  <h3 class="text-lg font-medium text-slate-400 mb-2">No Transit Agencies Found</h3>
  <p class="text-slate-500">Try adjusting your search or add a new transit agency.</p>
</div>
{% endif %}
# End of app/templates/fragments/agency_list.html

# Start of app/templates/fragments/agency_form.html
<!-- app/templates/fragments/transit_system_form.html -->
<div class="glass-effect rounded-xl p-6 border border-slate-700/50 max-h-[90vh] overflow-y-auto">
  <div class="flex items-center justify-between mb-6 sticky top-0 bg-slate-800/90 backdrop-blur-sm z-10 py-2 -mt-2">
    <h2 class="text-xl font-bold text-white">
      {% if transit_system %}Edit Transit System{% else %}Add Transit System{% endif %}
    </h2>
    <button onclick="closeForm()"
            class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
      ‚úï Cancel
    </button>
  </div>

  <form {% if transit_system %}hx-put="/api/transit-systems/{{ transit_system.id }}"{% else %}hx-post="/api/transit-systems"{% endif %}
        hx-target="#result-message" hx-swap="innerHTML" class="space-y-8">
    
    <!-- Basic Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
        </svg>
        Basic Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="md:col-span-1">
          <label for="name" class="block text-sm font-medium text-slate-300 mb-2">
            Name <span class="text-red-400">*</span>
          </label>
          <input type="text" id="name" name="name" required
                 value="{{ transit_system.name if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors"
                 placeholder="e.g., Metro Transit">
        </div>

        <div class="md:col-span-1">
          <label for="location" class="block text-sm font-medium text-slate-300 mb-2">Location</label>
          <input type="text" id="location" name="location"
                 value="{{ transit_system.location if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors"
                 placeholder="e.g., Minneapolis, MN">
        </div>

        <div class="md:col-span-2">
          <label for="description" class="block text-sm font-medium text-slate-300 mb-2">Description</label>
          <textarea id="description" name="description" rows="3"
                    class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors resize-vertical"
                    placeholder="Brief description of the transit system and its services">{{ transit_system.description if transit_system else '' }}</textarea>
        </div>
      </div>
    </div>

    <!-- Address & Location Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-green-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
        </svg>
        Address & Location
      </h3>
      <div>
        <label for="address_hq" class="block text-sm font-medium text-slate-300 mb-2">Headquarters Address</label>
        <textarea id="address_hq" name="address_hq" rows="2"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-green-500 focus:ring-1 focus:ring-green-500 focus:outline-none transition-colors resize-vertical"
                  placeholder="e.g., 560 6th Ave N, Seattle, WA 98109">{{ transit_system.address_hq if transit_system else '' }}</textarea>
        <p class="text-xs text-slate-500 mt-1">Full street address of the main headquarters</p>
      </div>
    </div>

    <!-- Leadership Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
        </svg>
        Leadership
      </h3>
      <div>
        <label for="ceo" class="block text-sm font-medium text-slate-300 mb-2">Chief Executive Officer</label>
        <input type="text" id="ceo" name="ceo"
               value="{{ transit_system.ceo if transit_system else '' }}"
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors"
               placeholder="e.g., John Smith">
        <p class="text-xs text-slate-500 mt-1">Current CEO or top executive</p>
      </div>
    </div>

    <!-- Contact Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/>
          <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/>
        </svg>
        Contact Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="contact_name" class="block text-sm font-medium text-slate-300 mb-2">Primary Contact Name</label>
          <input type="text" id="contact_name" name="contact_name"
                 value="{{ transit_system.contact_name if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., Jane Doe">
        </div>

        <div>
          <label for="contact_email" class="block text-sm font-medium text-slate-300 mb-2">Primary Contact Email</label>
          <input type="email" id="contact_email" name="contact_email"
                 value="{{ transit_system.contact_email if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., contact@transit.gov">
        </div>

        <div>
          <label for="contact_phone" class="block text-sm font-medium text-slate-300 mb-2">Primary Contact Phone</label>
          <input type="tel" id="contact_phone" name="contact_phone"
                 value="{{ transit_system.contact_phone if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., (206) 555-0123">
        </div>

        <div>
          <label for="phone_number" class="block text-sm font-medium text-slate-300 mb-2">Main Phone Number</label>
          <input type="tel" id="phone_number" name="phone_number"
                 value="{{ transit_system.phone_number if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., (206) 555-0100">
        </div>
      </div>
      <p class="text-xs text-slate-500 mt-2">Primary contact is for direct inquiries, main phone is the public number</p>
    </div>

    <!-- Web & Resources Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.032 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
        </svg>
        Web & Resources
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="website" class="block text-sm font-medium text-slate-300 mb-2">Official Website</label>
          <input type="url" id="website" name="website"
                 value="{{ transit_system.website if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-yellow-500 focus:ring-1 focus:ring-yellow-500 focus:outline-none transition-colors"
                 placeholder="e.g., https://www.transit.gov">
          <p class="text-xs text-slate-500 mt-1">Main public website</p>
        </div>

        <div>
          <label for="transit_map_link" class="block text-sm font-medium text-slate-300 mb-2">Transit Map URL</label>
          <input type="url" id="transit_map_link" name="transit_map_link"
                 value="{{ transit_system.transit_map_link if transit_system else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-yellow-500 focus:ring-1 focus:ring-yellow-500 focus:outline-none transition-colors"
                 placeholder="e.g., https://www.transit.gov/map">
          <p class="text-xs text-slate-500 mt-1">Link to interactive transit map</p>
        </div>
      </div>
    </div>

    <!-- Additional Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-orange-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
        </svg>
        Additional Information
        <span class="ml-auto text-xs text-slate-500">Custom fields</span>
      </h3>
      
      <div id="metadata-fields" class="space-y-3">
        {% if transit_system and transit_system.additional_metadata %}
          {% for key, value in transit_system.additional_metadata.items() %}
          <div class="metadata-field bg-slate-800/50 rounded-lg p-4 border border-slate-700/50">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label class="block text-xs font-medium text-slate-400 mb-1">Field Name</label>
                <input type="text" name="metadata_key[]" value="{{ key }}"
                       class="w-full bg-slate-900 border border-slate-600 rounded px-3 py-2 text-white placeholder-slate-400 focus:border-orange-500 focus:ring-1 focus:ring-orange-500 focus:outline-none transition-colors text-sm"
                       placeholder="e.g., Fleet Size">
              </div>
              <div>
                <label class="block text-xs font-medium text-slate-400 mb-1">Field Value</label>
                <input type="text" name="metadata_value[]" value="{{ value }}"
                       class="w-full bg-slate-900 border border-slate-600 rounded px-3 py-2 text-white placeholder-slate-400 focus:border-orange-500 focus:ring-1 focus:ring-orange-500 focus:outline-none transition-colors text-sm"
                       placeholder="e.g., 250 buses">
              </div>
            </div>
            <button type="button" onclick="removeMetadataField(this)"
                    class="mt-2 text-xs text-red-400 hover:text-red-300 transition-colors flex items-center">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
              Remove Field
            </button>
          </div>
          {% endfor %}
        {% endif %}
      </div>
      
      <button type="button" onclick="addMetadataField()" 
              class="mt-3 px-4 py-2 bg-orange-600/20 border border-orange-600/30 rounded-lg text-orange-300 text-sm hover:bg-orange-600/30 transition-colors flex items-center">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
        </svg>
        Add Custom Field
      </button>
      <p class="text-xs text-slate-500 mt-2">Add any additional information like fleet size, ridership, service hours, etc.</p>
    </div>

    <!-- Form Messages -->
    <div id="result-message" class="form-section"></div>

    <!-- Form Actions -->
    <div class="form-section sticky bottom-0 bg-slate-800/95 backdrop-blur-sm border-t border-slate-600 pt-6 mt-8">
      <div class="flex flex-col sm:flex-row gap-3">
        <button type="submit" 
                class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white shadow-lg">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
          {% if transit_system %}Update Transit System{% else %}Create Transit System{% endif %}
        </button>
        
        <button type="button" onclick="closeForm()" 
                class="px-6 py-3 bg-slate-700 hover:bg-slate-600 rounded-lg font-medium transition-colors text-white">
          Cancel
        </button>
        
        {% if transit_system %}
        <button type="button" 
                hx-delete="/api/transit-systems/{{ transit_system.id }}"
                hx-confirm="Are you sure you want to delete this transit system? This will permanently delete all associated functional areas, categories, and functions."
                hx-target="#result-message"
                class="px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg font-medium transition-colors text-white">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
          </svg>
          Delete System
        </button>
        {% endif %}
      </div>
    </div>
  </form>
</div>

<script>
function closeForm() {
  document.getElementById('transit-system-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Transit System Details</h3>
      <p class="text-slate-500 text-sm">Click on a transit system to view details or use the Add button to create a new one.</p>
    </div>`;
}

function addMetadataField() {
  const container = document.getElementById('metadata-fields');
  const fieldDiv = document.createElement('div');
  fieldDiv.className = 'metadata-field bg-slate-800/50 rounded-lg p-4 border border-slate-700/50';
  fieldDiv.innerHTML = `
    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
      <div>
        <label class="block text-xs font-medium text-slate-400 mb-1">Field Name</label>
        <input type="text" name="metadata_key[]" 
               class="w-full bg-slate-900 border border-slate-600 rounded px-3 py-2 text-white placeholder-slate-400 focus:border-orange-500 focus:ring-1 focus:ring-orange-500 focus:outline-none transition-colors text-sm"
               placeholder="e.g., Fleet Size">
      </div>
      <div>
        <label class="block text-xs font-medium text-slate-400 mb-1">Field Value</label>
        <input type="text" name="metadata_value[]" 
               class="w-full bg-slate-900 border border-slate-600 rounded px-3 py-2 text-white placeholder-slate-400 focus:border-orange-500 focus:ring-1 focus:ring-orange-500 focus:outline-none transition-colors text-sm"
               placeholder="e.g., 250 buses">
      </div>
    </div>
    <button type="button" onclick="removeMetadataField(this)"
            class="mt-2 text-xs text-red-400 hover:text-red-300 transition-colors flex items-center">
      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
      </svg>
      Remove Field
    </button>
  `;
  container.appendChild(fieldDiv);
}

function removeMetadataField(button) {
  button.closest('.metadata-field').remove();
}

// Auto-save draft functionality (optional enhancement)
function saveDraft() {
  const formData = new FormData(document.querySelector('form'));
  const draft = {};
  for (let [key, value] of formData.entries()) {
    draft[key] = value;
  }
  localStorage.setItem('transit_system_draft', JSON.stringify(draft));
}

// Optional: Save draft every 30 seconds
setInterval(saveDraft, 30000);
</script>

<style>
.form-section {
  scroll-margin-top: 100px;
}

.metadata-field {
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Custom scrollbar for better UX */
.glass-effect::-webkit-scrollbar {
  width: 6px;
}

.glass-effect::-webkit-scrollbar-track {
  background: rgba(30, 41, 59, 0.5);
  border-radius: 3px;
}

.glass-effect::-webkit-scrollbar-thumb {
  background: rgba(148, 163, 184, 0.5);
  border-radius: 3px;
}

.glass-effect::-webkit-scrollbar-thumb:hover {
  background: rgba(148, 163, 184, 0.7);
}
</style>
# End of app/templates/fragments/agency_form.html

