# Project Directory Structure
./
    .flaskenv
    run.py
    README_cline.md
    README_setup.md
    flask_setup.sh
    tailwind.config.js
    gtfs_loader.py
    .DS_Store
    config.py
    requirements.txt
    cat.py
    README_next.md
    README.md
    .gitignore
    package-lock.json
    package.json
    .nvmrc
    README_data
    postcss.config.js
    app/
        auth.py
        .DS_Store
        __init__.py
        forms/
            __init__.py
            forms.py
        agents/
            agency_agent.py
            __init__.py
            component_agent.py
            vendor_agent.py
        utils/
            logging.py
            __init__.py
            errors.py
        models/
            tran.py
            __init__.py
            gtfs.py
        static/
            .DS_Store
            css/
                .keep
            images/
                favicon.ico
                ST.png
                logo.png
                transit_logos/
                    spokane_logo.png
                    kingco_logo.png
                    island_logo.png
                    godurham_logo.png
                    chapelhill_logo.png
                    cota_logo.png
                    c-tran_logo.png
                    trimet_logo.png
                vendor_logos/
                    init_logo.png
                    apollo_logo.png
                    byd_logo.png
                transit_headers/
                    cota_header.png
                    c-tran_header.png
                vendor_headers/
                    apollo_header.png
            js/
                .keep
                main.js
                vendor-page-controller.js
        templates/
            integration_form.html
            index.html
            base.html
            components.html
            standards.html
            integrations.html
            functional_areas.html
            agencies.html
            contribute.html
            vendors.html
            fragments/
                vendor_details.html
                vendor_form.html
                vendor_list.html
                agency_details.html
                functional_area_details.html
                agency_list.html
                functional_area_form.html
                functional_area_list.html
                agency_form.html
        routes/
            agency.py
            __init__.py
            main.py
            integrations.py
    tests/
        test_phase2_functional_areas.py
        test_phase2.py
        __init__.py
        test_vendors_crud.py
        test_phase1.py
        test_app.py
    tailwind/
        config.js
        input.css

# End of Directory Structure

# Start of app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os

db = SQLAlchemy()
migrate = Migrate()

def create_app(test_config=None):
    app = Flask(__name__)
    
    if test_config:
        app.config.update(test_config)
    else:
        # Import config classes
        from config import DevelopmentConfig, ProductionConfig, TestConfig
        
        # Use DevelopmentConfig by default, or based on environment
        flask_env = os.environ.get('FLASK_ENV', 'development')
        if flask_env == 'production':
            app.config.from_object(ProductionConfig)
        elif flask_env == 'testing':
            app.config.from_object(TestConfig)
        else:
            app.config.from_object(DevelopmentConfig)
    
    # Ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass
    
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Import models so Flask-Migrate can detect them
    with app.app_context():
        from app.models import tran  # Import existing models
        from app.models import gtfs  # Import GTFS models
    
    # register blueprints
    from app.routes.main import main as main_bp
    app.register_blueprint(main_bp)

    from app.routes.agency import agency_bp
    app.register_blueprint(agency_bp)
    from app.routes.integrations import integration_bp
    app.register_blueprint(integration_bp)
    
    return app

# End of app/__init__.py

# Start of run.py
# run.py
from app import create_app, db
from app.models import (
    # Existing models
    Agency, FunctionalArea, Vendor, Component, Function,
    IntegrationPoint, UserRole, UpdateLog, Standard, TagGroup, Tag,
    AgencyFunctionImplementation,
    # GTFS models
    GTFSAgency, GTFSStop, GTFSRoute, GTFSCalendar, GTFSCalendarDate,
    GTFSTrip, GTFSStopTime, GTFSShape, GTFSFeedInfo,
    GTFSFareMedia, GTFSRiderCategory, GTFSFareProduct, 
    GTFSTimeframe, GTFSFareLegRule, GTFSFareTransferRule
)
import os
import click

# Create the Flask app using the factory pattern
app = create_app()

# Ensure models are imported so Flask-Migrate can detect them
@app.shell_context_processor
def make_shell_context():
    return {
        'app': app,
        'db': db,
        # Existing models
        'Agency': Agency,
        'FunctionalArea': FunctionalArea,
        'Function': Function,
        'Vendor': Vendor,
        'Component': Component,
        'IntegrationPoint': IntegrationPoint,
        'UserRole': UserRole,
        'UpdateLog': UpdateLog,
        'Standard': Standard,
        'TagGroup': TagGroup,
        'Tag': Tag,
        # GTFS models
        'GTFSAgency': GTFSAgency,
        'GTFSStop': GTFSStop,
        'GTFSRoute': GTFSRoute,
        'GTFSCalendar': GTFSCalendar,
        'GTFSCalendarDate': GTFSCalendarDate,
        'GTFSTrip': GTFSTrip,
        'GTFSStopTime': GTFSStopTime,
        'GTFSShape': GTFSShape,
        'GTFSFeedInfo': GTFSFeedInfo,
        'GTFSFareMedia': GTFSFareMedia,
        'GTFSRiderCategory': GTFSRiderCategory,
        'GTFSFareProduct': GTFSFareProduct,
        'GTFSTimeframe': GTFSTimeframe,
        'GTFSFareLegRule': GTFSFareLegRule,
        'GTFSFareTransferRule': GTFSFareTransferRule,
    }

# Add CLI command for loading GTFS data
@app.cli.command()
@click.argument('gtfs_directory')
@click.option('--clear', is_flag=True, help='Clear existing GTFS data first')
def load_gtfs(gtfs_directory, clear):
    """Load GTFS data from directory"""
    from gtfs_loader import GTFSLoader
    loader = GTFSLoader(app, gtfs_directory)
    summary = loader.load_all(clear_existing=clear)
    click.echo(f"✅ Loaded {summary['total_records']} records in {summary['duration']:.2f}s")
    click.echo(f"📊 Files processed: {summary['files_processed']}")
    click.echo(f"🔄 Records affected: {summary['total_affected']}")

if __name__ == '__main__':
    app.run(debug=True)
# End of run.py

# Start of config.py
# config.py

import os
from dotenv import load_dotenv
from datetime import timedelta

basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

class Config:
    # Core Flask settings
    SECRET_KEY = os.environ.get('SECRET_KEY')
    DEBUG = os.environ.get('FLASK_ENV') == 'development'
    
    # Database settings - SQLite support
    DB_TYPE = os.environ.get('DB_TYPE', 'sqlite')
    
    if DB_TYPE == 'postgres':
        SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
    else:
        # SQLite database
        SQLALCHEMY_DATABASE_URI = f"sqlite:///{os.path.join(basedir, 'instance', 'app.db')}"
    
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    
    # Security settings
    CSRF_ENABLED = True
    
    # Application paths and cookies
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_REFRESH_EACH_REQUEST = True

    WTF_CSRF_TIME_LIMIT = 24 * 3600  # 24 hours in seconds
    WTF_CSRF_SSL_STRICT = False
    
    # File upload settings
    MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500 MB limit
    
    # Email settings
    POSTMARK_API_KEY = os.getenv('POSTMARK_API_KEY')
    POSTMARK_SENDER_EMAIL = os.getenv('POSTMARK_SENDER_EMAIL')
    POSTMARK_NOTIFY_EMAIL = os.getenv('POSTMARK_NOTIFY_EMAIL')

    CLAUDE_API_KEY = os.environ.get('CLAUDE_API_KEY')
    CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages'
    CLAUDE_MODEL = os.environ.get('CLAUDE_MODEL', 'claude-3-5-haiku-20241022')
    
    # AWS settings
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = os.environ.get('AWS_REGION', 'us-west-2')
    S3_BUCKET = os.environ.get('S3_BUCKET', 'well-app')
    
    # Application URLs
    SMS_BASE_URL = os.environ.get('SMS_BASE_URL', 'https://see-tran.com')
    
    @staticmethod
    def get_s3_prefix(tenant_id):
        """Generate S3 key prefix for tenant isolation"""
        return f'tenant_{tenant_id}'
    
    # SMS settings
    TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
    TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
    TWILIO_FROM_NUMBER = os.getenv('TWILIO_FROM_NUMBER')

    SMS_TEST_PHONE_NUMBER = os.environ.get('SMS_TEST_PHONE_NUMBER', '+18084649192')

class DevelopmentConfig(Config):
    """Development configuration."""
    FLASK_ENV = 'development'
    DEBUG = True
    DEVELOPMENT = True
    
    # More permissive session cookie settings for development
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_DOMAIN = None  # Allow all domains in development

class ProductionConfig(Config):
    """Production configuration."""
    DEBUG = False
    DEVELOPMENT = False
    SESSION_COOKIE_SECURE = True
    PREFERRED_URL_SCHEME = 'https'
    
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_FILE_DIR = '/home/ubuntu/see-tran/flask_session'

class TestConfig(Config):
    """Test configuration."""
    TESTING = True
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False
# End of config.py

# Start of .flaskenv
FLASK_APP=app:create_app

# End of .flaskenv

# Start of app/routes/__init__.py

# End of app/routes/__init__.py

# Start of app/routes/main.py
# app/routes/main.py
from flask import Blueprint, render_template, jsonify, request, url_for
from app import db
from app.models.tran import (
    Agency, FunctionalArea, Component, Vendor, IntegrationPoint, 
    UpdateLog, Function, Standard, Tag, TagGroup, UserRole, AgencyFunctionImplementation,
    integration_standard, component_integration
)
from app.forms.forms import AgencyForm, VendorForm
from app.auth import login_required, get_updated_by
from app.utils.errors import (
    json_error_response, json_success_response, 
    html_error_fragment, html_success_fragment,
    json_form_error_response
)
from sqlalchemy import func, case, distinct
from datetime import datetime, timedelta

main = Blueprint("main", __name__)

@main.route("/")
def index():
    return render_template("index.html")

@main.route("/components")
def components_page():
    """Components management page"""
    return render_template("components.html")

# Health and utility endpoints
@main.route("/api/health")
def health_check():
    try:
        # Test database connection
        db.session.execute(db.text('SELECT 1'))
        return jsonify({
            "status": "ok", 
            "timestamp": datetime.utcnow().isoformat(),
            "database": "connected"
        })
    except Exception as e:
        return json_error_response(f"Health check failed: {str(e)}", 500)

# Count endpoints for dashboard metrics
@main.route("/api/count/agencies")
def count_agencies():
    try:
        count = Agency.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/functional-areas")
def count_functional_areas():
    try:
        count = FunctionalArea.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/components")
def count_components():
    try:
        count = Component.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/integration-points")
def count_integration_points():
    try:
        count = IntegrationPoint.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/vendors")
def count_vendors():
    try:
        count = Vendor.query.count()
        return str(count)
    except Exception as e:
        return "0"

# Components endpoints
@main.route("/api/components/list")
def components_list():
    """Get all components with filtering"""
    try:
        functional_area = request.args.get('functional_area')
        vendor = request.args.get('vendor')
        agency = request.args.get('agency')
        status = request.args.get('status')
        
        # Start with components and their implementations
        query = db.session.query(Component).distinct()
        
        # Apply filters
        if functional_area:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.function)\
                         .join(Function.functional_area)\
                         .filter(FunctionalArea.name == functional_area)
        
        if vendor:
            query = query.join(Vendor).filter(Vendor.name == vendor)
            
        if agency:
            query = query.join(Component.agency_usages)\
                         .join(AgencyFunctionImplementation.agency)\
                         .filter(Agency.name == agency)
        
        if status:
            if status == 'issues':
                query = query.filter(Component.known_issues.isnot(None))
            elif status == 'no_issues':
                query = query.filter(Component.known_issues.is_(None))
        
        components = query.all()
        
        html = ""
        for component in components:
            status_indicator = "red" if component.known_issues else "green"
            vendor_name = component.vendor.name if component.vendor else "No Vendor"
            
            # Get agencies that use this component
            agencies_using = db.session.query(Agency.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            agencies_display = ", ".join([a.name for a in agencies_using])
            if len(agencies_using) == 3:
                agencies_display += " +more"
            
            # Get functions this component implements
            functions_implemented = db.session.query(Function.name)\
                .join(AgencyFunctionImplementation)\
                .filter(AgencyFunctionImplementation.component_id == component.id)\
                .distinct().limit(3).all()
            
            functions_display = ", ".join([f.name for f in functions_implemented])
            if len(functions_implemented) == 3:
                functions_display += " +more"

            html += f'''
            <div class="component-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-4 hover:bg-slate-800/70 transition-all cursor-pointer"
                 data-component-id="{component.id}"
                 hx-get="/api/components/{component.id}/details" hx-target="#component-details" hx-swap="innerHTML">
                <div class="flex items-start justify-between">
                    <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                            <div class="w-3 h-3 bg-{status_indicator}-500 rounded-full"></div>
                            <h3 class="font-semibold text-white text-lg">{component.name}</h3>
                        </div>
                        <p class="text-slate-300 text-sm mb-2">{functions_display or 'No functions assigned'}</p>
                        <div class="flex items-center space-x-4 text-xs text-slate-400">
                            <span>🏢 {vendor_name}</span>
                            <span>🏛️ {agencies_display or 'No agencies'}</span>
                            <span>📅 {component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="bg-slate-700 px-2 py-1 rounded text-xs text-slate-300 mb-2">
                            v{component.version or 'Unknown'}
                        </div>
                        <div class="text-xs text-slate-500">
                            {component.update_frequency or 'Unknown'}
                        </div>
                    </div>
                </div>
                {f'<div class="mt-3 p-2 bg-red-900/20 border border-red-700/30 rounded text-xs text-red-300"><strong>Issues:</strong> {component.known_issues}</div>' if component.known_issues else ''}
            </div>
            '''
        
        if not html:
            html = '''
            <div class="text-center py-12">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500">Try adjusting your filters or add new components.</p>
            </div>
            '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components: {str(e)}")

@main.route("/api/components/<int:component_id>/details")
def component_details(component_id):
    """Get detailed information about a specific component"""
    try:
        component = Component.query.get_or_404(component_id)
        
        # Get agency implementations for this component
        implementations = AgencyFunctionImplementation.query\
            .filter_by(component_id=component_id)\
            .join(Agency).join(Function).join(FunctionalArea)\
            .order_by(Agency.name, FunctionalArea.name, Function.name)\
            .all()
        
        # Build agency usage section
        agency_usage_html = ""
        if implementations:
            agency_usage_html = "<h4 class='font-medium text-white mb-3'>Agency Usage:</h4>"
            
            # Group by agency
            agencies = {}
            for impl in implementations:
                agency_name = impl.agency.name
                if agency_name not in agencies:
                    agencies[agency_name] = []
                agencies[agency_name].append(impl)
            
            for agency_name, agency_impls in agencies.items():
                agency_usage_html += f'''
                <div class="mb-4">
                    <h5 class="text-sm font-medium text-blue-400 mb-2">{agency_name}</h5>
                    <div class="space-y-2 ml-3">
                '''
                for impl in agency_impls:
                    status_color = "green" if impl.status == "Active" else "yellow"
                    agency_usage_html += f'''
                    <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                            <span class="text-sm text-slate-300">{impl.function.name}</span>
                        </div>
                        <div class="text-right">
                            <span class="text-xs text-slate-500">
                                {impl.deployment_date.strftime('%Y-%m-%d') if impl.deployment_date else 'No date'}
                            </span>
                            {f'<br><span class="text-xs text-slate-400">v{impl.version}</span>' if impl.version else ''}
                        </div>
                    </div>
                    '''
                agency_usage_html += "</div></div>"
        else:
            agency_usage_html = "<p class='text-slate-400 text-sm'>No agency usage tracked for this component.</p>"
        
        # User roles (component-specific info)
        roles = ""
        if component.user_roles:
            roles = "<h4 class='font-medium text-white mb-2 mt-4'>User Roles:</h4><ul class='space-y-1'>"
            for role in component.user_roles:
                roles += f'<li class="text-sm text-slate-300">• {role.role_name}: {role.description or "No description"}</li>'
            roles += "</ul>"
        
        # Additional metadata
        metadata = ""
        if component.additional_metadata:
            metadata = "<h4 class='font-medium text-white mb-2 mt-4'>Additional Information:</h4><ul class='space-y-1'>"
            for key, value in component.additional_metadata.items():
                metadata += f'<li class="text-sm text-slate-300">• {key.replace("_", " ").title()}: {value}</li>'
            metadata += "</ul>"
        
        html = f'''
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-3">
                    <h2 class="text-2xl font-bold text-white">{component.name}</h2>
                    {f'<span class="px-2 py-1 bg-blue-600/20 border border-blue-600/30 rounded text-xs text-blue-300">Composite</span>' if component.is_composite else ''}
                </div>
                <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                        onclick="clearComponentDetails()">
                    ✕ Close
                </button>
            </div>
            
            <div class="grid grid-cols-1 gap-6">
                <div>
                    <h3 class="font-medium text-white mb-3">Component Information</h3>
                    <div class="space-y-2 text-sm">
                        <p class="text-slate-300"><strong>Version:</strong> {component.version or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Deployment Date:</strong> {component.deployment_date.strftime('%B %d, %Y') if component.deployment_date else "Unknown"}</p>
                        <p class="text-slate-300"><strong>Update Frequency:</strong> {component.update_frequency or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Vendor:</strong> {component.vendor.name if component.vendor else "No Vendor"}</p>
                    </div>
                    
                    {f'<div class="bg-red-900/20 border border-red-700/30 rounded p-3 mt-4"><h4 class="font-medium text-red-300 mb-2">Known Issues:</h4><p class="text-sm text-red-200">{component.known_issues}</p></div>' if component.known_issues else '<div class="bg-green-900/20 border border-green-700/30 rounded p-3 mt-4"><h4 class="font-medium text-green-300 mb-2">Status:</h4><p class="text-sm text-green-200">No known issues</p></div>'}
                    
                    <div class="mt-6">
                        {agency_usage_html}
                    </div>
                    
                    {roles}
                    {metadata}
                </div>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading component details: {str(e)}")
    
@main.route("/api/agencies/options")
def agencies_filter_options():
    """Get agency options for filter dropdowns"""
    try:
        # Get agencies that have component implementations
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

def clear_component_details_js():
    return '''
    <script>
    function clearComponentDetails() {
        // Reset component details panel
        document.getElementById('component-details').innerHTML = `
            <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
                <p class="text-slate-500 text-sm">Select a component to view details</p>
            </div>`;
        
        // Reset vendor details panel
        document.getElementById('vendor-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
        
        // Reset integration details panel
        document.getElementById('integration-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
    }
    </script>
    '''

# Vendors Management Routes
@main.route("/vendors")
def vendors_page():
    """Vendors management page"""
    return render_template("vendors.html")

@main.route("/api/vendors/list")
def vendors_list():
    """Get all vendors with enhanced filtering and component counts"""
    try:
        search = request.args.get('search', '').lower()
        sort_by = request.args.get('sort', 'name')
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base query with component counts
        query = db.session.query(
            Vendor,
            func.count(distinct(Component.id)).label('component_count')
        ).outerjoin(Component).group_by(Vendor.id)
        
        # Apply search filter
        if search:
            query = query.filter(Vendor.name.ilike(f'%{search}%'))
        
        # Apply agency filter
        if agency_filter:
            agency_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Agency)\
                .filter(Agency.name == agency_filter)
            
            query = query.filter(Component.id.in_(agency_component_ids.scalar_subquery()))
        
        # Apply functional area filter
        if functional_area_filter:
            fa_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Function)\
                .join(FunctionalArea)\
                .filter(FunctionalArea.name == functional_area_filter)
            
            query = query.filter(Component.id.in_(fa_component_ids.scalar_subquery()))
        
        # Apply sorting
        if sort_by == 'components':
            query = query.order_by(func.count(distinct(Component.id)).desc())
        elif sort_by == 'recent':
            # Sort by most recent component deployment
            subquery = db.session.query(
                Component.vendor_id,
                func.max(Component.deployment_date).label('latest_deployment')
            ).group_by(Component.vendor_id).subquery()
            
            query = query.outerjoin(subquery, Vendor.id == subquery.c.vendor_id)\
                         .order_by(subquery.c.latest_deployment.desc().nullslast())
        else:
            query = query.order_by(Vendor.name)
        
        vendors_with_counts = query.all()
        
        for vendor, component_count in vendors_with_counts:
            vendor.component_count = component_count
        
        return render_template('fragments/vendor_list.html', 
                             vendors_with_counts=vendors_with_counts)
    except Exception as e:
        return html_error_fragment(f"Error loading vendors: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/details")
def vendor_details(vendor_id):
    """Get detailed information about a specific vendor"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        
        # Get components grouped by functional area
        components_by_area = {}
        
        components_query = db.session.query(Component, FunctionalArea.name.label('area_name'))\
            .filter(Component.vendor_id == vendor_id)\
            .join(AgencyFunctionImplementation, Component.agency_usages)\
            .join(Function, AgencyFunctionImplementation.function)\
            .join(FunctionalArea, Function.functional_area)\
            .distinct(Component.id, FunctionalArea.name)\
            .all()
        
        for component, area_name in components_query:
            if area_name not in components_by_area:
                components_by_area[area_name] = []
            if component not in components_by_area[area_name]:
                components_by_area[area_name].append(component)
        
        # Get vendor statistics
        total_components = Component.query.filter_by(vendor_id=vendor_id).count()
        components_with_issues = Component.query.filter_by(vendor_id=vendor_id).filter(Component.known_issues.isnot(None)).count()
        recent_deployments = Component.query.filter_by(vendor_id=vendor_id)\
            .filter(Component.deployment_date >= datetime.now().date() - timedelta(days=365)).count()
        
        # Get integration standards
        vendor_components = Component.query.filter_by(vendor_id=vendor_id).all()
        integration_standards = set()
        for component in vendor_components:
            for integration_point in component.integration_points:
                for standard in integration_point.standards:
                    integration_standards.add(standard.name)
        
        vendor.total_components = total_components
        vendor.components_with_issues = components_with_issues
        vendor.recent_deployments = recent_deployments
        vendor.integration_standards = list(integration_standards)
        vendor.components_by_area = components_by_area
        
        return render_template('fragments/vendor_details.html', vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading vendor details: {str(e)}")

@main.route("/api/vendors/form")
def vendor_form():
    """Return new vendor form"""
    try:
        form = VendorForm()
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/form")
def vendor_edit_form(vendor_id):
    """Return edit vendor form"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        form.populate_from_vendor(vendor)
        
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/vendors", methods=['POST'])
@login_required
def create_vendor():
    """Create a new vendor with JSON response"""
    try:
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Vendor.query.filter_by(name=form.name.data).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Create new vendor
            vendor = Vendor()
            form.populate_vendor(vendor)
            
            db.session.add(vendor)
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' created successfully")
        else:
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error creating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['POST'])
@login_required
def update_vendor(vendor_id):
    """Update an existing vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current vendor)
            existing = Vendor.query.filter(
                Vendor.name == form.name.data,
                Vendor.id != vendor_id
            ).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Update vendor
            form.populate_vendor(vendor)
            
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' updated successfully")
        else:
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error updating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['DELETE'])
@login_required
def delete_vendor(vendor_id):
    """Delete a vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        name = vendor.name
        
        # Check if vendor has components (prevent deletion)
        component_count = Component.query.filter_by(vendor_id=vendor_id).count()
        if component_count > 0:
            return json_error_response(
                f"Cannot delete vendor '{name}' because it has {component_count} associated components. "
                f"Please reassign or delete the components first."
            )
        
        # Delete the vendor
        db.session.delete(vendor)
        db.session.commit()
        
        return json_success_response(f"Vendor '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error deleting vendor: {str(e)}")

@main.route("/api/vendors/stats")
def vendors_stats():
    """Get vendor statistics for dashboard with optional filtering"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor query
        vendor_query = db.session.query(Vendor)
        
        # Apply filters to get relevant vendors
        if agency_filter or functional_area_filter:
            component_subquery = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_subquery = component_subquery\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                if not agency_filter:
                    component_subquery = component_subquery.join(AgencyFunctionImplementation)
                component_subquery = component_subquery\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Fix: Use scalar_subquery() to avoid SQLAlchemy warning
            vendor_ids_subquery = component_subquery.scalar_subquery()
            vendor_query = vendor_query.filter(Vendor.id.in_(vendor_ids_subquery))
        
        stats = {
            'total_vendors': vendor_query.count(),
            'active_vendors': vendor_query.join(Component).distinct().count(),
            'top_vendor': None,
            'avg_components_per_vendor': 0
        }
        
        # Get top vendor within filtered set
        top_vendor_query = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)
        
        if agency_filter or functional_area_filter:
            # Apply same filter to top vendor query
            vendor_ids_list = [v.id for v in vendor_query.all()]
            if vendor_ids_list:
                top_vendor_query = top_vendor_query.filter(Vendor.id.in_(vendor_ids_list))
        
        top_vendor_result = top_vendor_query.group_by(Vendor.id, Vendor.name)\
                                          .order_by(func.count(Component.id).desc())\
                                          .first()
        
        if top_vendor_result:
            stats['top_vendor'] = {
                'name': top_vendor_result.name,
                'component_count': top_vendor_result.component_count
            }
        
        # Calculate average components per vendor
        if stats['active_vendors'] > 0:
            total_components_query = db.session.query(func.count(Component.id))\
                .filter(Component.vendor_id.isnot(None))
            
            if agency_filter or functional_area_filter:
                vendor_ids_list = [v.id for v in vendor_query.all()]
                if vendor_ids_list:
                    total_components_query = total_components_query\
                        .filter(Component.vendor_id.in_(vendor_ids_list))
            
            total_components = total_components_query.scalar()
            stats['avg_components_per_vendor'] = round(total_components / stats['active_vendors'], 1)
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting vendor stats: {str(e)}")

@main.route("/api/integration/standards")
def integration_standards():
    """Get most common integration standards"""
    try:
        # Get standards from the Standards table
        standards = db.session.query(
            Standard.name,
            func.count(IntegrationPoint.id).label('usage_count')
        ).join(Standard.integration_points)\
         .group_by(Standard.name)\
         .order_by(func.count(IntegrationPoint.id).desc())\
         .limit(5).all()
        
        html = ""
        for standard, count in standards:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-cyan-600/10 border border-cyan-600/20 rounded">
                <span class="text-sm text-cyan-300">{standard}</span>
                <span class="text-xs text-cyan-400">{count} uses</span>
            </div>
            '''
        
        if not html:
            html = '<div class="text-center text-slate-500 text-sm py-4">No integration standards found</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center text-slate-500 text-sm py-4">Error loading standards</div>'

@main.route("/api/vendors/performance")
def vendor_performance():
    """Get vendor performance insights with filtering support"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor filter condition
        vendor_filter_condition = True
        
        if agency_filter or functional_area_filter:
            # Build subquery for vendor IDs that match filters
            component_query = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_query = component_query\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                if not agency_filter:
                    component_query = component_query.join(AgencyFunctionImplementation)
                component_query = component_query\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Get list of vendor IDs that match the filters
            vendor_ids_list = [row[0] for row in component_query.all() if row[0] is not None]
            if vendor_ids_list:
                vendor_filter_condition = Vendor.id.in_(vendor_ids_list)
            else:
                vendor_filter_condition = False  # No vendors match filters
        
        # Most reliable vendor (least issues)
        reliable_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('total_components'),
            func.sum(case((Component.known_issues.isnot(None), 1), else_=0)).label('issues_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .having(func.count(Component.id) > 0)\
         .order_by((func.sum(case((Component.known_issues.isnot(None), 1), else_=0)) / func.count(Component.id)).asc())\
         .first()
        
        # Newest vendor (most recent first deployment)
        newest_vendor = db.session.query(
            Vendor.name,
            func.min(Component.deployment_date).label('first_deployment')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.min(Component.deployment_date).desc())\
         .first()
        
        # Largest vendor (most components)
        largest_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(Component.id).desc())\
         .first()
        
        return jsonify({
            'most_reliable': reliable_vendor.name if reliable_vendor else 'N/A',
            'newest': newest_vendor.name if newest_vendor else 'N/A',
            'largest': largest_vendor.name if largest_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting vendor performance: {str(e)}")

@main.route("/api/components/overview")
def components_overview():
    try:
        components = Component.query.join(FunctionalArea).join(Vendor).limit(10).all()
        
        html = ""
        for component in components:
            status_color = "green" if component.known_issues is None else "yellow"
            html += f"""
            <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:bg-slate-800/70 transition-colors">
                <div class="flex items-center space-x-4">
                    <div class="w-3 h-3 bg-{status_color}-500 rounded-full"></div>
                    <div>
                        <h4 class="font-medium text-white">{component.name}</h4>
                        <p class="text-sm text-slate-400">{component.functional_area.name} • {component.vendor.name if component.vendor else 'No Vendor'}</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-sm text-slate-300">{component.version or 'No Version'}</p>
                    <p class="text-xs text-slate-500">{component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-12">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500 mb-4">Add your first agency to get started.</p>
                <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                    Add Component
                </button>
            </div>
            """
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components overview: {str(e)}")

@main.route("/api/vendors/top")
def top_vendors():
    try:
        vendors = db.session.query(Vendor, func.count(Component.id).label('component_count'))\
            .join(Component).group_by(Vendor.id).order_by(func.count(Component.id).desc()).limit(5).all()
        
        html = ""
        for vendor, count in vendors:
            html += f"""
            <div class="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
                <div>
                    <p class="font-medium text-white text-sm">{vendor.name}</p>
                    <p class="text-xs text-slate-400">{count} components</p>
                </div>
                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-white">{count}</span>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-6 text-slate-500">
                <p class="text-sm">No vendor data available</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error loading vendors</p></div>'

@main.route("/api/integration/health")
def integration_health():
    try:
        total_components = Component.query.count()
        integrated_components = db.session.query(Component).join(Component.integration_points).distinct().count()
        
        if total_components > 0:
            health_percentage = (integrated_components / total_components) * 100
        else:
            health_percentage = 0
        
        color = "green" if health_percentage >= 80 else "yellow" if health_percentage >= 50 else "red"
        
        html = f"""
        <div class="text-center">
            <div class="relative inline-flex items-center justify-center w-16 h-16 mb-4">
                <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path class="text-slate-700" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                    <path class="text-{color}-500" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="{health_percentage}, 100" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-white">{health_percentage:.0f}%</span>
                </div>
            </div>
            <h4 class="text-sm font-medium text-white mb-1">Integration Health</h4>
            <p class="text-xs text-slate-400">{integrated_components} of {total_components} components integrated</p>
        </div>
        """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error calculating health</p></div>'

@main.route("/api/activity/recent")
def recent_activity():
    try:
        recent_updates = UpdateLog.query.join(Component).order_by(UpdateLog.update_date.desc()).limit(10).all()
        
        html = ""
        for update in recent_updates:
            time_ago = datetime.utcnow() - update.update_date
            if time_ago.days > 0:
                time_str = f"{time_ago.days}d ago"
            elif time_ago.seconds > 3600:
                time_str = f"{time_ago.seconds // 3600}h ago"
            else:
                time_str = f"{time_ago.seconds // 60}m ago"
            
            html += f"""
            <div class="flex items-center space-x-4 p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-colors">
                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="flex-1">
                    <p class="text-sm font-medium text-white">{update.component.name} updated</p>
                    <p class="text-xs text-slate-400">{update.change_summary[:100] + '...' if update.change_summary and len(update.change_summary) > 100 else update.change_summary or 'No summary provided'}</p>
                    <p class="text-xs text-slate-500 mt-1">by {update.updated_by} • {time_str}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-8">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Recent Activity</h3>
                <p class="text-slate-500">Component updates will appear here.</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-8 text-slate-500"><p class="text-sm">Error loading activity</p></div>'

@main.route("/api/components/refresh")
def components_refresh():
    return components_overview()

# Agencies Management Routes
@main.route("/agencies")
def agencies_page():
    """Agencys management page"""
    return render_template("agencies.html")

@main.route("/api/agencies/list")
def agencies_list():
    """Get all agencys with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        query = Agency.query
        
        # Apply search filter
        if search:
            query = query.filter(Agency.name.ilike(f'%{search}%'))
        
        agencies = query.order_by(Agency.name).all()
        for agency in agencies:
            agency.logo_url = url_for('static', filename=f'images/transit_logos/{agency.short_name.lower().replace(" ", "_")}_logo.png')
            
        return render_template('fragments/agency_list.html', 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading agencys: {str(e)}")

@main.route("/api/agencies/<int:agency_id>/details")
def agency_details(agency_id):
    """Get detailed information about a specific agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png')

        
        return render_template('fragments/agency_details.html', 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading agency details: {str(e)}")

@main.route("/api/agencies/form")
def agency_form():
    """Return new agency form"""
    try:
        form = AgencyForm()
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")


@main.route("/api/agencies/<int:agency_id>/form")
def agency_edit_form(agency_id):
    """Return edit agency form"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        form.populate_from_agency(agency)
        
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/agencies", methods=['POST'])
@login_required
def create_agency():
    """Create a new agency"""
    try:
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Agency.query.filter_by(name=form.name.data).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Create new agency
            agency = Agency()
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.add(agency)
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' created successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=None)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating agency: {str(e)}")
    
@main.route("/api/agencies/<int:agency_id>", methods=['POST'])  # Note: Using POST with _method=PUT for HTMX
@login_required
def update_agency(agency_id):
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current agency)
            existing = Agency.query.filter(
                Agency.name == form.name.data,
                Agency.id != agency_id
            ).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Update agency
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' updated successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=agency)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating agency: {str(e)}")

@main.route("/api/agencies/<int:agency_id>", methods=['DELETE'])
@login_required
def delete_agency(agency_id):
    try:
        agency = Agency.query.get_or_404(agency_id)
        name = agency.name
        
        # Delete the agency (cascade will handle related records)
        db.session.delete(agency)
        db.session.commit()
        
        return html_success_fragment(f"Agency '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting agency: {str(e)}")
    
@main.route("/api/agencies/stats")
def agencies_stats():
    """Get agency statistics for dashboard"""
    try:
        # Total agencies
        total_agencies = Agency.query.count()
        
        # Active implementations
        active_implementations = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        
        # Average implementations per agency
        avg_implementations = 0
        if total_agencies > 0:
            total_implementations = AgencyFunctionImplementation.query.count()
            avg_implementations = round(total_implementations / total_agencies, 1)
        
        # Average vendors per agency (agencies that use components from different vendors)
        avg_vendors = 0
        if total_agencies > 0:
            # Count unique vendors per agency
            vendor_counts = db.session.query(
                AgencyFunctionImplementation.agency_id,
                func.count(func.distinct(Component.vendor_id)).label('vendor_count')
            ).join(Component)\
             .filter(Component.vendor_id.isnot(None))\
             .group_by(AgencyFunctionImplementation.agency_id)\
             .all()
            
            if vendor_counts:
                total_vendor_relationships = sum([count.vendor_count for count in vendor_counts])
                agencies_with_vendors = len(vendor_counts)
                avg_vendors = round(total_vendor_relationships / agencies_with_vendors, 1)
        
        # Most active agency (agency with most implementations)
        most_active = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('impl_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        stats = {
            'total_agencies': total_agencies,
            'active_implementations': active_implementations,
            'avg_implementations_per_agency': avg_implementations,
            'avg_vendors_per_agency': avg_vendors,
            'most_active_agency': most_active.name if most_active else 'N/A',
            'most_active_count': most_active.impl_count if most_active else 0
        }
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting agency stats: {str(e)}")

@main.route("/api/count/active-implementations")
def count_active_implementations():
    try:
        count = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/agencies/insights")
def agency_insights():
    """Get agency insights for the sidebar"""
    try:
        # Most tech-advanced agency
        tech_leader = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('tech_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most common functional area
        common_area = db.session.query(
            FunctionalArea.name,
            func.count(AgencyFunctionImplementation.id).label('usage_count')
        ).join(Function)\
         .join(AgencyFunctionImplementation)\
         .group_by(FunctionalArea.id, FunctionalArea.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most used vendor
        top_vendor = db.session.query(
            Vendor.name,
            func.count(AgencyFunctionImplementation.id).label('deployment_count')
        ).join(Component)\
         .join(AgencyFunctionImplementation)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        return jsonify({
            'tech_leader': tech_leader.name if tech_leader else 'N/A',
            'tech_leader_count': tech_leader.tech_count if tech_leader else 0,
            'common_area': common_area.name if common_area else 'N/A',
            'top_vendor': top_vendor.name if top_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting agency insights: {str(e)}")
    
# Functional Areas Management Routes
@main.route("/functional-areas")
def functional_areas_page():
    return render_template("functional_areas.html")

@main.route("/api/functional-areas/list")
def functional_areas_list():
    try:
        search = request.args.get('search', '').lower()
        
        # Simple query - no agency relationship anymore
        query = FunctionalArea.query
        
        # Apply search filter
        if search:
            query = query.filter(FunctionalArea.name.ilike(f'%{search}%'))
        
        # Order by functional area name only
        functional_areas = query.order_by(FunctionalArea.name).all()
        
        return render_template('fragments/functional_area_list.html', 
                             functional_areas=functional_areas)
    except Exception as e:
        return html_error_fragment(f"Error loading functional areas: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/details")
def functional_area_details(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        
        # Sort functions by criticality (high -> medium -> low) then by name
        criticality_order = {'high': 1, 'medium': 2, 'low': 3}
        sorted_functions = sorted(
            functional_area.functions,
            key=lambda f: (criticality_order.get(f.criticality.value, 4), f.name.lower())
        )
        
        # Add component count for each function
        for function in sorted_functions:
            function.component_count = len(function.components)
            function.agency_count = len(set(impl.agency for impl in function.agency_implementations))
        
        functional_area.sorted_functions = sorted_functions
        
        return render_template('fragments/functional_area_details.html', 
                             functional_area=functional_area)
    except Exception as e:
        return html_error_fragment(f"Error loading functional area details: {str(e)}")

@main.route("/api/functional-areas/form")
def functional_area_form():
    try:
        # Get all agencys for the dropdown
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=None, 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/form")
def functional_area_edit_form(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=functional_area,
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/functional-areas", methods=['POST'])
@login_required
def create_functional_area():
    try:
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency
        existing = FunctionalArea.query.filter_by(
            name=data['name'], 
            agency_id=agency_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Create new functional area
        functional_area = FunctionalArea(
            name=data['name'],
            description=data.get('description') or None,
            agency_id=agency_id
        )
        
        db.session.add(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' created successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['PUT'])
@login_required
def update_functional_area(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        if not data.get('agency_id'):
            return html_error_fragment("Agency is required")
        
        try:
            agency_id = int(data['agency_id'])
        except ValueError:
            return html_error_fragment("Invalid agency selected")
        
        # Verify agency exists
        agency = Agency.query.get(agency_id)
        if not agency:
            return html_error_fragment("Selected agency does not exist")
        
        # Check for duplicate names within the same agency (excluding current area)
        existing = FunctionalArea.query.filter(
            FunctionalArea.name == data['name'],
            FunctionalArea.agency_id == agency_id,
            FunctionalArea.id != functional_area_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists in {agency.name}")
        
        # Update functional area
        functional_area.name = data['name']
        functional_area.description = data.get('description') or None
        functional_area.agency_id = agency_id
        
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' updated successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['DELETE'])
@login_required
def delete_functional_area(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        name = functional_area.name
        agency_name = functional_area.agency.name
        
        # Delete the functional area (cascade will handle related records)
        db.session.delete(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{name}' from {agency_name} deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting functional area: {str(e)}")

@main.route("/api/count/functions")
def count_functions():
    try:
        count = Function.query.count()
        return str(count)
    except Exception as e:
        return "0"
    

@main.route('/contribute')
def contribute():
    return render_template('contribute.html')

@main.route("/api/filter-options/functional-areas")
def functional_areas_filter_options():
    """Get functional area options that have associated components"""
    try:
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Component)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/filter-options/vendors")
def vendors_filter_options():
    """Get vendor options that have associated components"""
    try:
        vendors = db.session.query(Vendor.name)\
            .join(Component)\
            .distinct()\
            .order_by(Vendor.name)\
            .all()
        
        html = '<option value="">All Vendors</option>'
        for vendor in vendors:
            html += f'<option value="{vendor.name}">{vendor.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Vendors</option>'
    
@main.route("/api/vendors/filter-options/agencies")
def vendor_agencies_filter_options():
    """Get agencies that have vendor relationships for filter dropdown"""
    try:
        # Find agencies that have components from vendors
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

@main.route("/api/vendors/filter-options/functional-areas")
def vendor_functional_areas_filter_options():
    """Get functional areas that have vendor relationships for filter dropdown"""
    try:
        # Find functional areas that have components from vendors
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Function)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/components/<int:component_id>/vendor")
def component_vendor_details(component_id):
    """Get vendor information for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.vendor:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No vendor assigned</span>
            </div>
            '''
        
        vendor = component.vendor
        website_link = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300">{vendor.website}</a>' if vendor.website else "No website"
        
        html = f'''
        <div class="space-y-3">
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Name</span>
                <span class="text-white font-medium">{vendor.name}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Website</span>
                <span class="text-white text-sm">{website_link}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Contact</span>
                <span class="text-white text-sm">{vendor.contact_email or vendor.contact_name or "Not provided"}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Phone</span>
                <span class="text-white text-sm">{vendor.contact_phone or vendor.vendor_phone or "Not provided"}</span>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading vendor info</span></div>'

@main.route("/api/components/<int:component_id>/integrations")
def component_integration_details(component_id):
    """Get integration points for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.integration_points:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No integrations configured</span>
            </div>
            '''
        
        html = '<div class="space-y-2">'
        for ip in component.integration_points:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                <span class="text-sm text-slate-300">{ip.name}</span>
                <span class="text-xs text-slate-500">{ip.integration_type or "Standard"}</span>
            </div>
            '''
        html += '</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading integrations</span></div>'

# End of app/routes/main.py

# Start of app/routes/agency.py
from flask import Blueprint, render_template, redirect, url_for, flash, request
from app import db
from app.models.tran import Agency
from app.forms.forms import AgencyForm

agency_bp = Blueprint('agency', __name__, url_prefix='/agencies')

@agency_bp.route('/new', methods=['GET', 'POST'])
def add_agency():
    form = AgencyForm()
    if form.validate_on_submit():
        # Check for duplicate agency name
        existing = Agency.query.filter_by(name=form.name.data).first()
        if existing:
            flash('An agency with this name already exists.', 'danger')
            return render_template('fragments/agency_form.html', form=form)
        agency = Agency()
        form.populate_agency(agency)
        db.session.add(agency)
        try:
            db.session.commit()
            flash('Agency added successfully!', 'success')
            return redirect(url_for('main.index'))  # Adjust as needed
        except Exception as e:
            db.session.rollback()
            flash('Error adding agency: {}'.format(str(e)), 'danger')
    return render_template('fragments/agency_form.html', form=form)

# End of app/routes/agency.py

# Start of app/models/__init__.py
# Example model - create more files in app/models/ as needed
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String
from app import db

# Import existing models
from .tran import (
    Agency, FunctionalArea, Vendor, Component, Function,
    IntegrationPoint, UserRole, UpdateLog, Standard, TagGroup, Tag,
    AgencyFunctionImplementation
)

# Import GTFS models
from .gtfs import (
    GTFSAgency, GTFSStop, GTFSRoute, GTFSCalendar, GTFSCalendarDate,
    GTFSTrip, GTFSStopTime, GTFSShape, GTFSFeedInfo,
    GTFSFareMedia, GTFSRiderCategory, GTFSFareProduct, 
    GTFSTimeframe, GTFSFareLegRule, GTFSFareTransferRule
)

__all__ = [
    # Base models
    'Agency', 'FunctionalArea', 'Function', 'Vendor', 'Component',
    'IntegrationPoint', 'UserRole', 'UpdateLog', 'Standard', 'TagGroup', 'Tag',
    'AgencyFunctionImplementation',
    
    # GTFS models  
    'GTFSAgency', 'GTFSStop', 'GTFSRoute', 'GTFSCalendar', 'GTFSCalendarDate',
    'GTFSTrip', 'GTFSStopTime', 'GTFSShape', 'GTFSFeedInfo',
    'GTFSFareMedia', 'GTFSRiderCategory', 'GTFSFareProduct', 
    'GTFSTimeframe', 'GTFSFareLegRule', 'GTFSFareTransferRule'
]


# End of app/models/__init__.py

# Start of app/models/tran.py
# models/tran.py

from datetime import datetime
from app import db
import enum

# Association Tables
component_integration = db.Table(
    'component_integration',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True)
)

function_component = db.Table(
    'function_component',
    db.Column('function_id', db.Integer, db.ForeignKey('functions.id'), primary_key=True),
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True)
)

component_tag = db.Table(
    'component_tag',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_tag = db.Table(
    'integration_tag',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_standard = db.Table(
    'integration_standard',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('standard_id', db.Integer, db.ForeignKey('standards.id'), primary_key=True)
)

# Enums
class Criticality(enum.Enum):
    high = "high"
    medium = "medium"
    low = "low"

# Core Models
class Agency(db.Model):
    __tablename__ = 'agencies'

    # TODO: Enhance sizing metrics for agencies: routes, riders, budget; currently stored in additional metadata json

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    location = db.Column(db.String(100))
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))
    ceo = db.Column(db.String(128))
    address_hq = db.Column(db.String(256))
    phone_number = db.Column(db.String(64))
    transit_map_link = db.Column(db.String(256))
    contact_email = db.Column(db.String(255)) #TODO: Create field to store agency email domain
    contact_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    short_name = db.Column(db.String(50)) # TODO: use short name for constructing agency specific URLs for images, etc.
    additional_metadata = db.Column(db.JSON)
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_transit_system_name'),
    )

    function_implementations = db.relationship('AgencyFunctionImplementation', back_populates='agency', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Agency(name={self.name}, location={self.location})>"
    
    #@property
    #def logo_url(self):
    #    """Generate agency logo URL"""
    #    from flask import url_for
    #    if self.short_name:
    #        return url_for('static', filename=f'images/agency_logos/{self.short_name.lower().replace(" ", "_")}_logo.png')
    #    return None
    
    #@property
    #def header_url(self):
    #    """Generate agency header URL"""
    #    from flask import url_for
    #    if self.short_name:
    #        return url_for('static', filename=f'images/agency_headers/{self.short_name.lower().replace(" ", "_")}_header.png')
    #    return None

class FunctionalArea(db.Model):
    __tablename__ = 'functional_areas'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    functions = db.relationship('Function', back_populates='functional_area', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<FunctionalArea(name={self.name})>"

class Function(db.Model):
    __tablename__ = 'functions'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    criticality = db.Column(db.Enum(Criticality), default=Criticality.medium, nullable=False)

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'), nullable=False)
    functional_area = db.relationship('FunctionalArea', back_populates='functions')

    components = db.relationship('Component', secondary='function_component', back_populates='functions')
    agency_implementations = db.relationship('AgencyFunctionImplementation', back_populates='function', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Function(name={self.name}, criticality={self.criticality.value})>"

class Vendor(db.Model):
    __tablename__ = 'vendors'
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_vendor_name'),
    )

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    short_name = db.Column(db.String(50))
    website = db.Column(db.String(255))
    vendor_email = db.Column(db.String(255)) #TODO: Create field to store vendor email domain 
    vendor_phone = db.Column(db.String(50))
    description = db.Column(db.String(500))

    components = db.relationship('Component', back_populates='vendor', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Vendor(name={self.name})>"
    
    @property
    def logo_url(self):
        """Generate vendor logo URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_logos/{self.short_name.lower().replace(" ", "_")}_logo.png')
        return None
    
    @property
    def header_url(self):
        """Generate vendor header URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_headers/{self.short_name.lower().replace(" ", "_")}_header.png')
        return None

class Component(db.Model):
    __tablename__ = 'components'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(1000))
    version = db.Column(db.String(50))
    deployment_date = db.Column(db.Date)
    update_frequency = db.Column(db.String(50))
    known_issues = db.Column(db.String(500))
    additional_metadata = db.Column(db.JSON)
    # Component nesting functionality
    parent_component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=True)
    parent_component = db.relationship('Component', remote_side=[id], backref='child_components')
    is_composite = db.Column(db.Boolean, default=False, nullable=False)
    vendor_id = db.Column(db.Integer, db.ForeignKey('vendors.id'), nullable=True)

    vendor = db.relationship('Vendor', back_populates='components')
    functions = db.relationship('Function', secondary='function_component', back_populates='components')
    integration_points = db.relationship('IntegrationPoint', secondary='component_integration', back_populates='components')
    tags = db.relationship('Tag', secondary='component_tag', back_populates='components')
    user_roles = db.relationship('UserRole', back_populates='component', cascade='all, delete-orphan')
    update_logs = db.relationship('UpdateLog', back_populates='component', cascade='all, delete-orphan')
    agency_usages = db.relationship('AgencyFunctionImplementation', back_populates='component', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Component(name={self.name}, version={self.version})>"
    
class AgencyFunctionImplementation(db.Model):
    __tablename__ = 'agency_function_implementations'
    
    id = db.Column(db.Integer, primary_key=True)
    agency_id = db.Column(db.Integer, db.ForeignKey('agencies.id'), nullable=False)
    function_id = db.Column(db.Integer, db.ForeignKey('functions.id'), nullable=False)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    
    # Agency-specific deployment details
    deployment_date = db.Column(db.Date)
    version = db.Column(db.String(50))
    deployment_notes = db.Column(db.String(1000))
    status = db.Column(db.String(50), default='Active')  # Active, Planned, Retired
    implementation_notes = db.Column(db.String(1000))
    additional_metadata = db.Column(db.JSON)
    
    # Relationships
    agency = db.relationship('Agency', back_populates='function_implementations')
    function = db.relationship('Function', back_populates='agency_implementations')  
    component = db.relationship('Component', back_populates='agency_usages')
    
    # Unique constraint
    __table_args__ = (
        db.UniqueConstraint('agency_id', 'function_id', 'component_id', 
                          name='uq_agency_function_component'),
    )
    
    def __repr__(self):
        return f"<AgencyFunctionImplementation(agency={self.agency.name if self.agency else None}, function={self.function.name if self.function else None}, component={self.component.name if self.component else None})>"

class IntegrationPoint(db.Model):
    __tablename__ = 'integration_points'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))

    standards = db.relationship('Standard', secondary=integration_standard, back_populates='integration_points')
    components = db.relationship('Component', secondary='component_integration', back_populates='integration_points')
    tags = db.relationship('Tag', secondary=integration_tag, back_populates='integration_points')

    def __repr__(self):
        return f"<IntegrationPoint(name={self.name})>"

class Standard(db.Model):
    __tablename__ = 'standards'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))
    version = db.Column(db.String(50))
    standard_url = db.Column(db.String(255))

    integration_points = db.relationship('IntegrationPoint', secondary=integration_standard, back_populates='standards')

    def __repr__(self):
        return f"<Standard(name={self.name}, version={self.version})>"

class TagGroup(db.Model):
    __tablename__ = 'tag_groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))

    tags = db.relationship('Tag', back_populates='tag_group', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TagGroup(name={self.name})>"

class Tag(db.Model):
    __tablename__ = 'tags'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    color = db.Column(db.String(20))

    tag_group_id = db.Column(db.Integer, db.ForeignKey('tag_groups.id'), nullable=False)
    tag_group = db.relationship('TagGroup', back_populates='tags')

    components = db.relationship('Component', secondary='component_tag', back_populates='tags')
    integration_points = db.relationship('IntegrationPoint', secondary=integration_tag, back_populates='tags')

    def __repr__(self):
        return f"<Tag(name={self.name})>"
    
class UserRole(db.Model):
    __tablename__ = 'user_roles'

    id = db.Column(db.Integer, primary_key=True)
    role_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    component_id = db.Column(db.Integer, db.ForeignKey('components.id'))
    component = db.relationship('Component', back_populates='user_roles')

    def __repr__(self):
        return f"<UserRole(role_name={self.role_name})>"

class UpdateLog(db.Model):
    __tablename__ = 'update_logs'

    id = db.Column(db.Integer, primary_key=True)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    updated_by = db.Column(db.String(100), nullable=False)
    update_date = db.Column(db.DateTime, default=datetime.utcnow)
    change_summary = db.Column(db.String(1000))

    component = db.relationship('Component', back_populates='update_logs')

    def __repr__(self):
        return f"<UpdateLog(component_id={self.component_id}, updated_by={self.updated_by})>"

# End of app/models/tran.py

# Start of app/models/gtfs.py
# app/models/gtfs.py
from sqlalchemy import String, Integer, Float, Date, Time, Boolean, Text, ForeignKey, DECIMAL
from sqlalchemy.orm import Mapped, mapped_column, relationship
from typing import Optional
from datetime import date, time
from app import db

# GTFS Models with prefix to avoid naming conflicts
class GTFSAgency(db.Model):
    __tablename__ = "gtfs_agency"
    
    agency_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    agency_name: Mapped[str] = mapped_column(String(255), nullable=False)
    agency_url: Mapped[str] = mapped_column(String(500), nullable=False)
    agency_timezone: Mapped[str] = mapped_column(String(50), nullable=False)
    agency_lang: Mapped[Optional[str]] = mapped_column(String(10))
    agency_phone: Mapped[Optional[str]] = mapped_column(String(50))
    agency_fare_url: Mapped[Optional[str]] = mapped_column(String(500))
    
    # Relationships
    routes: Mapped[list["GTFSRoute"]] = relationship(back_populates="agency")


class GTFSStop(db.Model):
    __tablename__ = "gtfs_stops"
    
    stop_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    stop_code: Mapped[Optional[str]] = mapped_column(String(50))
    stop_name: Mapped[str] = mapped_column(String(255), nullable=False)
    stop_desc: Mapped[Optional[str]] = mapped_column(Text)
    stop_lat: Mapped[float] = mapped_column(Float, nullable=False)
    stop_lon: Mapped[float] = mapped_column(Float, nullable=False)
    zone_id: Mapped[Optional[str]] = mapped_column(String(50))
    stop_url: Mapped[Optional[str]] = mapped_column(String(500))
    location_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    parent_station: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_stops.stop_id"))
    stop_timezone: Mapped[Optional[str]] = mapped_column(String(50))
    wheelchair_boarding: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    
    # Self-referential relationship for parent station
    child_stops: Mapped[list["GTFSStop"]] = relationship(remote_side=[stop_id])
    
    # Relationships
    stop_times: Mapped[list["GTFSStopTime"]] = relationship(back_populates="stop")


class GTFSRoute(db.Model):
    __tablename__ = "gtfs_routes"
    
    route_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    agency_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_agency.agency_id"), nullable=False)
    route_short_name: Mapped[Optional[str]] = mapped_column(String(50))
    route_long_name: Mapped[str] = mapped_column(String(255), nullable=False)
    route_desc: Mapped[Optional[str]] = mapped_column(Text)
    route_type: Mapped[int] = mapped_column(Integer, nullable=False)
    route_url: Mapped[Optional[str]] = mapped_column(String(500))
    route_color: Mapped[Optional[str]] = mapped_column(String(6), default="FFFFFF")
    route_text_color: Mapped[Optional[str]] = mapped_column(String(6), default="000000")
    route_sort_order: Mapped[Optional[int]] = mapped_column(Integer)
    network_id: Mapped[Optional[str]] = mapped_column(String(50))
    
    # Relationships
    agency: Mapped["GTFSAgency"] = relationship(back_populates="routes")
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="route")


class GTFSCalendar(db.Model):
    __tablename__ = "gtfs_calendar"
    
    service_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    monday: Mapped[int] = mapped_column(Integer, nullable=False)
    tuesday: Mapped[int] = mapped_column(Integer, nullable=False)
    wednesday: Mapped[int] = mapped_column(Integer, nullable=False)
    thursday: Mapped[int] = mapped_column(Integer, nullable=False)
    friday: Mapped[int] = mapped_column(Integer, nullable=False)
    saturday: Mapped[int] = mapped_column(Integer, nullable=False)
    sunday: Mapped[int] = mapped_column(Integer, nullable=False)
    start_date: Mapped[date] = mapped_column(Date, nullable=False)
    end_date: Mapped[date] = mapped_column(Date, nullable=False)
    
    # Relationships
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="calendar")
    calendar_dates: Mapped[list["GTFSCalendarDate"]] = relationship(back_populates="calendar")


class GTFSCalendarDate(db.Model):
    __tablename__ = "gtfs_calendar_dates"
    
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), primary_key=True)
    date: Mapped[date] = mapped_column(Date, primary_key=True)
    exception_type: Mapped[int] = mapped_column(Integer, nullable=False)
    
    # Relationships
    calendar: Mapped["GTFSCalendar"] = relationship(back_populates="calendar_dates")


class GTFSTrip(db.Model):
    __tablename__ = "gtfs_trips"
    
    trip_id: Mapped[str] = mapped_column(String(100), primary_key=True)
    route_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_routes.route_id"), nullable=False)
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), nullable=False)
    trip_headsign: Mapped[Optional[str]] = mapped_column(String(255))
    trip_short_name: Mapped[Optional[str]] = mapped_column(String(50))
    direction_id: Mapped[Optional[int]] = mapped_column(Integer)
    block_id: Mapped[Optional[str]] = mapped_column(String(50))
    shape_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_shapes.shape_id"))
    wheelchair_accessible: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    bikes_allowed: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    
    # Relationships
    route: Mapped["GTFSRoute"] = relationship(back_populates="trips")
    calendar: Mapped["GTFSCalendar"] = relationship(back_populates="trips")
    shape: Mapped[Optional["GTFSShape"]] = relationship(back_populates="trips")
    stop_times: Mapped[list["GTFSStopTime"]] = relationship(back_populates="trip")


class GTFSStopTime(db.Model):
    __tablename__ = "gtfs_stop_times"
    
    trip_id: Mapped[str] = mapped_column(String(100), ForeignKey("gtfs_trips.trip_id"), primary_key=True)
    arrival_time: Mapped[time] = mapped_column(Time, nullable=False)
    departure_time: Mapped[time] = mapped_column(Time, nullable=False)
    stop_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_stops.stop_id"), nullable=False)
    stop_sequence: Mapped[int] = mapped_column(Integer, primary_key=True)
    stop_headsign: Mapped[Optional[str]] = mapped_column(String(255))
    pickup_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    drop_off_type: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    shape_dist_traveled: Mapped[Optional[float]] = mapped_column(Float)
    timepoint: Mapped[Optional[int]] = mapped_column(Integer, default=1)
    
    # Relationships
    trip: Mapped["GTFSTrip"] = relationship(back_populates="stop_times")
    stop: Mapped["GTFSStop"] = relationship(back_populates="stop_times")


class GTFSShape(db.Model):
    __tablename__ = "gtfs_shapes"
    
    shape_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    shape_pt_lat: Mapped[float] = mapped_column(Float, primary_key=True)
    shape_pt_lon: Mapped[float] = mapped_column(Float, primary_key=True)
    shape_pt_sequence: Mapped[int] = mapped_column(Integer, primary_key=True)
    shape_dist_traveled: Mapped[Optional[float]] = mapped_column(Float)
    
    # Relationships
    trips: Mapped[list["GTFSTrip"]] = relationship(back_populates="shape")


class GTFSFeedInfo(db.Model):
    __tablename__ = "gtfs_feed_info"
    
    feed_publisher_name: Mapped[str] = mapped_column(String(255), primary_key=True)
    feed_publisher_url: Mapped[str] = mapped_column(String(500), nullable=False)
    feed_lang: Mapped[str] = mapped_column(String(10), nullable=False)
    feed_start_date: Mapped[Optional[date]] = mapped_column(Date)
    feed_end_date: Mapped[Optional[date]] = mapped_column(Date)
    feed_version: Mapped[Optional[str]] = mapped_column(String(50))
    feed_contact_email: Mapped[Optional[str]] = mapped_column(String(255))
    feed_contact_url: Mapped[Optional[str]] = mapped_column(String(500))


# GTFS-Fares v2 Tables
class GTFSFareMedia(db.Model):
    __tablename__ = "gtfs_fare_media"
    
    fare_media_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_media_name: Mapped[Optional[str]] = mapped_column(String(255))
    fare_media_type: Mapped[int] = mapped_column(Integer, nullable=False)
    
    # Relationships
    fare_products: Mapped[list["GTFSFareProduct"]] = relationship(back_populates="fare_media")


class GTFSRiderCategory(db.Model):
    __tablename__ = "gtfs_rider_categories"
    
    rider_category_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    rider_category_name: Mapped[Optional[str]] = mapped_column(String(255))
    is_default_fare_category: Mapped[Optional[int]] = mapped_column(Integer, default=0)
    min_age: Mapped[Optional[int]] = mapped_column(Integer)
    max_age: Mapped[Optional[int]] = mapped_column(Integer)
    eligibility_url: Mapped[Optional[str]] = mapped_column(String(500))
    
    # Relationships
    fare_products: Mapped[list["GTFSFareProduct"]] = relationship(back_populates="rider_category")


class GTFSFareProduct(db.Model):
    __tablename__ = "gtfs_fare_products"
    
    fare_product_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_product_name: Mapped[Optional[str]] = mapped_column(String(255))
    rider_category_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_rider_categories.rider_category_id"))
    fare_media_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_fare_media.fare_media_id"))
    amount: Mapped[DECIMAL] = mapped_column(DECIMAL(10, 2), nullable=False)
    currency: Mapped[str] = mapped_column(String(3), nullable=False)
    
    # Relationships
    rider_category: Mapped[Optional["GTFSRiderCategory"]] = relationship(back_populates="fare_products")
    fare_media: Mapped[Optional["GTFSFareMedia"]] = relationship(back_populates="fare_products")
    fare_leg_rules: Mapped[list["GTFSFareLegRule"]] = relationship(back_populates="fare_product")
    fare_transfer_rules: Mapped[list["GTFSFareTransferRule"]] = relationship(back_populates="fare_product")


class GTFSTimeframe(db.Model):
    __tablename__ = "gtfs_timeframes"
    
    timeframe_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    start_time: Mapped[time] = mapped_column(Time, primary_key=True)
    end_time: Mapped[time] = mapped_column(Time, primary_key=True)
    service_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_calendar.service_id"), nullable=False)
    
    fare_leg_rules_from: Mapped[list["GTFSFareLegRule"]] = relationship(
        back_populates="from_timeframe",
        cascade="all, delete-orphan",
        foreign_keys="GTFSFareLegRule.from_timeframe_group_id"
    )
    fare_leg_rules_to: Mapped[list["GTFSFareLegRule"]] = relationship(
        back_populates="to_timeframe",
        cascade="all, delete-orphan",
        foreign_keys="GTFSFareLegRule.to_timeframe_group_id"
    )


class GTFSFareLegRule(db.Model):
    __tablename__ = "gtfs_fare_leg_rules"
    
    leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    network_id: Mapped[Optional[str]] = mapped_column(String(50))
    fare_product_id: Mapped[str] = mapped_column(String(50), ForeignKey("gtfs_fare_products.fare_product_id"), primary_key=True)
    from_timeframe_group_id: Mapped[Optional[str]] = mapped_column(
        String(50),
        ForeignKey("gtfs_timeframes.timeframe_group_id"),
        primary_key=True
    )
    to_timeframe_group_id: Mapped[Optional[str]] = mapped_column(
        String(50),
        ForeignKey("gtfs_timeframes.timeframe_group_id")
    )
    
    # Relationships
    fare_product: Mapped["GTFSFareProduct"] = relationship(back_populates="fare_leg_rules")

    from_timeframe: Mapped[Optional["GTFSTimeframe"]] = relationship(
        back_populates="fare_leg_rules_from",
        foreign_keys=[from_timeframe_group_id]
    )
    to_timeframe: Mapped[Optional["GTFSTimeframe"]] = relationship(
        back_populates="fare_leg_rules_to",
        foreign_keys=[to_timeframe_group_id]
    )


class GTFSFareTransferRule(db.Model):
    __tablename__ = "gtfs_fare_transfer_rules"
    
    from_leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    to_leg_group_id: Mapped[str] = mapped_column(String(50), primary_key=True)
    fare_product_id: Mapped[Optional[str]] = mapped_column(String(50), ForeignKey("gtfs_fare_products.fare_product_id"))
    transfer_count: Mapped[Optional[int]] = mapped_column(Integer)
    duration_limit: Mapped[Optional[int]] = mapped_column(Integer)
    duration_limit_type: Mapped[Optional[int]] = mapped_column(Integer)
    fare_transfer_type: Mapped[Optional[int]] = mapped_column(Integer)
    
    # Relationships
    fare_product: Mapped[Optional["GTFSFareProduct"]] = relationship(back_populates="fare_transfer_rules")
# End of app/models/gtfs.py

# Start of app/forms/__init__.py

# End of app/forms/__init__.py

# Start of app/forms/forms.py
# app/forms.py (create this file)
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, EmailField, URLField, TelField, FieldList, FormField
from wtforms.validators import DataRequired, Email, URL, Optional, Length
from wtforms.widgets import TextArea

class MetadataField(FlaskForm):
    """Sub-form for metadata key-value pairs"""
    key = StringField('Key', validators=[Optional(), Length(max=100)])
    value = StringField('Value', validators=[Optional(), Length(max=500)])

class AgencyForm(FlaskForm):
    """Form for creating and editing transit agencies"""
    # Basic Information
    name = StringField('Agency Name', 
                      validators=[DataRequired(message="Agency name is required"), 
                                Length(max=100, message="Name must be less than 100 characters")])
    location = StringField('Location', 
                          validators=[Optional(), Length(max=100)])
    description = TextAreaField('Description', 
                               validators=[Optional(), Length(max=500)],
                               widget=TextArea())
    address_hq = TextAreaField('Headquarters Address', 
                              validators=[Optional(), Length(max=256)],
                              widget=TextArea())
    ceo = StringField('Chief Executive Officer', 
                     validators=[Optional(), Length(max=128)])
    contact_name = StringField('Primary Contact Name', 
                              validators=[Optional(), Length(max=100)])
    contact_email = EmailField('Primary Contact Email', 
                              validators=[Optional(), Email(message="Please enter a valid email address")])
    contact_phone = TelField('Primary Contact Phone', 
                            validators=[Optional(), Length(max=50)])
    phone_number = TelField('Main Phone Number', 
                           validators=[Optional(), Length(max=64)])
    website = URLField('Official Website', 
                      validators=[Optional(), URL(message="Please enter a valid URL")])
    transit_map_link = URLField('Transit Map URL', 
                              validators=[Optional(), URL(message="Please enter a valid URL")])
    
    # Dynamic metadata fields will be handled separately in the template and route
    def populate_from_agency(self, agency):
        """Populate form with data from agency model"""
        self.name.data = agency.name
        self.location.data = agency.location
        self.description.data = agency.description
        self.address_hq.data = agency.address_hq
        self.ceo.data = agency.ceo
        self.contact_name.data = agency.contact_name
        self.contact_email.data = agency.contact_email
        self.contact_phone.data = agency.contact_phone
        self.phone_number.data = agency.phone_number
        self.website.data = agency.website
        self.transit_map_link.data = agency.transit_map_link
    
    def populate_agency(self, agency):
        """Populate agency model with form data"""
        agency.name = self.name.data
        agency.location = self.location.data or None
        agency.description = self.description.data or None
        agency.address_hq = self.address_hq.data or None
        agency.ceo = self.ceo.data or None
        agency.contact_name = self.contact_name.data or None
        agency.contact_email = self.contact_email.data or None
        agency.contact_phone = self.contact_phone.data or None
        agency.phone_number = self.phone_number.data or None
        agency.website = self.website.data or None
        agency.transit_map_link = self.transit_map_link.data or None

class VendorForm(FlaskForm):
    name = StringField('Vendor Name', validators=[DataRequired(), Length(min=2, max=100)])
    short_name = StringField('Short Name', validators=[Length(max=50)])
    description = TextAreaField('Description', validators=[Length(max=500)])
    website = URLField('Website', validators=[Optional(), URL()])
    vendor_email = StringField('General Email', validators=[Optional(), Email(), Length(max=255)])
    vendor_phone = StringField('General Phone', validators=[Optional(), Length(max=50)])
    
    def populate_from_vendor(self, vendor):
        """Populate form fields from vendor object"""
        self.name.data = vendor.name
        self.short_name.data = vendor.short_name
        self.description.data = vendor.description
        self.website.data = vendor.website
        self.vendor_email.data = vendor.vendor_email
        self.vendor_phone.data = vendor.vendor_phone
    
    def populate_vendor(self, vendor):
        """Populate vendor object from form data"""
        vendor.name = self.name.data
        vendor.short_name = self.short_name.data
        vendor.description = self.description.data
        vendor.website = self.website.data
        vendor.vendor_email = self.vendor_email.data
        vendor.vendor_phone = self.vendor_phone.data
# End of app/forms/forms.py

# Start of app/auth.py
# app/auth.py
from functools import wraps
from flask import request, jsonify, flash

# TODO: Add Microsoft login
# TODO: Add Google login
# TODO: Validate user email at registration, must be domain associated with a transit agency in the system

def login():
    pass

def register():
    pass

def validate_email():
    pass

def login_required(f):
    """
    Authentication decorator - currently a no-op stub for development
    Will be enhanced later with actual authentication logic
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # For now, just pass through - no authentication required
        # TODO: Add actual authentication logic here
        return f(*args, **kwargs)
    return decorated_function

def get_current_user():
    """
    Get current user context - currently returns stub user
    """
    return {
        'id': 1,
        'username': 'Steve',
        'display_name': 'Steve',
        'email': 'steve.smith@c-tran.org'
    }

def get_updated_by():
    """
    Get the updated_by string for audit logging
    """
    user = get_current_user()
    return user['display_name']
# End of app/auth.py

# Start of app/agents/__init__.py

# End of app/agents/__init__.py

# Start of app/agents/agency_agent.py
# This agent builds or updates an agency using a search LLM
# Gets data, description, news, contacts, web assets, logo, builds header image
# End of app/agents/agency_agent.py

# Start of app/agents/component_agent.py
# This agent builds or updates a vendor component using a search LLM
# Gets data, description, news, contacts, web assets, images
# Maps vendor sourcing and functions supported (calls vendor_agent)
# Maps to agencies with relationships
# End of app/agents/component_agent.py

# Start of app/utils/__init__.py

# End of app/utils/__init__.py

# Start of app/utils/errors.py
# app/utils/errors.py
from flask import jsonify, render_template_string

def json_error_response(message, status_code=400, details=None):
    """
    Return a JSON error response for API endpoints
    """
    response = {
        'status': 'error',
        'message': message
    }
    if details:
        response['details'] = details
    
    return jsonify(response), status_code

def json_success_response(message="Success", data=None):
    """
    Return a JSON success response for API endpoints
    """
    response = {
        'status': 'success',
        'message': message
    }
    if data:
        response['data'] = data
    
    return jsonify(response)

def json_validation_error_response(message="Validation failed", errors=None):
    """
    Return a JSON validation error response with field-specific errors
    """
    response = {
        'status': 'validation_error',
        'message': message
    }
    if errors:
        response['errors'] = errors
    
    return jsonify(response), 422

def json_form_error_response(form):
    """
    Convert Flask-WTF form errors to JSON response
    """
    errors = {}
    for field_name, field_errors in form.errors.items():
        errors[field_name] = field_errors[0] if field_errors else 'Invalid input'
    
    return json_validation_error_response("Please correct the errors below", errors)

def html_error_fragment(message, title="Error"):
    """
    Return an HTML error fragment for HTMX responses (legacy support)
    """
    template = '''
    <div class="bg-red-900/20 border border-red-700/30 rounded-lg p-4 mb-4">
        <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-red-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
            <div>
                <h4 class="text-red-300 font-medium">{{ title }}</h4>
                <p class="text-red-200 text-sm">{{ message }}</p>
            </div>
        </div>
    </div>
    '''
    return render_template_string(template, title=title, message=message)

def html_success_fragment(message, title="Success"):
    """
    Return an HTML success fragment for HTMX responses (legacy support)
    """
    template = '''
    <div class="bg-green-900/20 border border-green-700/30 rounded-lg p-4 mb-4">
        <div class="flex items-center space-x-3">
            <svg class="w-5 h-5 text-green-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <div>
                <h4 class="text-green-300 font-medium">{{ title }}</h4>
                <p class="text-green-200 text-sm">{{ message }}</p>
            </div>
        </div>
    </div>
    '''
    return render_template_string(template, title=title, message=message)
# End of app/utils/errors.py

# Start of app/utils/logging.py
# app/utils_logging.py
from flask import g, current_app, has_app_context
from flask_login import current_user
import functools

def log_with_context(level, message, **context):
    """Log a message with contextual information."""
    from flask import g, has_request_context
    
    # Get tenant ID - handle both dict and object cases
    tenant_id = None
    if hasattr(g, 'tenant') and g.tenant:
        if hasattr(g.tenant, 'id'):
            # g.tenant is a Tenant object
            tenant_id = g.tenant.id
        elif isinstance(g.tenant, dict):
            # g.tenant is a dictionary
            tenant_id = g.tenant.get('id')
    
    # Add tenant_id to context if available
    if tenant_id:
        context['tenant_id'] = tenant_id
    
    # Get user ID if available
    if hasattr(g, 'current_user') and g.current_user and hasattr(g.current_user, 'id'):
        context['user_id'] = g.current_user.id
    
    # Format the message with context
    if context:
        context_str = ' | '.join([f"{k}: {v}" for k, v in context.items()])
        formatted_message = f"{message} | {context_str}"
    else:
        formatted_message = message
    
    # Log at the appropriate level
    from flask import current_app
    logger = current_app.logger
    
    if level == 'debug':
        logger.debug(formatted_message)
    elif level == 'info':
        logger.info(formatted_message)
    elif level == 'warning':
        logger.warning(formatted_message)
    elif level == 'error':
        logger.error(formatted_message)
    else:
        logger.info(formatted_message)

# Convenience functions
def log_info(message, **context):
    log_with_context('info', message, **context)

def log_debug(message, **context):
    log_with_context('debug', message, **context)

def log_warning(message, **context):
    log_with_context('warning', message, **context)

def log_error(message, **context):
    log_with_context('error', message, **context)

def log_sms_event(event_type, phone_number, message, **context):
    """Specialized logging for SMS events."""
    masked_phone = phone_number[-4:].rjust(len(phone_number), '*') if phone_number else 'unknown'
    log_info(
        f"SMS_{event_type.upper()}: {masked_phone} | {message}",
        event=event_type,
        **context
    )
# End of app/utils/logging.py

# Start of postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

# End of postcss.config.js

# Start of app/static/js/main.js
// main.js - Core application JavaScript utilities
// Transit Intelligence Platform

// =============================================================================
// TOAST NOTIFICATION SYSTEM
// =============================================================================

/**
 * Show toast notification with app-themed styling
 * @param {string} message - The message to display
 * @param {boolean} isSuccess - Whether this is a success (true) or error (false) message
 * @param {number} duration - Duration in milliseconds (default: 3000)
 */
function showToast(message, isSuccess = true, duration = 3000) {
    // Remove existing toast if any
    const existingToast = document.querySelector('.app-toast');
    if (existingToast) {
        existingToast.remove();
    }

    // Create the toast element with app theme
    const toast = document.createElement('div');
    toast.className = 'app-toast fixed top-4 left-1/2 transform -translate-x-1/2 z-50 max-w-md';
    
    // Apply app-themed styling
    const bgClass = isSuccess 
        ? 'bg-gradient-to-r from-green-600 to-emerald-600' 
        : 'bg-gradient-to-r from-red-600 to-rose-600';
    
    toast.innerHTML = `
        <div class="${bgClass} backdrop-blur-lg border border-white/20 rounded-xl px-6 py-4 shadow-2xl">
            <div class="flex items-center space-x-3">
                <div class="flex-shrink-0">
                    ${isSuccess ? `
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                    ` : `
                        <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                    `}
                </div>
                <div class="flex-1">
                    <p class="text-white font-medium text-sm">${message}</p>
                </div>
                <button onclick="this.closest('.app-toast').remove()" class="flex-shrink-0 text-white/70 hover:text-white transition-colors">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                    </svg>
                </button>
            </div>
        </div>
    `;

    // Set initial state
    toast.style.opacity = '0';
    toast.style.transform = 'translate(-50%, -20px)';
    toast.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';

    // Append to body
    document.body.appendChild(toast);

    // Animate in
    requestAnimationFrame(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translate(-50%, 0)';
    });

    // Auto-hide after duration
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translate(-50%, -20px)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 300);
    }, duration);
}

// =============================================================================
// HTMX RESPONSE HANDLING
// =============================================================================

/**
 * Handle HTMX responses and show appropriate toast notifications
 * @param {Event} event - HTMX afterRequest event
 */
function handleHtmxResponse(event) {
    const xhr = event.detail.xhr;
    const response = xhr.response;
    
    try {
        // Try to parse JSON response
        const data = JSON.parse(response);
        
        if (data.status === 'success') {
            showToast(data.message, true);
        } else if (data.status === 'error') {
            showToast(data.message, false);
        }
    } catch (e) {
        // Not JSON response, check status codes
        if (xhr.status >= 400) {
            showToast('An error occurred. Please try again.', false);
        }
    }
}

/**
 * Handle HTMX request errors
 * @param {Event} event - HTMX responseError event
 */
function handleHtmxError(event) {
    const xhr = event.detail.xhr;
    let message = 'Network error. Please check your connection.';
    
    if (xhr.status === 404) {
        message = 'Resource not found.';
    } else if (xhr.status === 500) {
        message = 'Server error. Please try again later.';
    } else if (xhr.status === 403) {
        message = 'You do not have permission to perform this action.';
    }
    
    showToast(message, false);
}

// =============================================================================
// FILTER MANAGEMENT
// =============================================================================

/**
 * Get current filter state from form elements
 * @param {string} formSelector - CSS selector for the filter form
 * @returns {Object} Current filter values
 */
function getFilterState(formSelector = '#vendor-filters') {
    const form = document.querySelector(formSelector);
    if (!form) return {};
    
    const formData = new FormData(form);
    const filters = {};
    
    for (const [key, value] of formData.entries()) {
        if (value && value.trim() !== '') {
            filters[key] = value.trim();
        }
    }
    
    return filters;
}

/**
 * Clear all filters and refresh the list
 * @param {string} formSelector - CSS selector for the filter form
 * @param {string} listSelector - CSS selector for the list to refresh
 */
function clearAllFilters(formSelector = '#vendor-filters', listSelector = '#vendors-list') {
    const form = document.querySelector(formSelector);
    if (form) {
        // Reset form elements
        form.reset();
        
        // Clear any custom selections
        const selects = form.querySelectorAll('select');
        selects.forEach(select => {
            select.selectedIndex = 0;
        });
        
        // Trigger refresh
        const listElement = document.querySelector(listSelector);
        if (listElement && typeof htmx !== 'undefined') {
            htmx.trigger(listElement, 'refresh');
        }
    }
}

/**
 * Apply filter badge display
 * @param {Object} filters - Current filter state
 * @param {string} badgeContainer - CSS selector for badge container
 */
function updateFilterBadges(filters, badgeContainer = '#active-filters') {
    const container = document.querySelector(badgeContainer);
    if (!container) return;
    
    container.innerHTML = '';
    
    Object.entries(filters).forEach(([key, value]) => {
        if (value && value !== '') {
            const badge = document.createElement('span');
            badge.className = 'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-600/20 text-purple-300 border border-purple-600/30';
            badge.innerHTML = `
                ${key}: ${value}
                <button onclick="clearFilter('${key}')" class="ml-1 text-purple-400 hover:text-purple-200">
                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                    </svg>
                </button>
            `;
            container.appendChild(badge);
        }
    });
}

/**
 * Clear a specific filter
 * @param {string} filterKey - The filter key to clear
 * @param {string} formSelector - CSS selector for the filter form
 */
function clearFilter(filterKey, formSelector = '#vendor-filters') {
    const form = document.querySelector(formSelector);
    if (form) {
        const element = form.querySelector(`[name="${filterKey}"]`);
        if (element) {
            element.value = '';
            
            // Trigger change event to update the list
            element.dispatchEvent(new Event('change', { bubbles: true }));
        }
    }
}

// =============================================================================
// FORM UTILITIES
// =============================================================================

/**
 * Reset form and clear validation errors
 * @param {string} formSelector - CSS selector for the form
 */
function resetFormWithValidation(formSelector) {
    const form = document.querySelector(formSelector);
    if (form) {
        form.reset();
        
        // Clear validation error messages
        const errorElements = form.querySelectorAll('.text-red-400, .border-red-500');
        errorElements.forEach(element => {
            if (element.classList.contains('text-red-400')) {
                element.remove();
            } else {
                element.classList.remove('border-red-500');
                element.classList.add('border-slate-700');
            }
        });
    }
}

/**
 * Show form validation errors
 * @param {Object} errors - Object with field names as keys and error messages as values
 * @param {string} formSelector - CSS selector for the form
 */
function showFormValidationErrors(errors, formSelector) {
    const form = document.querySelector(formSelector);
    if (!form) return;
    
    // Clear existing errors first
    resetFormWithValidation(formSelector);
    
    Object.entries(errors).forEach(([fieldName, errorMessage]) => {
        const field = form.querySelector(`[name="${fieldName}"]`);
        if (field) {
            // Add error styling to field
            field.classList.add('border-red-500');
            field.classList.remove('border-slate-700');
            
            // Add error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-400 text-xs mt-1';
            errorDiv.textContent = errorMessage;
            
            const parent = field.parentNode;
            parent.appendChild(errorDiv);
        }
    });
}

// =============================================================================
// LOADING STATES
// =============================================================================

/**
 * Show loading state on an element
 * @param {string} selector - CSS selector for the element
 * @param {string} loadingText - Text to show while loading
 */
function showLoading(selector, loadingText = 'Loading...') {
    const element = document.querySelector(selector);
    if (element) {
        element.dataset.originalContent = element.innerHTML;
        element.innerHTML = `
            <div class="flex items-center justify-center space-x-2 text-slate-400">
                <svg class="animate-spin h-4 w-4" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-sm">${loadingText}</span>
            </div>
        `;
    }
}

/**
 * Hide loading state and restore original content
 * @param {string} selector - CSS selector for the element
 */
function hideLoading(selector) {
    const element = document.querySelector(selector);
    if (element && element.dataset.originalContent) {
        element.innerHTML = element.dataset.originalContent;
        delete element.dataset.originalContent;
    }
}

// =============================================================================
// INITIALIZATION
// =============================================================================

/**
 * Initialize the application
 */
function initializeApp() {
    // Set up HTMX event listeners
    if (typeof htmx !== 'undefined') {
        // Handle successful responses with toast notifications
        document.body.addEventListener('htmx:afterRequest', handleHtmxResponse);
        
        // Handle request errors
        document.body.addEventListener('htmx:responseError', handleHtmxError);
        
        // Show loading states
        document.body.addEventListener('htmx:beforeRequest', (event) => {
            const target = event.target;
            if (target.classList.contains('show-loading')) {
                showLoading('#' + target.id, 'Processing...');
            }
        });
        
        // Hide loading states
        document.body.addEventListener('htmx:afterRequest', (event) => {
            const target = event.target;
            if (target.classList.contains('show-loading')) {
                hideLoading('#' + target.id);
            }
        });
    }
    
    console.log('🚀 Transit Intelligence Platform - Application initialized');
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

// =============================================================================
// GLOBAL UTILITIES
// =============================================================================

// Make key functions available globally
window.showToast = showToast;
window.clearAllFilters = clearAllFilters;
window.clearFilter = clearFilter;
window.resetFormWithValidation = resetFormWithValidation;
window.showFormValidationErrors = showFormValidationErrors;
# End of app/static/js/main.js

# Start of app/templates/base.html
<!-- app/templates/base.html -->

<!doctype html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title|default("See-Tran - Transit System Intelligence") }}</title>
  <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">
  <link rel="stylesheet" href="{{ url_for("static", filename="css/tailwind.css") }}">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .glass-effect { 
      backdrop-filter: blur(10px); 
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.1);
    }
    .glow-effect {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }
    .nav-link::after {
      content: '';
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #3b82f6, #06b6d4);
      transition: width 0.3s ease;
    }
    .nav-link:hover::after {
      width: 100%;
    }
    .metric-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
      transition: all 0.3s ease;
    }
    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
  
  <!-- Navigation -->
<nav class="glass-effect border-b border-slate-700/50 sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo and Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-3 group hover:opacity-90 transition-opacity">
          <div class="w-8 h-8 rounded-lg flex items-center justify-center">
            <img src="{{ url_for('static', filename='images/logo.png') }}" 
                 alt="SeeTran Logo" 
                 class="w-5 h-5 object-contain">
          </div>
          <div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
              see-tran
            </h1>
          </div>
        </a>
      </div>

      <!-- Navigation and User Menu -->
      <div class="flex items-center space-x-8">
        <!-- Main Navigation -->
        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Dashboard</a>
          <a href="/agencies" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Agencies</a>
          <a href="/functional-areas" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Functions</a>
          <a href="/components" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Components</a>
          <a href="/vendors" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Vendors</a>
          <a href="/integrations" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Integrations</a>
          <a href="/reports" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Reports</a>
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4 ml-8">
          <button class="p-2 rounded-lg bg-slate-800 hover:bg-slate-700 transition-colors">
            <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </button>
          <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"></div>
        </div>
      </div>
    </div>
  </div>
</nav>

  <!-- Main Content -->
  <main class="min-h-screen">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="glass-effect border-t border-slate-700/50 mt-auto">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-slate-400 text-sm">
          SeeTran Platform. Transit system visibility and intelligence.
        </div>
        <div class="flex space-x-6 mt-4 md:mt-0 items-center">
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Documentation</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">API</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Support</a>
          <a href="/contribute" class="inline-flex items-center text-emerald-400 hover:text-emerald-300 text-sm font-medium">
            🌐 Open Source <span class="hidden sm:inline">&nbsp;| See how it works</span>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="{{ url_for("static", filename="js/htmx.min.js") }}"></script>
  <script src="{{ url_for("static", filename="js/main.js") }}"></script>
  <script>
    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Add loading states for HTMX requests
    document.body.addEventListener('htmx:beforeRequest', function(e) {
      const target = e.target;
      if (target.classList.contains('btn-loading')) {
        target.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      }
    });
  </script>
  {% block scripts %}{% endblock %}
</body>
</html>
# End of app/templates/base.html

# Start of app/templates/index.html
<!-- app/templates/index.html -->

{% extends "base.html" %}
{% block content %}

<!-- Hero Section -->
<div class="relative overflow-hidden">
  <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-6">
        <span class="bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 bg-clip-text text-transparent">
          Transit System
        </span>
        <br>
        <span class="text-white">Intelligence Platform</span>
      </h1>
      <p class="text-xl text-slate-300 mb-8 max-w-3xl mx-auto">
        Comprehensive visibility into public transit system infrastructure, vendor relationships, 
        and system integrations in real-time.
      </p>
      <div class="flex flex-col sm:flex-row justify-center gap-4">
        <button hx-get="/api/health" hx-swap="innerHTML" hx-target="#health-demo" 
                class="px-8 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-semibold 
                       hover:from-blue-700 hover:to-cyan-700 transition-all glow-effect">
          Test System Health
        </button>
        <button class="px-8 py-3 border border-slate-600 rounded-lg font-semibold hover:bg-slate-800 transition-all">
          View the Docs
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Dashboard Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  
  <!-- Metrics Overview -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
    
    <!-- Transit Agency Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Transit Agencies</h3>
      <p class="text-xs text-slate-500">Active transportation networks</p>
    </div>

    <!-- Functional Areas Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/functional-areas" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Functional Areas</h3>
      <p class="text-xs text-slate-500">Operational domains</p>
    </div>

    <!-- Active Components Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/components" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Active Components</h3>
      <p class="text-xs text-slate-500">Deployed technology components</p>
    </div>

    <!-- Integration Points Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/integration-points" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Integration Points</h3>
      <p class="text-xs text-slate-500">System interconnections</p>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- System Status Panel -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">System Status</h2>
          <div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-sm text-slate-300">All Systems Operational</span>
          </div>
        </div>
        
        <!-- Demo System Status -->
        <div class="space-y-4">
          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Database Connection</h4>
                <p class="text-sm text-slate-400">SQLite • Local Development</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Response: 2ms</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Web Server</h4>
                <p class="text-sm text-slate-400">Flask Development Server</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Port: 5000</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">HTMX Integration</h4>
                <p class="text-sm text-slate-400">Dynamic UI Updates</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Active</p>
              <p class="text-xs text-slate-500">v2.0.4</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      
      <!-- System Health Demo -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">System Health</h3>
        <div id="health-demo" class="text-center">
          <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold text-white mb-2">Excellent</h4>
          <p class="text-sm text-slate-400">All systems functioning normally</p>
        </div>
      </div>

      <!-- Getting Started -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Getting Started</h3>
        <div class="space-y-3">
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">1</span>
            </div>
            <p class="text-sm text-slate-300">Add your first transit agency</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">2</span>
            </div>
            <p class="text-sm text-slate-300">Define functional areas</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">3</span>
            </div>
            <p class="text-sm text-slate-300">Configure system integration</p>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Transit Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Generate Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Information Cards -->
  <div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">System Tracking</h3>
      <p class="text-slate-400 text-sm">Monitor all your transit technology components, versions, and deployment status in one centralized dashboard.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Vendor Management</h3>
      <p class="text-slate-400 text-sm">Track vendor relationships, contact information, and system dependencies across your entire transit network.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Integration Mapping</h3>
      <p class="text-slate-400 text-sm">Visualize system integrations, data flows, and interconnections to understand your technology ecosystem.</p>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Auto-refresh metrics every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Add smooth animations for loaded content
document.body.addEventListener('htmx:afterSwap', function(e) {
  const newContent = e.detail.target;
  newContent.style.opacity = '0';
  newContent.style.transform = 'translateY(10px)';
  
  setTimeout(() => {
    newContent.style.transition = 'all 0.3s ease';
    newContent.style.opacity = '1';
    newContent.style.transform = 'translateY(0)';
  }, 50);
});
</script>
{% endblock %}
# End of app/templates/index.html

# Start of app/templates/vendors.html
<!-- app/templates/vendors.html -->

{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Vendor Management</h1>
    <p class="text-slate-400">Manage vendor relationships and track system portfolios across your transit network.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/vendors" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-systems-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Systems/Vendor</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="top-vendor-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Top Vendor Systems</h3>
    </div>
  </div>

  <!-- Enhanced Search and Filters -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8" id="vendor-filters-container">
    <form id="vendor-filters" class="space-y-4">
      
      <!-- Main Filter Row -->
      <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center">
        
        <!-- Search Input -->
        <div class="relative flex-1 max-w-md">
          <input type="text" 
                 id="vendor-search" 
                 name="search"
                 placeholder="Search vendors..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 pl-10 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors"
                 hx-get="/api/vendors/list" 
                 hx-target="#vendors-list" 
                 hx-trigger="keyup changed delay:300ms" 
                 hx-include="#vendor-filters">
          <svg class="absolute left-3 top-3 w-4 h-4 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Agency Filter -->
        <div class="flex-1 max-w-xs">
          <select id="agency-filter" 
                  name="agency"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="">All Agencies</option>
            <!-- Options will be loaded dynamically -->
          </select>
        </div>

        <!-- Functional Area Filter -->
        <div class="flex-1 max-w-xs">
          <select id="functional-area-filter" 
                  name="functional_area"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="">All Functional Areas</option>
            <!-- Options will be loaded dynamically -->
          </select>
        </div>

        <!-- Sort Options -->
        <div class="flex-1 max-w-xs">
          <select id="sort-select" 
                  name="sort"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-green-500 focus:ring-1 focus:ring-green-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="name">Sort by Name</option>
            <option value="components">Sort by Component Count</option>
            <option value="recent">Sort by Recent Activity</option>
          </select>
        </div>
      </div>

      <!-- Active Filters and Actions Row -->
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 pt-4 border-t border-slate-700/30">
        
        <!-- Active Filter Badges -->
        <div class="flex-1">
          <div class="flex items-center space-x-2">
            <span class="text-sm text-slate-400">Filters:</span>
            <div id="active-filters" class="flex flex-wrap gap-2">
              <!-- Filter badges will be populated by JavaScript -->
            </div>
            <button type="button" 
                    onclick="clearAllFilters('#vendor-filters', '#vendors-list')"
                    class="text-xs text-slate-500 hover:text-slate-300 transition-colors ml-2"
                    id="clear-filters-btn" style="display: none;">
              Clear All
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex gap-2">
          <button type="button"
                  hx-get="/api/vendors/form" 
                  hx-target="#vendor-details" 
                  hx-swap="innerHTML"
                  class="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Vendor
          </button>
          
          <button type="button" 
                  class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Export List
          </button>
        </div>
      </div>
    </form>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Vendors List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Vendor Portfolio</h2>
          <div class="flex items-center space-x-2 text-sm text-slate-400">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <span id="vendor-count-display">Loading...</span>
          </div>
        </div>
        
        <div id="vendors-list" class="space-y-6" hx-get="/api/vendors/list" hx-trigger="load">
          <!-- Vendors will be loaded here -->
          <div class="animate-pulse space-y-6">
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6 sticky top-24 max-h-[calc(100vh-6rem)] overflow-y-auto">
      <!-- Vendor Details Panel -->
      <div id="vendor-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
          <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
        </div>
      </div>

      <!-- Top Integration Standards -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Integration Standards</h3>
        <div id="integration-standards" hx-get="/api/integration/standards" hx-trigger="load" class="space-y-2">
          <!-- Integration standards will be loaded here -->
          <div class="animate-pulse space-y-2">
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
          </div>
        </div>
      </div>

      <!-- Vendor Performance Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Performance Insights</h3>
        <div class="space-y-3" id="performance-insights">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Reliable</span>
            <span class="text-green-400 font-medium text-sm" id="most-reliable-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Newest Partnership</span>
            <span class="text-blue-400 font-medium text-sm" id="newest-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Systems</span>
            <span class="text-purple-400 font-medium text-sm" id="largest-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button hx-get="/api/vendors/form" hx-target="#vendor-details" hx-swap="innerHTML"
                  class="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg text-sm font-medium hover:from-purple-700 hover:to-pink-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Vendor
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Vendor Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Contacts
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// =============================================================================
// VENDOR PAGE STATE MANAGEMENT - Embedded Controller
// =============================================================================

class VendorPageController {
  constructor() {
    this.currentFilters = {
      search: '',
      agency: '',
      functional_area: '',
      sort: 'name'
    };
    this.selectedVendorId = null;
    this.isLoading = false;
    this.refreshTimers = [];
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.loadInitialData();
    this.setupPeriodicRefresh();
    console.log('🏢 Vendor page controller initialized');
  }

  setupEventListeners() {
    const form = document.getElementById('vendor-filters');
    if (form) {
      form.addEventListener('input', this.handleFilterChange.bind(this));
      form.addEventListener('change', this.handleFilterChange.bind(this));
    }

    document.body.addEventListener('htmx:beforeRequest', this.handleBeforeRequest.bind(this));
    document.body.addEventListener('htmx:afterRequest', this.handleAfterRequest.bind(this));
    document.body.addEventListener('htmx:afterSwap', this.handleAfterSwap.bind(this));
    document.body.addEventListener('htmx:responseError', this.handleResponseError.bind(this));
  }

  async loadInitialData() {
    try {
      await Promise.all([
        this.loadFilterOptions(),
        this.loadVendorStats(),
        this.loadVendorPerformance()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showToast('Error loading page data. Please refresh.', false);
    }
  }

  async loadFilterOptions() {
    try {
      const agencyResponse = await fetch('/api/vendors/filter-options/agencies');
      const agencyHtml = await agencyResponse.text();
      const agencySelect = document.getElementById('agency-filter');
      if (agencySelect) agencySelect.innerHTML = agencyHtml;

      const faResponse = await fetch('/api/vendors/filter-options/functional-areas');
      const faHtml = await faResponse.text();
      const faSelect = document.getElementById('functional-area-filter');
      if (faSelect) faSelect.innerHTML = faHtml;
    } catch (error) {
      console.error('Error loading filter options:', error);
    }
  }

  handleFilterChange(event) {
    const formData = new FormData(document.getElementById('vendor-filters'));
    const newFilters = {};
    
    for (const [key, value] of formData.entries()) {
      newFilters[key] = value.trim();
    }
    this.currentFilters = { ...this.currentFilters, ...newFilters };

    if (event.target.name === 'search') {
      clearTimeout(this.searchTimeout);
      this.searchTimeout = setTimeout(() => {
        this.refreshVendorList();
        this.updateActiveFilters();
      }, 300);
    } else {
      this.refreshVendorList();
      this.updateActiveFilters();
    }

    this.loadVendorStats();
    this.loadVendorPerformance();
  }

  refreshVendorList() {
    if (this.isLoading) return;
    
    const vendorsList = document.getElementById('vendors-list');
    if (vendorsList) {
      this.showListLoading(true);
      htmx.trigger(vendorsList, 'refresh');
    }
  }

  updateActiveFilters() {
    const filterContainer = document.getElementById('active-filters');
    const clearBtn = document.getElementById('clear-filters-btn');
    
    if (!filterContainer) return;
    
    filterContainer.innerHTML = '';
    let hasActiveFilters = false;
    
    Object.entries(this.currentFilters).forEach(([key, value]) => {
      if (value && value !== '' && key !== 'sort') {
        hasActiveFilters = true;
        
        let displayKey = key;
        if (key === 'functional_area') displayKey = 'functional area';
        
        const badge = document.createElement('span');
        badge.className = 'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-600/20 text-purple-300 border border-purple-600/30';
        badge.innerHTML = `
          ${displayKey}: ${value}
          <button onclick="vendorController.clearSpecificFilter('${key}')" class="ml-1 text-purple-400 hover:text-purple-200 transition-colors">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
          </button>
        `;
        filterContainer.appendChild(badge);
      }
    });
    
    if (clearBtn) {
      clearBtn.style.display = hasActiveFilters ? 'inline-block' : 'none';
    }
  }

  clearSpecificFilter(filterKey) {
    const form = document.getElementById('vendor-filters');
    if (form) {
      const element = form.querySelector(`[name="${filterKey}"]`);
      if (element) {
        element.value = '';
        this.currentFilters[filterKey] = '';
        this.refreshVendorList();
        this.updateActiveFilters();
        this.loadVendorStats();
        this.loadVendorPerformance();
      }
    }
  }

  clearAllFilters() {
    const form = document.getElementById('vendor-filters');
    if (form) {
      form.reset();
      this.currentFilters = { search: '', agency: '', functional_area: '', sort: 'name' };
      this.refreshVendorList();
      this.updateActiveFilters();
      this.loadVendorStats();
      this.loadVendorPerformance();
    }
  }

  async loadVendorStats() {
    try {
      const params = new URLSearchParams();
      Object.entries(this.currentFilters).forEach(([key, value]) => {
        if (value && value.trim() !== '') params.append(key, value.trim());
      });
      
      const response = await fetch('/api/vendors/stats?' + params.toString());
      const data = await response.json();
      
      if (data.status !== 'error') {
        document.getElementById('active-vendors-count').textContent = data.active_vendors;
        document.getElementById('avg-systems-count').textContent = data.avg_components_per_vendor;
        if (data.top_vendor) {
          document.getElementById('top-vendor-count').textContent = data.top_vendor.component_count;
        }
      }
    } catch (error) {
      console.error('Error loading vendor stats:', error);
    }
  }

  async loadVendorPerformance() {
    try {
      const params = new URLSearchParams();
      Object.entries(this.currentFilters).forEach(([key, value]) => {
        if (value && value.trim() !== '') params.append(key, value.trim());
      });
      
      const response = await fetch('/api/vendors/performance?' + params.toString());
      const data = await response.json();
      
      if (data.status !== 'error') {
        document.getElementById('most-reliable-vendor').textContent = data.most_reliable;
        document.getElementById('newest-vendor').textContent = data.newest;
        document.getElementById('largest-vendor').textContent = data.largest;
      }
    } catch (error) {
      console.error('Error loading vendor performance:', error);
    }
  }

  showListLoading(show) {
    const vendorsList = document.getElementById('vendors-list');
    if (!vendorsList) return;
    
    if (show) {
      vendorsList.style.opacity = '0.6';
      vendorsList.style.pointerEvents = 'none';
    } else {
      vendorsList.style.opacity = '1';
      vendorsList.style.pointerEvents = 'auto';
    }
  }

  updateVendorCount() {
    const metaElement = document.getElementById('vendor-list-meta');
    const countDisplay = document.getElementById('vendor-count-display');
    
    if (metaElement && countDisplay) {
      const count = parseInt(metaElement.dataset.count) || 0;
      countDisplay.textContent = `${count} vendor${count !== 1 ? 's' : ''} found`;
    }
  }

  setupPeriodicRefresh() {
    this.refreshTimers.push(
      setInterval(() => {
        const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
        elements.forEach(el => htmx.trigger(el, 'refresh'));
      }, 30000)
    );
  }

  handleBeforeRequest(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = true;
      this.showListLoading(true);
    }
  }

  handleAfterRequest(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = false;
      this.showListLoading(false);
    }
  }

  handleAfterSwap(event) {
    if (event.target.id === 'vendors-list') {
      setTimeout(() => this.updateVendorCount(), 100);
      this.setupVendorCardEffects();
      if (this.selectedVendorId) {
        this.highlightSelectedVendor(this.selectedVendorId);
      }
    }
  }

  handleResponseError(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = false;
      this.showListLoading(false);
      showToast('Error loading vendors. Please try again.', false);
    }
  }

  setupVendorCardEffects() {
    const vendorCards = document.querySelectorAll('.vendor-card');
    vendorCards.forEach(card => {
      card.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-4px)';
        this.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.3)';
      });
      
      card.addEventListener('mouseleave', function() {
        if (!this.classList.contains('selected')) {
          this.style.transform = 'translateY(0)';
          this.style.boxShadow = 'none';
        }
      });
      
      card.addEventListener('click', (e) => {
        if (!e.target.closest('a') && !e.target.closest('button')) {
          this.selectedVendorId = card.dataset.vendorId;
          this.highlightSelectedVendor(this.selectedVendorId);
        }
      });
    });
  }

  highlightSelectedVendor(vendorId) {
    document.querySelectorAll('.vendor-card').forEach(card => {
      card.classList.remove('selected');
      if (!card.matches(':hover')) {
        card.style.transform = 'translateY(0)';
        card.style.boxShadow = 'none';
      }
    });
    
    const selectedCard = document.querySelector(`[data-vendor-id="${vendorId}"]`);
    if (selectedCard) {
      selectedCard.classList.add('selected');
      selectedCard.style.transform = 'translateY(-4px)';
      selectedCard.style.boxShadow = '0 10px 25px rgba(147, 51, 234, 0.3)';
    }
  }

  closeVendorDetails() {
    this.selectedVendorId = null;
    document.getElementById('vendor-details').innerHTML = `
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
        <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
        <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
      </div>`;
  }
}

// =============================================================================
// GLOBAL FUNCTIONS AND INITIALIZATION
// =============================================================================

let vendorController;

function clearSpecificFilter(filterKey) {
  if (vendorController) vendorController.clearSpecificFilter(filterKey);
}

function clearAllFilters() {
  if (vendorController) vendorController.clearAllFilters();
}

function closeVendorDetails() {
  if (vendorController) vendorController.closeVendorDetails();
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
  vendorController = new VendorPageController();
  
  // Make functions globally available
  window.clearSpecificFilter = clearSpecificFilter;
  window.clearAllFilters = clearAllFilters;
  window.closeVendorDetails = closeVendorDetails;
  window.vendorController = vendorController;
});

// Enhanced form handling for vendor operations
document.body.addEventListener('htmx:afterRequest', function(e) {
  // Handle vendor form submissions
  if (e.target.id === 'vendor-form') {
    try {
      const response = JSON.parse(e.detail.xhr.response);
      
      if (response.status === 'success') {
        // Trigger custom events for vendor operations
        if (e.detail.requestConfig.path.includes('POST') && !e.detail.requestConfig.path.match(/\/\d+$/)) {
          // New vendor created
          document.dispatchEvent(new CustomEvent('vendor:created', { 
            detail: { message: response.message } 
          }));
        } else if (e.detail.requestConfig.path.includes('POST') && e.detail.requestConfig.path.match(/\/\d+$/)) {
          // Vendor updated
          const vendorId = e.detail.requestConfig.path.match(/\/(\d+)$/)[1];
          document.dispatchEvent(new CustomEvent('vendor:updated', { 
            detail: { vendorId: vendorId, message: response.message } 
          }));
        }
      }
    } catch (error) {
      // Response is not JSON, handle as before
    }
  }
});

// Handle vendor deletion
document.addEventListener('vendor:deleted', function(e) {
  if (vendorController) {
    vendorController.refreshVendorList();
    vendorController.loadVendorStats();
    vendorController.loadVendorPerformance();
    if (e.detail.vendorId === vendorController.selectedVendorId) {
      vendorController.closeVendorDetails();
    }
  }
});

// Export functionality
function exportVendorList() {
  showToast('Export functionality coming soon!', true);
}

window.exportVendorList = exportVendorList;
</script>
{% endblock %}
# End of app/templates/vendors.html

# Start of app/templates/components.html
<!-- app/templates/components.html -->

{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Components Management</h1>
    <p class="text-slate-400">Monitor and manage all transit technology components across your network.</p>
  </div>

  <!-- Filters and Search -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search and Filters -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" placeholder="Search components..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none">
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Functional Area Filter -->
        <select id="functional-area-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/components/list" hx-target="#components-list" hx-include="[id='vendor-filter'],[id='agency-filter'],[id='status-filter']" hx-vals='js:{"functional_area": event.target.value}'
                hx-trigger="change" hx-swap="innerHTML">
          <option value="">All Functional Areas</option>
        </select>

        <!-- Vendor Filter -->
        <select id="vendor-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/components/list" hx-target="#components-list" hx-include="[id='functional-area-filter'],[id='agency-filter'],[id='status-filter']" hx-vals='js:{"vendor": event.target.value}'
                hx-trigger="change" hx-swap="innerHTML">
          <option value="">All Vendors</option>
        </select>

        <!-- Agency Filter -->
        <select id="agency-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/components/list" hx-target="#components-list" hx-include="[id='functional-area-filter'],[id='vendor-filter'],[id='status-filter']" hx-vals='js:{"agency": event.target.value}'
                hx-trigger="change" hx-swap="innerHTML">
          <option value="">All Agencies</option>
        </select>

        <!-- Status Filter -->
        <select id="status-filter" 
                class="bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white focus:border-blue-500 focus:outline-none"
                hx-get="/api/components/list" hx-target="#components-list" hx-include="[id='functional-area-filter'],[id='vendor-filter'],[id='agency-filter']" hx-vals='js:{"status": event.target.value}'
                hx-trigger="change">
          <option value="">All Components</option>
          <option value="no_issues">No Issues</option>
          <option value="issues">Has Issues</option>
        </select>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button class="px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Component
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Components List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Components Overview</h2>
          <button hx-get="/api/components/list" hx-target="#components-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="components-list" class="space-y-4" hx-get="/api/components/list" hx-trigger="load">
          <!-- Components will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Component Details Sidebar -->
    <div class="space-y-6">
      
      <!-- Component Details Panel -->
      <div id="component-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
          <p class="text-slate-500 text-sm">Select a component to view details</p>
        </div>
      </div>

      <!-- Vendor Information -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          Vendor Info
        </h3>
        <div id="vendor-details" class="space-y-3">
          <div class="text-center py-4">
            <span class="text-slate-500 text-sm">No component selected</span>
          </div>
        </div>
      </div>

      <!-- Integration Points -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-green-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z" clip-rule="evenodd"/>
          </svg>
          Integrations
        </h3>
        <div id="integration-details" class="space-y-2">
          <div class="text-center py-4">
            <span class="text-slate-500 text-sm">No component selected</span>
          </div>
        </div>
      </div>

      <!-- Quick Stats -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Stats</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Total Components</span>
            <span class="text-white font-medium" hx-get="/api/count/components" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Active Vendors</span>
            <span class="text-white font-medium" hx-get="/api/count/vendors" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Integration Points</span>
            <span class="text-white font-medium" hx-get="/api/count/integration-points" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Functional Areas</span>
            <span class="text-white font-medium" hx-get="/api/count/functional-areas" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Agencies</span>
            <span class="text-white font-medium" hx-get="/api/count/agencies" hx-trigger="load">--</span>
          </div>
        </div>
      </div>

      <!-- Status Legend -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Status Legend</h3>
        <div class="space-y-2">
          <div class="flex items-center space-x-3">
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
            <span class="text-slate-300 text-sm">No Known Issues</span>
          </div>
          <div class="flex items-center space-x-3">
            <div class="w-3 h-3 bg-red-500 rounded-full"></div>
            <span class="text-slate-300 text-sm">Has Known Issues</span>
          </div>
          <div class="flex items-center space-x-3">
            <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
            <span class="text-slate-300 text-sm">Composite Component</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Component card interactions and details loading
document.body.addEventListener('htmx:afterSwap', function(e) {
  // Add click handlers for component cards
  const componentCards = document.querySelectorAll('.component-card');
  componentCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      this.style.transform = 'translateY(-2px)';
    });
    card.addEventListener('mouseleave', function() {
      this.style.transform = 'translateY(0)';
    });
    
    // Click handler is handled by HTMX in the component card HTML
  });
});

// Load filter options on page load
document.addEventListener('DOMContentLoaded', function() {
  // Load functional area options
  htmx.ajax('GET', '/api/filter-options/functional-areas', {
    target: '#functional-area-filter',
    swap: 'innerHTML'
  });
  
  // Load vendor options
  htmx.ajax('GET', '/api/filter-options/vendors', {
    target: '#vendor-filter', 
    swap: 'innerHTML'
  });
  
  // Load agency options
  htmx.ajax('GET', '/api/agencies/options', {
    target: '#agency-filter',
    swap: 'innerHTML'
  });
});

// Function to clear all component details panels
function clearComponentDetails() {
  // Reset component details panel
  document.getElementById('component-details').innerHTML = `
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
              </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
          <p class="text-slate-500 text-sm">Select a component to view details</p>
      </div>`;
  
  // Reset vendor details panel
  document.getElementById('vendor-details').innerHTML = `
      <div class="text-center py-4">
          <span class="text-slate-500 text-sm">No component selected</span>
      </div>`;
  
  // Reset integration details panel
  document.getElementById('integration-details').innerHTML = `
      <div class="text-center py-4">
          <span class="text-slate-500 text-sm">No component selected</span>
      </div>`;
}

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);
</script>
{% endblock %}
# End of app/templates/components.html

# Start of app/templates/standards.html
<!-- app/templates/standards.html -->

# End of app/templates/standards.html

# Start of app/templates/integrations.html
{% extends "base.html" %}

{% block content %}
  <h1>Integrations</h1>
  
  {% if integrations %}
    <ul>
      {% for integration in integrations %}
        <li>
          <strong>{{ integration.name }}</strong> - {{ integration.description }}
        </li>
      {% endfor %}
    </ul>
  {% else %}
    <p>No integrations found.</p>
  {% endif %}
  
  <p>
    <a href="{{ url_for('integrations.new_integration') }}">Create New Integration</a>
  </p>
{% endblock %}

# End of app/templates/integrations.html

# Start of app/templates/functional_areas.html
<!-- app/templates/functional_areas.html -->

{% extends "base.html" %}

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Functional Areas Management</h1>
    <p class="text-slate-400">Manage global functional areas that organize transit technology functions across all agencies.</p>
  </div>

  <!-- Actions Bar -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Filters -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" id="area-search" placeholder="Search functional areas..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                 hx-get="/api/functional-areas/list" hx-target="#functional-areas-list" hx-trigger="keyup changed delay:300ms" 
                 hx-vals="js:{search: event.target.value}">
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button hx-get="/api/functional-areas/form" hx-target="#functional-area-details" hx-swap="innerHTML"
                class="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Functional Area
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Functional Areas List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Functional Areas</h2>
          <button hx-get="/api/functional-areas/list" hx-target="#functional-areas-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="functional-areas-list" hx-get="/api/functional-areas/list" hx-trigger="load">
          <!-- Functional areas will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Details/Form Sidebar -->
    <div class="space-y-6">
      
      <!-- Functional Area Details Panel -->
      <div id="functional-area-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Functional Area Details</h3>
          <p class="text-slate-500 text-sm">Click on a functional area to view details or use the Add button to create a new one.</p>
        </div>
      </div>

      <!-- Quick Stats -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Stats</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Total Areas</span>
            <span class="text-white font-medium" hx-get="/api/count/functional-areas" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Functions</span>
            <span class="text-white font-medium" hx-get="/api/count/functions" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Components</span>
            <span class="text-white font-medium" hx-get="/api/count/components" hx-trigger="load">--</span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-slate-400 text-sm">Agencies</span>
            <span class="text-white font-medium" hx-get="/api/count/agencies" hx-trigger="load">--</span>
          </div>
        </div>
      </div>

      <!-- Global Info Panel -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
          </svg>
          Global Structure
        </h3>
        <div class="space-y-3 text-sm text-slate-300">
          <p>Functional areas are shared across all transit agencies, providing a consistent framework for organizing technology functions.</p>
          <div class="bg-slate-700/30 rounded-lg p-3">
            <p class="text-xs text-slate-400 uppercase tracking-wide mb-2">Hierarchy</p>
            <div class="space-y-1 text-xs">
              <div class="flex items-center">
                <span class="w-2 h-2 bg-purple-500 rounded-full mr-2"></span>
                <span>Functional Areas (Global)</span>
              </div>
              <div class="flex items-center ml-4">
                <span class="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
                <span>Functions</span>
              </div>
              <div class="flex items-center ml-8">
                <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                <span>Components (Agency-specific)</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Success/error handling for forms
document.body.addEventListener('htmx:afterRequest', function(e) {
  if (e.detail.xhr.status === 200 && e.detail.requestConfig.verb === 'post') {
    // Success: refresh list and show success message
    htmx.trigger('#functional-areas-list', 'refresh');
  }
});
</script>
{% endblock %}
# End of app/templates/functional_areas.html

# Start of app/templates/agencies.html
<!-- app/templates/agencies.html -->

{% extends "base.html" %}

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Transit Agency Management</h1>
    <p class="text-slate-400">Manage transit agencies and their organizational structure.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Agencies</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Implementations</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Tech/Agency</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Vendors/Agency</h3>
    </div>
  </div>

  <!-- Actions Bar -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search -->
      <div class="relative flex-1 max-w-md">
        <input type="text" id="agency-search" placeholder="Search transit agencies..." 
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
               hx-get="/api/agencies/list" hx-target="#agencies-list" hx-trigger="keyup changed delay:300ms" 
               hx-vals="js:{search: event.target.value}">
        <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
        </svg>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                class="px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Transit Agency
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Agencies List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Transit Agencies</h2>
          <button hx-get="/api/agencies/list" hx-target="#agencies-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="agencies-list" hx-get="/api/agencies/list" hx-trigger="load">
          <!-- Agencies will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Details/Form Sidebar -->
    <div class="space-y-6 sticky top-24 max-h-[calc(100vh-6rem)] overflow-y-auto">
      
      <!-- Agency Details Panel -->
      <div id="agency-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Agency Details</h3>
          <p class="text-slate-500 text-sm">Click on a transit agency to view details or use the Add button to create a new one.</p>
        </div>
      </div>

      <!-- Agency Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Transit Insights</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Tech Leader</span>
            <span class="text-blue-400 font-medium text-sm" id="tech-leader-agency">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Top Technology</span>
            <span class="text-green-400 font-medium text-sm" id="common-tech-area">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Leading Vendor</span>
            <span class="text-purple-400 font-medium text-sm" id="top-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                  class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Agency Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Load agency stats
document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/agencies/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('active-implementations-count').textContent = data.active_implementations;
      document.getElementById('avg-implementations-count').textContent = data.avg_implementations_per_agency;
      document.getElementById('avg-vendors-count').textContent = data.avg_vendors_per_agency;
    });

  // Load agency insights
  fetch('/api/agencies/insights')
    .then(response => response.json())
    .then(data => {
      document.getElementById('tech-leader-agency').textContent = data.tech_leader;
      document.getElementById('common-tech-area').textContent = data.common_area;
      document.getElementById('top-vendor').textContent = data.top_vendor;
    });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Success/error handling for forms
document.body.addEventListener('htmx:afterRequest', function(e) {
  if (e.detail.xhr.status === 200 && e.detail.requestConfig.verb === 'post') {
    // Success: refresh list and show success message
    htmx.trigger('#agencies-list', 'refresh');
  }
});
</script>
{% endblock %}
# End of app/templates/agencies.html

# Start of app/templates/contribute.html
<!-- app/templates/contribute.html -->

{% extends "base.html" %}

{% block content %}
<div class="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
  <h1 class="text-3xl font-bold text-slate-100 mb-4">🌐 Contribute to SeeTran</h1>
  <p class="text-slate-300 mb-6">
    SeeTran is an open-source platform designed to make transit system functionality more visible, transparent, and collaborative. You can contribute as a developer, data wrangler, or transit operations expert — no matter your background, there's a way to help.
  </p>

  <h2 class="text-xl font-semibold text-slate-200 mt-8 mb-2">💻 Developers</h2>
  <p class="text-slate-300 mb-4">
    Check out our <a href="https://github.com/Spark4Tech/see-tran.git" class="text-emerald-400 hover:underline">GitHub repository</a> to explore the codebase, open issues, and contribution guidelines. You can submit pull requests for bug fixes, feature enhancements, or documentation improvements.
  </p>

  <h2 class="text-xl font-semibold text-slate-200 mt-8 mb-2">🗺️ Transit System Admins</h2>
  <p class="text-slate-300 mb-4">
    Want to help manage data for a specific transit system? Volunteer as a system admin and we’ll create a free user account for you with editing permissions. Your local expertise ensures accuracy and impact.
  </p>

  <a href="mailto:team@see-tran.org?subject=Volunteer as Transit System Admin" class="inline-block mt-4 px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded font-medium">
    📬 Volunteer Now
  </a>

  <h2 class="text-xl font-semibold text-slate-200 mt-10 mb-2">🙌 Other Ways to Help</h2>
  <ul class="list-disc list-inside text-slate-300 space-y-2">
    <li>Suggest data improvements or flag inconsistencies.</li>
    <li>Share SeeTran with local transit agencies and planners.</li>
    <li>Write blog posts or tutorials on how to use the platform.</li>
  </ul>

  <p class="text-slate-400 text-sm mt-8">
    All contributions are welcome. Thank you for supporting open, transparent public transit data!
  </p>
</div>
{% endblock %}

# End of app/templates/contribute.html

# Start of app/templates/fragments/vendor_details.html
<!-- app/templates/fragments/vendor_details.html -->
<div class="glass-effect rounded-xl overflow-hidden border border-slate-700/50">
  
  <!-- Header Image Section -->
  <!-- Header Image -->
  {% if vendor.header_url %}
  <div class="relative aspect-[2/1] bg-gradient-to-r from-slate-800 to-slate-700">
    <img src="{{ vendor.header_url }}" 
         alt="{{ vendor.name }} header" 
         class="w-full h-full object-cover"
         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
    <!-- Fallback gradient when image doesn't exist -->
    <div class="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 hidden items-center justify-center">
      <svg class="w-12 h-12 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
        <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
      </svg>
    </div>
  </div>
  {% endif %}
  
  <!-- Content Section -->
  <div class="p-6">
    
    <!-- Vendor Title and Description -->
    <div class="mb-6">
        <h2 class="text-2xl font-bold text-white mb-2">{{ vendor.name }}</h2>
        <div class="flex items-center space-x-3 mb-3">
            {% if vendor.short_name %}
            <span class="px-2 py-1 bg-purple-600/20 border border-purple-600/30 rounded text-xs text-purple-300 font-medium">
            {{ vendor.short_name }}
            </span>
            {% endif %}
            {% if vendor.website %}
            <a href="{{ vendor.website }}" 
            target="_blank" 
            class="px-2 py-1 bg-cyan-600/20 border border-cyan-600/30 rounded text-xs text-cyan-300 font-medium hover:bg-cyan-600/30 transition-colors flex items-center">
            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.032 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
            </svg>
            Visit Website
            </a>
            {% endif %}
        </div>
        {% if vendor.description %}
        <p class="text-slate-300 leading-relaxed">{{ vendor.description }}</p>
        {% else %}
        <p class="text-slate-400 italic">No description available</p>
        {% endif %}
    </div>

    <!-- Action Buttons Row -->
    <div class="flex flex-col sm:flex-row gap-3 mb-6 pb-6 border-b border-slate-700/30">
      <button hx-get="/api/vendors/{{ vendor.id }}/form" 
              hx-target="#vendor-details" 
              hx-swap="innerHTML"
              class="flex-1 sm:flex-none px-4 py-2.5 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 rounded-lg font-medium transition-all text-white shadow-lg">
        <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
        </svg>
        Edit Vendor
      </button>
      
      <button onclick="closeVendorDetails()"
              class="flex-1 sm:flex-none px-4 py-2.5 bg-slate-700 hover:bg-slate-600 rounded-lg font-medium transition-colors text-white">
        <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
        Close
      </button>
    </div>

    <!-- Stats Overview Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
      <div class="bg-gradient-to-r from-blue-600/20 to-blue-500/20 border border-blue-500/30 rounded-lg p-4 text-center">
        <div class="text-2xl font-bold text-blue-300 mb-1">{{ vendor.total_components }}</div>
        <div class="text-sm text-blue-200">Total Components</div>
      </div>
      <div class="bg-gradient-to-r from-green-600/20 to-emerald-500/20 border border-green-500/30 rounded-lg p-4 text-center">
        <div class="text-2xl font-bold text-green-300 mb-1">{{ vendor.total_components - vendor.components_with_issues }}</div>
        <div class="text-sm text-green-200">Healthy Components</div>
      </div>
      <div class="bg-gradient-to-r from-purple-600/20 to-purple-500/20 border border-purple-500/30 rounded-lg p-4 text-center">
        <div class="text-2xl font-bold text-purple-300 mb-1">{{ vendor.recent_deployments }}</div>
        <div class="text-sm text-purple-200">Recent Deployments</div>
      </div>
    </div>
    
    <!-- Main Content Sections -->
    <div class="space-y-6">
      
      <!-- Contact Information Section -->
      <div class="bg-slate-800/30 rounded-lg p-5 border border-slate-700/30">
        <h3 class="font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-3 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
          </svg>
          Contact Information
        </h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          {% if vendor.website %}
          <div class="space-y-2">
            <span class="text-slate-400 font-medium">Website</span>
            <div>
              <a href="{{ vendor.website }}" target="_blank" 
                 class="text-cyan-400 hover:text-cyan-300 transition-colors flex items-center break-all">
                {{ vendor.website }}
                <svg class="w-3 h-3 ml-1 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
                  <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-1a1 1 0 10-2 0v1H5V7h1a1 1 0 000-2H5z"/>
                </svg>
              </a>
            </div>
          </div>
          {% endif %}
          
          {% if vendor.vendor_email %}
          <div class="space-y-2">
            <span class="text-slate-400 font-medium">General Email</span>
            <div>
              <a href="mailto:{{ vendor.vendor_email }}" 
                 class="text-cyan-400 hover:text-cyan-300 transition-colors break-all">
                {{ vendor.vendor_email }}
              </a>
            </div>
          </div>
          {% endif %}
          
          {% if vendor.vendor_phone %}
          <div class="space-y-2">
            <span class="text-slate-400 font-medium">General Phone</span>
            <div>
              <a href="tel:{{ vendor.vendor_phone }}" 
                 class="text-cyan-400 hover:text-cyan-300 transition-colors">
                {{ vendor.vendor_phone }}
              </a>
            </div>
          </div>
          {% endif %}
          
          {% if not vendor.website and not vendor.vendor_email and not vendor.vendor_phone %}
          <div class="md:col-span-2 text-center py-4">
            <span class="text-slate-500 italic">No contact information available</span>
          </div>
          {% endif %}
        </div>
      </div>

      <!-- Component Portfolio Section -->
      {% if vendor.components_by_area %}
      <div class="bg-slate-800/30 rounded-lg p-5 border border-slate-700/30">
        <h3 class="font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-3 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
          Component Portfolio
          <span class="ml-auto text-sm text-slate-400 font-normal">
            {{ vendor.total_components }} total components
          </span>
        </h3>
        
        <div class="space-y-5 max-h-80 overflow-y-auto pr-2">
          {% for area_name, components in vendor.components_by_area.items() %}
          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <h4 class="text-sm font-medium text-indigo-300 flex items-center">
                <span class="w-2 h-2 bg-indigo-400 rounded-full mr-2"></span>
                {{ area_name }}
              </h4>
              <span class="text-xs text-slate-500 bg-slate-700/50 px-2 py-1 rounded">
                {{ components|length }} component{{ 's' if components|length != 1 else '' }}
              </span>
            </div>
            
            <div class="grid grid-cols-1 gap-2 ml-4">
              {% for component in components %}
              <div class="flex items-center justify-between p-3 bg-slate-700/40 rounded-lg hover:bg-slate-700/60 transition-colors">
                <div class="flex items-center space-x-3">
                  <div class="w-2 h-2 bg-{% if component.known_issues %}red{% else %}green{% endif %}-500 rounded-full flex-shrink-0"></div>
                  <div>
                    <span class="text-sm font-medium text-slate-200">{{ component.name }}</span>
                    {% if component.known_issues %}
                    <div class="text-xs text-red-400 mt-1">⚠ Has known issues</div>
                    {% endif %}
                  </div>
                </div>
                <div class="text-right flex-shrink-0">
                  <span class="text-xs text-slate-400 bg-slate-800/50 px-2 py-1 rounded">
                    v{{ component.version or 'Unknown' }}
                  </span>
                  {% if component.deployment_date %}
                  <div class="text-xs text-slate-500 mt-1">
                    {{ component.deployment_date.strftime('%Y-%m-%d') }}
                  </div>
                  {% endif %}
                </div>
              </div>
              {% endfor %}
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
      {% else %}
      <div class="bg-slate-800/30 rounded-lg p-5 border border-slate-700/30">
        <h3 class="font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-3 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
          Component Portfolio
        </h3>
        <div class="text-center py-8">
          <svg class="w-12 h-12 text-slate-500 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
          <p class="text-slate-400 text-sm">No deployed components found for this vendor.</p>
          <p class="text-slate-500 text-xs mt-1">Components will appear here once deployed by transit agencies.</p>
        </div>
      </div>
      {% endif %}

      <!-- Integration Standards Section -->
      {% if vendor.integration_standards %}
      <div class="bg-slate-800/30 rounded-lg p-5 border border-slate-700/30">
        <h3 class="font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-3 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
          </svg>
          Integration Standards
          <span class="ml-auto text-sm text-slate-400 font-normal">
            {{ vendor.integration_standards|length }} standard{{ 's' if vendor.integration_standards|length != 1 else '' }}
          </span>
        </h3>
        <div class="flex flex-wrap gap-2">
          {% for standard in vendor.integration_standards %}
          <span class="px-3 py-1.5 bg-cyan-600/20 border border-cyan-600/30 rounded-lg text-sm text-cyan-300 font-medium">
            {{ standard }}
          </span>
          {% endfor %}
        </div>
      </div>
      {% else %}
      <div class="bg-slate-800/30 rounded-lg p-5 border border-slate-700/30">
        <h3 class="font-semibold text-white mb-4 flex items-center">
          <svg class="w-5 h-5 mr-3 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
          </svg>
          Integration Standards
        </h3>
        <div class="text-center py-6">
          <p class="text-slate-400 text-sm">No integration standards documented for this vendor.</p>
          <p class="text-slate-500 text-xs mt-1">Standards will appear here as components are deployed.</p>
        </div>
      </div>
      {% endif %}
    </div>
  </div>
</div>

<script>
function closeVendorDetails() {
  document.getElementById('vendor-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
      <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
    </div>`;
}
</script>
# End of app/templates/fragments/vendor_details.html

# Start of app/templates/fragments/vendor_form.html
<!-- app/templates/fragments/vendor_form.html -->
<div class="glass-effect rounded-xl p-6 border border-slate-700/50 max-h-[90vh] overflow-y-auto">
  <div class="flex items-center justify-between mb-6 sticky top-0 bg-slate-800/90 backdrop-blur-sm z-10 py-2 -mt-2">
    <h2 class="text-xl font-bold text-white">
      {% if vendor %}Edit Vendor{% else %}Add Vendor{% endif %}
    </h2>
    <button onclick="closeVendorForm()"
            class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
      ✕ Cancel
    </button>
  </div>

  <form id="vendor-form"
        {% if vendor %}
        hx-post="/api/vendors/{{ vendor.id }}"
        {% else %}
        hx-post="/api/vendors"
        {% endif %}
        hx-trigger="submit"
        hx-swap="none"
        class="space-y-8">
    
    <!-- Basic Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
        </svg>
        Basic Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="md:col-span-1">
          <label for="name" class="block text-sm font-medium text-slate-300 mb-2">
            Vendor Name <span class="text-red-400">*</span>
          </label>
          <input type="text" id="name" name="name" required
                 value="{{ form.name.data if form.name.data else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors"
                 placeholder="e.g., Acme Transportation Systems">
          <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
        </div>

        <div class="md:col-span-1">
          <label for="short_name" class="block text-sm font-medium text-slate-300 mb-2">Short Name</label>
          <input type="text" id="short_name" name="short_name"
                 value="{{ form.short_name.data if form.short_name.data else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors"
                 placeholder="e.g., acme">
          <p class="text-xs text-slate-500 mt-1">Used for logo and header image file names</p>
          <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
        </div>

        <div class="md:col-span-2">
          <label for="description" class="block text-sm font-medium text-slate-300 mb-2">Description</label>
          <textarea id="description" name="description" rows="3"
                    class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors resize-vertical"
                    placeholder="Brief description of the vendor and their specialties">{{ form.description.data if form.description.data else '' }}</textarea>
          <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
        </div>
      </div>
    </div>

    <!-- Contact Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/>
          <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/>
        </svg>
        Contact Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label for="vendor_email" class="block text-sm font-medium text-slate-300 mb-2">General Email</label>
          <input type="email" id="vendor_email" name="vendor_email"
                 value="{{ form.vendor_email.data if form.vendor_email.data else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., info@vendor.com">
          <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
        </div>

        <div>
          <label for="vendor_phone" class="block text-sm font-medium text-slate-300 mb-2">General Phone</label>
          <input type="tel" id="vendor_phone" name="vendor_phone"
                 value="{{ form.vendor_phone.data if form.vendor_phone.data else '' }}"
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                 placeholder="e.g., (555) 123-4567">
          <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
        </div>
      </div>
      <p class="text-xs text-slate-500 mt-2">General contact information for the vendor organization</p>
    </div>

    <!-- Web Resources Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        <svg class="w-5 h-5 mr-2 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.032 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
        </svg>
        Web Resources
      </h3>
      <div>
        <label for="website" class="block text-sm font-medium text-slate-300 mb-2">Official Website</label>
        <input type="url" id="website" name="website"
               value="{{ form.website.data if form.website.data else '' }}"
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-yellow-500 focus:ring-1 focus:ring-yellow-500 focus:outline-none transition-colors"
               placeholder="e.g., https://www.vendor.com">
        <p class="text-xs text-slate-500 mt-1">Company website URL</p>
        <div class="field-error text-red-400 text-xs mt-1 hidden"></div>
      </div>
    </div>

    <!-- Form Actions -->
    <div class="form-section sticky bottom-0 bg-slate-800/95 backdrop-blur-sm border-t border-slate-600 pt-6 mt-8">
      <div class="flex flex-col sm:flex-row gap-3">
        <button type="submit" 
                id="submit-btn"
                class="flex-1 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all text-white shadow-lg disabled:opacity-50 disabled:cursor-not-allowed">
          <span class="submit-text">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
            {% if vendor %}Update Vendor{% else %}Create Vendor{% endif %}
          </span>
          <span class="loading-text hidden">
            <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Processing...
          </span>
        </button>
        
        <button type="button" onclick="closeVendorForm()" 
                class="px-6 py-3 bg-slate-700 hover:bg-slate-600 rounded-lg font-medium transition-colors text-white">
          Cancel
        </button>
        
        {% if vendor %}
        <button type="button" 
                id="delete-btn"
                onclick="deleteVendor({{ vendor.id }})"
                class="px-6 py-3 bg-red-600 hover:bg-red-700 rounded-lg font-medium transition-colors text-white">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd"/>
            <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
          </svg>
          Delete Vendor
        </button>
        {% endif %}
      </div>
    </div>
  </form>
</div>

<script>
// =============================================================================
// VENDOR FORM HANDLING
// =============================================================================

/**
 * Close vendor form and return to default state
 */
function closeVendorForm() {
  document.getElementById('vendor-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
      <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
    </div>`;
}

/**
 * Clear form validation errors
 */
function clearFormErrors() {
  const form = document.getElementById('vendor-form');
  if (!form) return;
  
  // Remove error styling from fields
  const fields = form.querySelectorAll('input, textarea, select');
  fields.forEach(field => {
    field.classList.remove('border-red-500');
    field.classList.add('border-slate-700');
  });
  
  // Hide error messages
  const errorElements = form.querySelectorAll('.field-error');
  errorElements.forEach(element => {
    element.classList.add('hidden');
    element.textContent = '';
  });
}

/**
 * Show form validation errors
 */
function showFormErrors(errors) {
  const form = document.getElementById('vendor-form');
  if (!form) return;
  
  Object.entries(errors).forEach(([fieldName, errorMessage]) => {
    const field = form.querySelector(`[name="${fieldName}"]`);
    if (field) {
      // Add error styling to field
      field.classList.add('border-red-500');
      field.classList.remove('border-slate-700');
      
      // Show error message
      const errorElement = field.parentNode.querySelector('.field-error');
      if (errorElement) {
        errorElement.textContent = errorMessage;
        errorElement.classList.remove('hidden');
      }
    }
  });
}

/**
 * Show loading state on submit button
 */
function showSubmitLoading() {
  const submitBtn = document.getElementById('submit-btn');
  if (submitBtn) {
    submitBtn.disabled = true;
    submitBtn.querySelector('.submit-text').classList.add('hidden');
    submitBtn.querySelector('.loading-text').classList.remove('hidden');
  }
}

/**
 * Hide loading state on submit button
 */
function hideSubmitLoading() {
  const submitBtn = document.getElementById('submit-btn');
  if (submitBtn) {
    submitBtn.disabled = false;
    submitBtn.querySelector('.submit-text').classList.remove('hidden');
    submitBtn.querySelector('.loading-text').classList.add('hidden');
  }
}

/**
 * Delete vendor with confirmation
 */
function deleteVendor(vendorId) {
  if (!confirm('Are you sure you want to delete this vendor? This action cannot be undone if the vendor has associated components.')) {
    return;
  }
  
  const deleteBtn = document.getElementById('delete-btn');
  if (deleteBtn) {
    deleteBtn.disabled = true;
    deleteBtn.innerHTML = `
      <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Deleting...
    `;
  }
  
  fetch(`/api/vendors/${vendorId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      showToast(data.message, true);
      closeVendorForm();
      // Refresh vendor list
      htmx.trigger('#vendors-list', 'refresh');
    } else {
      showToast(data.message, false);
    }
  })
  .catch(error => {
    showToast('Error deleting vendor. Please try again.', false);
  })
  .finally(() => {
    if (deleteBtn) {
      deleteBtn.disabled = false;
      deleteBtn.innerHTML = `
        <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" clip-rule="evenodd"/>
          <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
        </svg>
        Delete Vendor
      `;
    }
  });
}

// =============================================================================
// FORM EVENT HANDLERS
// =============================================================================

// Handle form submission
document.addEventListener('htmx:beforeRequest', function(e) {
  if (e.target.id === 'vendor-form') {
    clearFormErrors();
    showSubmitLoading();
  }
});

// Handle form response
document.addEventListener('htmx:afterRequest', function(e) {
  if (e.target.id === 'vendor-form') {
    hideSubmitLoading();
    
    try {
      const response = JSON.parse(e.detail.xhr.response);
      
      if (response.status === 'success') {
        showToast(response.message, true);
        closeVendorForm();
        // Refresh vendor list
        htmx.trigger('#vendors-list', 'refresh');
        // Refresh stats
        loadVendorStats();
      } else if (response.status === 'validation_error') {
        showToast(response.message, false);
        if (response.errors) {
          showFormErrors(response.errors);
        }
      } else {
        showToast(response.message, false);
      }
    } catch (error) {
      showToast('An error occurred. Please try again.', false);
    }
  }
});

// Handle form errors
document.addEventListener('htmx:responseError', function(e) {
  if (e.target.id === 'vendor-form') {
    hideSubmitLoading();
    showToast('Network error. Please check your connection and try again.', false);
  }
});

// Clear validation errors when user starts typing
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('vendor-form');
  if (form) {
    const fields = form.querySelectorAll('input, textarea, select');
    fields.forEach(field => {
      field.addEventListener('input', function() {
        // Clear error state for this field
        this.classList.remove('border-red-500');
        this.classList.add('border-slate-700');
        
        const errorElement = this.parentNode.querySelector('.field-error');
        if (errorElement) {
          errorElement.classList.add('hidden');
          errorElement.textContent = '';
        }
      });
    });
  }
});

// Make functions globally available
window.closeVendorForm = closeVendorForm;
window.deleteVendor = deleteVendor;
</script>

<style>
.form-section {
  scroll-margin-top: 100px;
}

/* Custom scrollbar for better UX */
.glass-effect::-webkit-scrollbar {
  width: 6px;
}

.glass-effect::-webkit-scrollbar-track {
  background: rgba(30, 41, 59, 0.5);
  border-radius: 3px;
}

.glass-effect::-webkit-scrollbar-thumb {
  background: rgba(148, 163, 184, 0.5);
  border-radius: 3px;
}

.glass-effect::-webkit-scrollbar-thumb:hover {
  background: rgba(148, 163, 184, 0.7);
}

/* Transition for error states */
input, textarea, select {
  transition: border-color 0.2s ease-in-out;
}

/* Loading button animation */
.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
</style>
# End of app/templates/fragments/vendor_form.html

# Start of app/templates/fragments/vendor_list.html
<!-- app/templates/fragments/vendor_list.html -->
{% if vendors_with_counts %}
  {% for vendor, component_count in vendors_with_counts %}
  <div class="vendor-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
       data-vendor-id="{{ vendor.id }}"
       hx-get="/api/vendors/{{ vendor.id }}/details" 
       hx-target="#vendor-details" 
       hx-swap="innerHTML"
       hx-indicator="#vendor-{{ vendor.id }}-loading">
    
    <!-- Loading indicator (hidden by default) -->
    <div id="vendor-{{ vendor.id }}-loading" class="htmx-indicator absolute inset-0 bg-slate-800/80 rounded-lg flex items-center justify-center z-10">
      <div class="flex items-center space-x-2 text-slate-300">
        <svg class="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span class="text-sm">Loading...</span>
      </div>
    </div>
    
    <div class="flex items-start justify-between mb-4">
      <div class="flex items-start space-x-4 flex-1">
        <!-- Vendor Logo -->
        {% if vendor.logo_url %}
        <div class="w-12 h-12 rounded-lg overflow-hidden bg-slate-700 flex-shrink-0">
          <img src="{{ vendor.logo_url }}" alt="{{ vendor.name }} logo" 
               class="w-full h-full object-contain"
               onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
          <div class="w-full h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg hidden items-center justify-center">
            <span class="text-lg font-bold text-white">{{ vendor.name[0].upper() }}</span>
          </div>
        </div>
        {% else %}
        <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center flex-shrink-0">
          <span class="text-lg font-bold text-white">{{ vendor.name[0].upper() }}</span>
        </div>
        {% endif %}
        
        <!-- Vendor Info -->
        <div class="flex-1 min-w-0">
          <div class="flex items-center space-x-3 mb-2">
            <h3 class="font-semibold text-white text-lg truncate">{{ vendor.name }}</h3>
            <div class="w-2 h-2 bg-green-500 rounded-full flex-shrink-0" title="Active vendor"></div>
          </div>
          
          {% if vendor.description %}
          <p class="text-slate-400 text-sm mb-3 line-clamp-2">
            {{ vendor.description[:120] }}{% if vendor.description|length > 120 %}...{% endif %}
          </p>
          {% endif %}
          
          <div class="flex items-center space-x-4 text-xs text-slate-400">
            <span class="flex items-center">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
              </svg>
              {{ component_count }} component{{ 's' if component_count != 1 else '' }}
            </span>
            {% if vendor.website %}
            <span class="flex items-center">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.032 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
              </svg>
              Website
            </span>
            {% endif %}
            {% if vendor.vendor_email %}
            <span class="flex items-center">
              <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/>
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/>
              </svg>
              Email
            </span>
            {% endif %}
          </div>
        </div>
      </div>
      
      <!-- Stats Badge -->
      <div class="text-center flex-shrink-0">
        <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-1">
          <span class="text-lg font-bold text-white">{{ component_count }}</span>
        </div>
        <div class="text-xs text-slate-500">Component{{ 's' if component_count != 1 else '' }}</div>
      </div>
    </div>
    
    <!-- Footer with Quick Actions -->
    <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
      <div class="flex items-center space-x-3">
        {% if vendor.website %}
        <a href="{{ vendor.website }}" target="_blank" 
           class="text-xs text-blue-400 hover:text-blue-300 transition-colors flex items-center hover:underline"
           onclick="event.stopPropagation()" title="Visit Website">
          <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.032 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
          </svg>
          {{ vendor.website.replace('https://', '').replace('http://', '').split('/')[0][:25] }}{% if vendor.website.replace('https://', '').replace('http://', '').split('/')[0]|length > 25 %}...{% endif %}
        </a>
        {% endif %}
        
        {% if vendor.vendor_email %}
        <a href="mailto:{{ vendor.vendor_email }}" 
           class="text-xs text-green-400 hover:text-green-300 transition-colors hover:underline"
           onclick="event.stopPropagation()" title="Send Email">
          <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/>
            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/>
          </svg>
          Contact
        </a>
        {% endif %}
        
        {% if vendor.vendor_phone %}
        <a href="tel:{{ vendor.vendor_phone }}" 
           class="text-xs text-cyan-400 hover:text-cyan-300 transition-colors hover:underline"
           onclick="event.stopPropagation()" title="Call">
          <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
          </svg>
          Call
        </a>
        {% endif %}
      </div>
      
      <button class="text-xs text-slate-500 hover:text-slate-300 transition-colors"
              hx-get="/api/vendors/{{ vendor.id }}/form" 
              hx-target="#vendor-details" 
              hx-swap="innerHTML"
              onclick="event.stopPropagation()"
              title="Edit Vendor">
        <svg class="w-3 h-3 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
        </svg>
        Edit
      </button>
    </div>
  </div>
  {% endfor %}
{% else %}
<div class="text-center py-12">
  <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
      <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
    </svg>
  </div>
  <h3 class="text-lg font-medium text-slate-400 mb-2">No Vendors Found</h3>
  <p class="text-slate-500 mb-4">Try adjusting your search filters or add a new vendor.</p>
  <button hx-get="/api/vendors/form" 
          hx-target="#vendor-details" 
          hx-swap="innerHTML"
          class="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 rounded-lg font-medium transition-all text-white shadow-lg">
    <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
    </svg>
    Add First Vendor
  </button>
</div>
{% endif %}

<!-- Vendor count and filter state info (hidden, used by JavaScript) -->
<div id="vendor-list-meta" class="hidden" data-count="{{ vendors_with_counts|length if vendors_with_counts else 0 }}"></div>
# End of app/templates/fragments/vendor_list.html

# Start of app/templates/fragments/agency_details.html
<!-- app/templates/fragments/agency_details.html -->
<div class="glass-effect rounded-xl overflow-hidden border border-slate-700/50">
  <!-- Header Image -->
  <div class="relative aspect-[2/1] bg-gradient-to-r from-slate-800 to-slate-700">
    <img src="{{ agency.header_url }}" 
         alt="{{ agency.name }} header" 
         class="w-full h-full object-cover"
         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
    <!-- Fallback gradient when image doesn't exist -->
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20 hidden items-center justify-center">
      <svg class="w-12 h-12 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
      </svg>
    </div>
  </div>
  
  <!-- Content with name and buttons -->
  <div class="p-6">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-2xl font-bold text-white">{{ agency.name }}</h2>
      <div class="flex gap-2">
      <button hx-get="/api/agencies/{{ agency.id }}/form" hx-target="#agency-details" hx-swap="innerHTML"
              class="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors">
        Edit
      </button>
      <button onclick="closeAgencyDetails()"
              class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
        ✕ Close
      </button>
    </div>
  </div>
  
  <div class="space-y-6">
    <!-- Basic Information Section -->
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
        </svg>
        Location & Identity
      </h3>
      <div class="space-y-3 text-sm">
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Location:</span>
          <span class="text-white">{{ agency.location or 'Not specified' }}</span>
        </div>
        {% if agency.description %}
        <div class="pt-1">
          <span class="text-slate-400 block mb-2">Description:</span>
          <p class="text-slate-300 leading-relaxed">{{ agency.description }}</p>
        </div>
        {% endif %}
      </div>
    </div>

    <!-- Leadership & Organization -->
    {% if agency.ceo %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-green-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"/>
        </svg>
        Leadership
      </h3>
      <div class="text-sm">
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">CEO:</span>
          <span class="text-white">{{ agency.ceo }}</span>
        </div>
      </div>
    </div>
    {% endif %}

    <!-- Contact Information -->
    {% if agency.contact_name or agency.contact_email or agency.contact_phone or agency.phone_number %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
        </svg>
        Contact Information
      </h3>
      <div class="space-y-3 text-sm">
        {% if agency.contact_name %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Contact Person:</span>
          <span class="text-white">{{ agency.contact_name }}</span>
        </div>
        {% endif %}
        {% if agency.contact_email %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Email:</span>
          <a href="mailto:{{ agency.contact_email }}" class="text-blue-400 hover:text-blue-300 transition-colors break-all">{{ agency.contact_email }}</a>
        </div>
        {% endif %}
        {% if agency.contact_phone %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Phone:</span>
          <a href="tel:{{ agency.contact_phone }}" class="text-blue-400 hover:text-blue-300 transition-colors">{{ agency.contact_phone }}</a>
        </div>
        {% endif %}
        {% if agency.phone_number and agency.phone_number != agency.contact_phone %}
        <div class="flex flex-col sm:flex-row sm:justify-between">
          <span class="text-slate-400 mb-1 sm:mb-0">Main Phone:</span>
          <a href="tel:{{ agency.phone_number }}" class="text-blue-400 hover:text-blue-300 transition-colors">{{ agency.phone_number }}</a>
        </div>
        {% endif %}
      </div>
    </div>
    {% endif %}

    <!-- Address & Location -->
    {% if agency.address_hq %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-orange-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm0 2v.01H16V6H4zm0 2v8h12V8H4z" clip-rule="evenodd"/>
        </svg>
        Headquarters
      </h3>
      <div class="text-sm">
        <p class="text-slate-300 leading-relaxed">{{ agency.address_hq }}</p>
      </div>
    </div>
    {% endif %}

    <!-- Online Resources -->
    {% if agency.website or agency.transit_map_link %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-cyan-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"/>
        </svg>
        Online Resources
      </h3>
      <div class="space-y-3 text-sm">
        {% if agency.website %}
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
          <span class="text-slate-400 mb-2 sm:mb-0">Website:</span>
          <a href="{{ agency.website }}" target="_blank" class="text-blue-400 hover:text-blue-300 transition-colors flex items-center w-fit">
            Visit Site
            <svg class="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
              <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-1a1 1 0 10-2 0v1H5V7h1a1 1 0 000-2H5z"/>
            </svg>
          </a>
        </div>
        {% endif %}
        {% if agency.transit_map_link %}
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
          <span class="text-slate-400 mb-2 sm:mb-0">Transit Map:</span>
          <a href="{{ agency.transit_map_link }}" target="_blank" class="text-blue-400 hover:text-blue-300 transition-colors flex items-center w-fit">
            View Map
            <svg class="w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
              <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
              <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-1a1 1 0 10-2 0v1H5V7h1a1 1 0 000-2H5z"/>
            </svg>
          </a>
        </div>
        {% endif %}
      </div>
    </div>
    {% endif %}

    <!-- Additional Metadata -->
    {% if agency.additional_metadata %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
        </svg>
        Additional Information
      </h3>
      <div class="text-sm space-y-2">
        {% for key, value in agency.additional_metadata.items() %}
        <div class="flex flex-col sm:flex-row sm:justify-between py-1">
          <span class="text-slate-400 mb-1 sm:mb-0">{{ key|title }}:</span>
          <span class="text-white">{{ value }}</span>
        </div>
        {% endfor %}
      </div>
    </div>
    {% endif %}

    <!-- Function Implementations -->
    {% if agency.function_implementations %}
    <div class="bg-slate-700/30 rounded-lg p-4">
      <h3 class="font-semibold text-white mb-3 flex items-center">
        <svg class="w-5 h-5 mr-2 text-indigo-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z"/>
        </svg>
        Technology Implementations ({{ agency.function_implementations|length }})
      </h3>
      <div class="space-y-3 max-h-64 overflow-y-auto">
        {% for impl in agency.function_implementations %}
        <div class="bg-slate-600/30 rounded-lg p-3">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-1">
            <span class="text-sm font-medium text-white mb-1 sm:mb-0">{{ impl.function.name }}</span>
            <div class="flex items-center space-x-2">
              <span class="text-xs text-slate-400 bg-slate-700 px-2 py-1 rounded">
                {{ impl.function.functional_area.name }}
              </span>
              <span class="text-xs px-2 py-1 rounded 
                {% if impl.status == 'Active' %}bg-green-600/20 text-green-300
                {% elif impl.status == 'Planned' %}bg-yellow-600/20 text-yellow-300
                {% else %}bg-slate-600/20 text-slate-300{% endif %}">
                {{ impl.status }}
              </span>
            </div>
          </div>
          <div class="text-xs text-slate-400 flex items-center justify-between">
            <span>Component: {{ impl.component.name }}</span>
            {% if impl.deployment_date %}
            <span>Deployed: {{ impl.deployment_date.strftime('%Y-%m-%d') }}</span>
            {% endif %}
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
    {% endif %}
  </div>
</div>

<script>
function closeAgencyDetails() {
  document.getElementById('agency-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Agency Details</h3>
      <p class="text-slate-500 text-sm">Click on a transit agency to view details or use the Add button to create a new one.</p>
    </div>`;
}
</script>
# End of app/templates/fragments/agency_details.html

# Start of app/templates/fragments/agency_list.html
<!-- app/templates/fragments/agency_list.html -->
{% if agencies %}
  {% for agency in agencies %}
  <div class="agency-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
       hx-get="/api/agencies/{{ agency.id }}/details" hx-target="#agency-details" hx-swap="innerHTML">
    
    <div class="flex items-start justify-between mb-4">
      <div class="flex items-start space-x-4 flex-1">
        <!-- Agency Logo -->
        {% if agency.logo_url %}
        <div class="w-12 h-12 rounded-lg overflow-hidden bg-slate-700 flex-shrink-0">
          <img src="{{ agency.logo_url }}" alt="{{ agency.name }} logo" 
               class="w-full h-full object-contain">
        </div>
        {% else %}
        <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center flex-shrink-0">
          <span class="text-lg font-bold text-white">{{ agency.name[0].upper() }}</span>
        </div>
        {% endif %}
        
        <!-- Agency Info -->
        <div class="flex-1">
          <div class="flex items-center space-x-3 mb-2">
            <h3 class="font-semibold text-white text-lg">{{ agency.name }}</h3>
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
          </div>
          
          {% if agency.location %}
          <p class="text-slate-300 text-sm mb-2">📍 {{ agency.location }}</p>
          {% endif %}
          
          {% if agency.description %}
          <p class="text-slate-400 text-sm mb-3">{{ agency.description[:120] }}{% if agency.description|length > 120 %}...{% endif %}</p>
          {% endif %}
          
          <div class="flex items-center space-x-4 text-xs text-slate-400">
            <span>🔧 {{ agency.function_implementations|length }} implementations</span>
            {% if agency.contact_name %}
            <span>👤 {{ agency.contact_name }}</span>
            {% endif %}
          </div>
        </div>
      </div>
      
      <!-- Stats Badge -->
      <div class="text-center">
        <div class="w-10 h-10 bg-blue-600/20 border border-blue-600/30 rounded-full flex items-center justify-center mb-1">
          <span class="text-sm font-bold text-blue-300">{{ agency.function_implementations|length }}</span>
        </div>
        <div class="text-xs text-slate-500">Tech</div>
      </div>
    </div>
    
    <!-- Footer with Quick Actions -->
    <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
      <div class="flex items-center space-x-3">
        {% if agency.website %}
        <a href="{{ agency.website }}" target="_blank" 
           class="text-xs text-blue-400 hover:text-blue-300 transition-colors"
           onclick="event.stopPropagation()" title="Website">
          🌐 Website
        </a>
        {% endif %}
        
        {% if agency.contact_email %}
        <a href="mailto:{{ agency.contact_email }}" 
           class="text-xs text-green-400 hover:text-green-300 transition-colors"
           onclick="event.stopPropagation()" title="Email">
          📧 Contact
        </a>
        {% endif %}
      </div>
      
      <button class="text-xs text-slate-500 hover:text-slate-300 transition-colors"
              hx-get="/api/agencies/{{ agency.id }}/form" hx-target="#agency-details" hx-swap="innerHTML"
              onclick="event.stopPropagation()">
        Edit →
      </button>
    </div>
  </div>
  {% endfor %}
{% else %}
<div class="text-center py-12">
  <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
    </svg>
  </div>
  <h3 class="text-lg font-medium text-slate-400 mb-2">No Transit Agencies Found</h3>
  <p class="text-slate-500">Try adjusting your search or add a new transit agency.</p>
</div>
{% endif %}
# End of app/templates/fragments/agency_list.html

# Start of app/templates/fragments/agency_form.html
<!-- app/templates/fragments/agency_form.html -->
<div class="glass-effect rounded-xl p-6 border border-slate-700/50 max-h-[90vh] overflow-y-auto">
  <div class="flex items-center justify-between mb-6 sticky top-0 bg-slate-800/90 backdrop-blur-sm z-10 py-2 -mt-2">
    <h2 class="text-xl font-bold text-white">
      Add Agency
    </h2>
    <button onclick="closeForm()"
            class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
      ✕ Cancel
    </button>
  </div>

  <form action="{{ url_for('agency.add_agency') }}" method="POST" class="space-y-8">
    {{ form.hidden_tag() }}

    <!-- Basic Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        Basic Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="md:col-span-1">
          {{ form.name.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.name(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors", placeholder="e.g., Metro Transit") }}
          <div class="mt-4">
            <label for="short_name" class="block text-sm font-medium text-slate-300 mb-2">Short Name</label>
            <input type="text" id="short_name" name="short_name" class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors">
          </div>
          {% for error in form.name.errors %}
            <span class="text-red-400 text-xs">{{ error }}</span>
          {% endfor %}
        </div>
        <div class="md:col-span-1">
          {{ form.location.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.location(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors", placeholder="e.g., Minneapolis, MN") }}
        </div>
        <div class="md:col-span-2">
          {{ form.description.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.description(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors resize-vertical", placeholder="Brief description of the agency and its services") }}
        </div>
      </div>
    </div>

    <!-- Address & Location Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        Address & Location
      </h3>
      <div>
        {{ form.address_hq.label(class="block text-sm font-medium text-slate-300 mb-2") }}
        {{ form.address_hq(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-green-500 focus:ring-1 focus:ring-green-500 focus:outline-none transition-colors resize-vertical", placeholder="e.g., 560 6th Ave N, Seattle, WA 98109") }}
        <p class="text-xs text-slate-500 mt-1">Full street address of the main headquarters</p>
      </div>
    </div>

    <!-- Leadership Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        Leadership
      </h3>
      <div>
        {{ form.ceo.label(class="block text-sm font-medium text-slate-300 mb-2") }}
        {{ form.ceo(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors", placeholder="e.g., John Smith") }}
        <p class="text-xs text-slate-500 mt-1">Current CEO or top executive</p>
      </div>
    </div>

    <!-- Contact Information Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        Contact Information
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          {{ form.contact_name.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.contact_name(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors", placeholder="e.g., Jane Doe") }}
        </div>
        <div>
          {{ form.contact_email.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.contact_email(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors", placeholder="e.g., contact@agency.gov") }}
        </div>
        <div>
          {{ form.contact_phone.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.contact_phone(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors", placeholder="e.g., (206) 555-0123") }}
        </div>
        <div>
          {{ form.phone_number.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.phone_number(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors", placeholder="e.g., (206) 555-0100") }}
        </div>
      </div>
      <p class="text-xs text-slate-500 mt-2">Primary contact is for direct inquiries, main phone is the public number</p>
    </div>

    <!-- Web & Resources Section -->
    <div class="form-section">
      <h3 class="text-lg font-semibold text-white mb-4 flex items-center border-b border-slate-600 pb-2">
        Web & Resources
      </h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          {{ form.website.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.website(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-yellow-500 focus:ring-1 focus:ring-yellow-500 focus:outline-none transition-colors", placeholder="e.g., https://www.agency.gov") }}
          <p class="text-xs text-slate-500 mt-1">Main public website</p>
        </div>
        <div>
          {{ form.transit_map_link.label(class="block text-sm font-medium text-slate-300 mb-2") }}
          {{ form.transit_map_link(class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white placeholder-slate-400 focus:border-yellow-500 focus:ring-1 focus:ring-yellow-500 focus:outline-none transition-colors", placeholder="e.g., https://www.agency.gov/map") }}
          <p class="text-xs text-slate-500 mt-1">Link to interactive transit map</p>
        </div>
      </div>
    </div>

    <!-- Form Actions -->
    <div class="form-section sticky bottom-0 bg-slate-800/95 backdrop-blur-sm border-t border-slate-600 pt-6 mt-8">
      <div class="flex flex-col sm:flex-row gap-3">
        <button type="submit" 
                class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white shadow-lg">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
          Create Agency
        </button>
        <button type="button" onclick="closeForm()" 
                class="px-6 py-3 bg-slate-700 hover:bg-slate-600 rounded-lg font-medium transition-colors text-white">
          Cancel
        </button>
      </div>
    </div>
  </form>
</div>

# End of app/templates/fragments/agency_form.html

# Start of app/templates/fragments/functional_area_details.html
<!-- app/templates/fragments/functional_area_details.html -->
<div class="glass-effect rounded-xl p-6 border border-slate-700/50">
  <div class="flex items-center justify-between mb-6">
    <div class="flex-1">
      <h2 class="text-2xl font-bold text-white mb-2">{{ functional_area.name }}</h2>
      <div class="flex items-center space-x-4 text-sm text-slate-400">
        <span class="flex items-center">
          <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          Global Functional Area
        </span>
        
        <span class="flex items-center">
          <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M9 3a1 1 0 012 0v5.5a.5.5 0 001 0V4a1 1 0 112 0v4.5a.5.5 0 001 0V6a1 1 0 112 0v5a7 7 0 11-14 0V9a1 1 0 012 0v2.5a.5.5 0 001 0V4a1 1 0 012 0v4.5a.5.5 0 001 0V3z" clip-rule="evenodd"/>
          </svg>
          {{ functional_area.functions|length }} Functions
        </span>
      </div>
    </div>
    <div class="flex gap-2">
      <button hx-get="/api/functional-areas/{{ functional_area.id }}/form" hx-target="#functional-area-details" hx-swap="innerHTML"
              class="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors">
        Edit
      </button>
      <button onclick="closeFunctionalAreaDetails()"
              class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
        ✕ Close
      </button>
    </div>
  </div>
  
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    
    <!-- Left Column: Description & Functions -->
    <div class="space-y-6">
      
      <!-- Description -->
      {% if functional_area.description %}
      <div>
        <h3 class="font-medium text-white mb-3">Description</h3>
        <div class="p-4 bg-slate-700/30 rounded-lg">
          <p class="text-slate-300 text-sm leading-relaxed">{{ functional_area.description }}</p>
        </div>
      </div>
      {% endif %}

      <!-- Functions -->
      {% if functional_area.sorted_functions %}
      <div>
        <div class="flex items-center justify-between mb-4">
          <h3 class="font-medium text-white">Functions ({{ functional_area.sorted_functions|length }})</h3>
          <div class="flex items-center space-x-2 text-xs text-slate-400">
            <div class="flex items-center space-x-1">
              <div class="w-2 h-2 bg-red-500 rounded-full"></div>
              <span>High</span>
            </div>
            <div class="flex items-center space-x-1">
              <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
              <span>Medium</span>
            </div>
            <div class="flex items-center space-x-1">
              <div class="w-2 h-2 bg-green-500 rounded-full"></div>
              <span>Low</span>
            </div>
          </div>
        </div>
        
        <div class="grid grid-cols-1 gap-3">
          {% for function in functional_area.sorted_functions %}
          <div class="glass-effect rounded-lg border border-slate-700/50 p-4 hover:border-slate-600/50 transition-all duration-200 cursor-pointer group">
            <div class="flex items-start justify-between">
              <div class="flex-1 min-w-0">
                <div class="flex items-center space-x-3 mb-2">
                  <div class="w-3 h-3 rounded-full flex-shrink-0
                    {% if function.criticality.value == 'high' %}bg-red-500
                    {% elif function.criticality.value == 'medium' %}bg-yellow-500
                    {% else %}bg-green-500{% endif %}">
                  </div>
                  <h4 class="font-semibold text-white text-sm group-hover:text-blue-300 transition-colors truncate">
                    {{ function.name }}
                  </h4>
                </div>
                
                {% if function.description %}
                <p class="text-xs text-slate-400 leading-relaxed mb-3 line-clamp-2">
                  {{ function.description }}
                </p>
                {% endif %}
                
                <div class="flex items-center space-x-4 text-xs text-slate-500">
                  <div class="flex items-center space-x-1">
                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                    <span>{{ function.component_count }} components</span>
                  </div>
                  <div class="flex items-center space-x-1">
                    <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                    </svg>
                    <span>{{ function.agency_count }} agencies</span>
                  </div>
                </div>
              </div>
              
              <div class="flex-shrink-0 ml-4">
                <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium border
                  {% if function.criticality.value == 'high' %}bg-red-600/10 text-red-300 border-red-600/20
                  {% elif function.criticality.value == 'medium' %}bg-yellow-600/10 text-yellow-300 border-yellow-600/20
                  {% else %}bg-green-600/10 text-green-300 border-green-600/20{% endif %}">
                  {{ function.criticality.value.title() }} Priority
                </span>
              </div>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
      {% else %}
      <div>
        <h3 class="font-medium text-white mb-4">Functions</h3>
        <div class="glass-effect rounded-lg border border-slate-700/50 text-center py-12">
          <div class="w-16 h-16 bg-slate-700/50 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h4 class="text-lg font-medium text-slate-400 mb-2">No Functions Defined</h4>
          <p class="text-slate-500 text-sm max-w-sm mx-auto">
            No functions have been defined for this functional area yet. Functions will appear here once they are created.
          </p>
        </div>
      </div>
      {% endif %}
    </div>

    <!-- Right Column: Usage Statistics & Actions -->
    <div class="space-y-6">
      
      <!-- Usage Statistics -->
      <div>
        <h3 class="font-medium text-white mb-3">Usage Statistics</h3>
        <div class="space-y-3">
          
          <!-- Components implementing these functions -->
          {% set component_count = functional_area.functions | map(attribute='components') | map('length') | sum %}
          <div class="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                </svg>
              </div>
              <div>
                <p class="text-slate-400 text-xs uppercase tracking-wide">Components</p>
                <p class="text-white font-medium">{{ component_count }} implementing</p>
              </div>
            </div>
          </div>
          
          <!-- Agency implementations -->
          {% set agency_implementations = [] %}
          {% for function in functional_area.functions %}
            {% for impl in function.agency_implementations %}
              {% if impl.agency not in agency_implementations %}
                {% set _ = agency_implementations.append(impl.agency) %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          
          <div class="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg">
            <div class="flex items-center space-x-3">
              <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                </svg>
              </div>
              <div>
                <p class="text-slate-400 text-xs uppercase tracking-wide">Agencies</p>
                <p class="text-white font-medium">{{ agency_implementations|length }} using</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Criticality Breakdown -->
      {% if functional_area.functions %}
      <div>
        <h3 class="font-medium text-white mb-3">Function Criticality</h3>
        {% set high_functions = functional_area.functions | selectattr('criticality.value', 'equalto', 'high') | list %}
        {% set medium_functions = functional_area.functions | selectattr('criticality.value', 'equalto', 'medium') | list %}
        {% set low_functions = functional_area.functions | selectattr('criticality.value', 'equalto', 'low') | list %}
        
        <div class="space-y-2">
          <div class="flex items-center justify-between p-2 bg-red-600/20 border border-red-600/30 rounded">
            <span class="text-sm text-red-300 flex items-center">
              <div class="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
              High Priority
            </span>
            <span class="text-sm text-red-200">{{ high_functions|length }}</span>
          </div>
          <div class="flex items-center justify-between p-2 bg-yellow-600/20 border border-yellow-600/30 rounded">
            <span class="text-sm text-yellow-300 flex items-center">
              <div class="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
              Medium Priority
            </span>
            <span class="text-sm text-yellow-200">{{ medium_functions|length }}</span>
          </div>
          <div class="flex items-center justify-between p-2 bg-green-600/20 border border-green-600/30 rounded">
            <span class="text-sm text-green-300 flex items-center">
              <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
              Low Priority
            </span>
            <span class="text-sm text-green-200">{{ low_functions|length }}</span>
          </div>
        </div>
      </div>
      {% endif %}
      
      <!-- Quick Actions -->
      <div>
        <h3 class="font-medium text-white mb-3">Quick Actions</h3>
        <div class="space-y-2">
          <button hx-get="/api/functional-areas/{{ functional_area.id }}/form" hx-target="#functional-area-details" hx-swap="innerHTML"
                  class="w-full flex items-center justify-center p-3 bg-blue-600/20 border border-blue-600/30 rounded-lg hover:bg-blue-600/30 transition-colors text-blue-300 text-sm">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
            </svg>
            Edit Functional Area
          </button>
          
          <button onclick="window.location.href='/components?functional_area={{ functional_area.name }}'"
                  class="w-full flex items-center justify-center p-3 bg-green-600/20 border border-green-600/30 rounded-lg hover:bg-green-600/30 transition-colors text-green-300 text-sm">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
            View Components
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function closeFunctionalAreaDetails() {
  document.getElementById('functional-area-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Functional Area Details</h3>
      <p class="text-slate-500 text-sm">Click on a functional area to view details or use the Add button to create a new one.</p>
    </div>`;
}
</script>

# End of app/templates/fragments/functional_area_details.html

# Start of app/templates/fragments/functional_area_form.html
<!-- app/templates/fragments/functional_area_form.html -->
<div class="glass-effect rounded-xl p-6 border border-slate-700/50">
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-xl font-bold text-white">
      {% if functional_area %}Edit Functional Area{% else %}Add Functional Area{% endif %}
    </h2>
    <button onclick="closeFunctionalAreaForm()"
            class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors">
      ✕ Cancel
    </button>
  </div>

  <form {% if functional_area %}hx-put="/api/functional-areas/{{ functional_area.id }}"{% else %}hx-post="/api/functional-areas"{% endif %}
        hx-target="#result-message" hx-swap="innerHTML">
    
    <div class="space-y-4">
      <!-- Info Note -->
      <div class="p-4 bg-blue-600/10 border border-blue-600/20 rounded-lg">
        <div class="flex items-start space-x-3">
          <svg class="w-5 h-5 text-blue-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
          </svg>
          <div>
            <p class="text-blue-300 text-sm font-medium">Global Functional Area</p>
            <p class="text-blue-200 text-xs mt-1">This functional area will be available for all transit agencies to use. Functions within this area can be implemented by different agencies using different components.</p>
          </div>
        </div>
      </div>

      <div>
        <label for="name" class="block text-sm font-medium text-slate-300 mb-2">Name *</label>
        <input type="text" id="name" name="name" required
               value="{{ functional_area.name if functional_area else '' }}"
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-purple-500 focus:outline-none"
               placeholder="e.g., Operations Management (Real-Time)">
      </div>

      <div>
        <label for="description" class="block text-sm font-medium text-slate-300 mb-2">Description</label>
        <textarea id="description" name="description" rows="4"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-purple-500 focus:outline-none"
                  placeholder="Detailed description of this functional area and its scope...">{{ functional_area.description if functional_area else '' }}</textarea>
        <p class="text-xs text-slate-500 mt-1">Provide a comprehensive description that helps agencies understand when to use this functional area.</p>
      </div>
    </div>

    <div id="result-message" class="mt-4"></div>

    <div class="flex gap-3 mt-6">
      <button type="submit" 
              class="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all">
        {% if functional_area %}Update Functional Area{% else %}Create Functional Area{% endif %}
      </button>
      {% if functional_area %}
      <button type="button" 
              hx-delete="/api/functional-areas/{{ functional_area.id }}"
              hx-confirm="Are you sure you want to delete this functional area? This will also delete all associated functions and agency implementations."
              hx-target="#result-message"
              class="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg font-medium transition-colors">
        Delete
      </button>
      {% endif %}
    </div>
  </form>
</div>

<script>
function closeFunctionalAreaForm() {
  document.getElementById('functional-area-details').innerHTML = `
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
      <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-slate-400 mb-2">Functional Area Details</h3>
      <p class="text-slate-500 text-sm">Click on a functional area to view details or use the Add button to create a new one.</p>
    </div>`;
}
</script>
# End of app/templates/fragments/functional_area_form.html

# Start of app/templates/fragments/functional_area_list.html
<!-- app/templates/fragments/functional_area_list.html -->
{% if functional_areas %}
  {% for area in functional_areas %}
  <div class="functional-area-card bg-slate-800/50 rounded-lg border border-slate-700/30 p-6 hover:bg-slate-800/70 transition-all cursor-pointer"
       hx-get="/api/functional-areas/{{ area.id }}/details" hx-target="#functional-area-details" hx-swap="innerHTML">
    <div class="flex items-start justify-between mb-4">
      <div class="flex-1">
        <h3 class="font-semibold text-white text-lg mb-2">{{ area.name }}</h3>
        {% if area.description %}
        <p class="text-slate-300 text-sm mb-3">{{ area.description }}</p>
        {% endif %}
        <div class="flex items-center space-x-4 text-xs text-slate-400">
          <span>🔧 {{ area.functions|length }} functions</span>
          <span>🌍 Global (All Agencies)</span>
        </div>
      </div>
      <div class="text-right">
        <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center mb-2">
          <span class="text-lg font-bold text-white">{{ area.functions|length }}</span>
        </div>
        <div class="text-xs text-slate-500 text-center">Functions</div>
      </div>
    </div>
    
    <div class="flex items-center justify-between pt-3 border-t border-slate-700/30">
      <div class="flex items-center space-x-2">
        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
        <span class="text-xs text-slate-400">Active</span>
      </div>
      <button class="text-xs text-slate-500 hover:text-slate-300 transition-colors"
              hx-get="/api/functional-areas/{{ area.id }}/form" hx-target="#functional-area-details" hx-swap="innerHTML"
              onclick="event.stopPropagation()">
        Edit
      </button>
    </div>
  </div>
  {% endfor %}
{% else %}
<div class="text-center py-12">
  <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
    </svg>
  </div>
  <h3 class="text-lg font-medium text-slate-400 mb-2">No Functional Areas Found</h3>
  <p class="text-slate-500">Try adjusting your search or add a new functional area.</p>
</div>
{% endif %}
# End of app/templates/fragments/functional_area_list.html

# Start of scripts/load_functional_areas.py
#!/usr/bin/env python3
"""
Functional Areas Data Loader

Usage:
    python load_functional_areas.py functional_areas.json
"""

import json
import os
import sys
import argparse

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from app import create_app, db
from app.models.tran import FunctionalArea

def load_functional_areas_from_file(filename):
    """Load functional areas from JSON file"""
    
    app = create_app()
    
    with app.app_context():
        print(f"📁 Loading functional areas from {filename}...")
        
        # Load JSON data
        with open(filename, 'r') as f:
            data = json.load(f)
        
        stats = {'added': 0, 'skipped': 0}
        
        for fa_data in data.get('functional_areas', []):
            # Check if functional area already exists
            existing = FunctionalArea.query.filter_by(name=fa_data['name']).first()
            if existing:
                print(f"  ⚠️  Functional Area '{fa_data['name']}' already exists, skipping")
                stats['skipped'] += 1
                continue
            
            # Create functional area
            functional_area = FunctionalArea(
                name=fa_data['name'],
                description=fa_data.get('description')
            )
            
            db.session.add(functional_area)
            stats['added'] += 1
            print(f"  ➕ Added functional area: {functional_area.name}")
        
        try:
            db.session.commit()
            print(f"\n✅ Functional areas loaded successfully!")
            print(f"📊 Summary:")
            print(f"   Added: {stats['added']}")
            print(f"   Skipped: {stats['skipped']}")
            print(f"   Total Functional Areas: {FunctionalArea.query.count()}")
            return True
        except Exception as e:
            db.session.rollback()
            print(f"\n❌ Error committing changes: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description="Load functional areas into the database.")
    parser.add_argument('file', help='JSON file to load')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.file):
        print(f"❌ File not found: {args.file}")
        return
    
    success = load_functional_areas_from_file(args.file)
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
# End of scripts/load_functional_areas.py

# Start of scripts/load_vendors.py
#!/usr/bin/env python3
"""
Vendors Data Loader

Usage:
    python load_vendors.py vendors.json
"""

import json
import os
import sys
import argparse

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from app import create_app, db
from app.models.tran import Vendor

def load_vendors_from_file(filename):
    """Load vendors from JSON file"""
    
    app = create_app()
    
    with app.app_context():
        print(f"🏢 Loading vendors from {filename}...")
        
        # Load JSON data
        with open(filename, 'r') as f:
            data = json.load(f)
        
        stats = {'added': 0, 'skipped': 0}
        
        for vendor_data in data.get('vendors', []):
            # Check if vendor already exists
            existing = Vendor.query.filter_by(name=vendor_data['name']).first()
            if existing:
                print(f"  ⚠️  Vendor '{vendor_data['name']}' already exists, skipping")
                stats['skipped'] += 1
                continue
            
            # Create vendor
            vendor = Vendor(
                name=vendor_data['name'],
                description=vendor_data.get('description'),
                website=vendor_data.get('website'),
                vendor_email=vendor_data.get('vendor_email'),
                vendor_phone=vendor_data.get('vendor_phone'),
                contact_name=vendor_data.get('contact_name'),
                contact_email=vendor_data.get('contact_email'),
                contact_phone=vendor_data.get('contact_phone')
            )
            
            db.session.add(vendor)
            stats['added'] += 1
            print(f"  ➕ Added vendor: {vendor.name}")
        
        try:
            db.session.commit()
            print(f"\n✅ Vendors loaded successfully!")
            print(f"📊 Summary:")
            print(f"   Added: {stats['added']}")
            print(f"   Skipped: {stats['skipped']}")
            print(f"   Total Vendors: {Vendor.query.count()}")
            return True
        except Exception as e:
            db.session.rollback()
            print(f"\n❌ Error committing changes: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description="Load vendors into the database.")
    parser.add_argument('file', help='JSON file to load')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.file):
        print(f"❌ File not found: {args.file}")
        return
    
    success = load_vendors_from_file(args.file)
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
# End of scripts/load_vendors.py

# Start of scripts/load_standards.py
#!/usr/bin/env python3
"""
Standard Data Loader

Usage:
    python load_standards.py                          # Load standards (skip duplicates)
    python load_standards.py --replace                # Replace all standard data
    python load_standards.py --clear                  # Clear all standard data only
    python load_standards.py --file standards.json    # Load from custom file
"""

import json
import argparse
import sys
import os

# Adjust path so script can import app context
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.tran import Standard

def normalize_name(name):
    """Normalize names for case-insensitive comparison."""
    return name.strip().lower()

def clear_standard_data():
    """Clear all standards from the database."""
    print("🗑️  Clearing all standard data...")
    Standard.query.delete()
    db.session.commit()
    print("✅ All standard data cleared.")

def load_standards_from_file(filename, replace_mode=False):
    """Load standards from the given JSON file."""
    if replace_mode:
        clear_standard_data()

    print(f"📥 Loading standards from {filename}...")

    try:
        with open(filename, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        print(f"❌ File not found: {filename}")
        return False
    except json.JSONDecodeError as e:
        print(f"❌ Invalid JSON format in {filename}: {e}")
        return False

    stats = {
        'standards_added': 0,
        'standards_skipped': 0
    }

    existing_names = {
        normalize_name(s.name): s for s in Standard.query.all()
    }

    for item in data.get('standards', []):
        norm = normalize_name(item['name'])
        if norm in existing_names:
            print(f"⚠️  Skipping existing standard: {item['name']}")
            stats['standards_skipped'] += 1
            continue

        standard = Standard(
            name=item['name'],
            version=item.get('version'),
            description=item.get('description'),
            standard_url=item.get('standard_url')
        )
        db.session.add(standard)
        stats['standards_added'] += 1
        print(f"➕ Added standard: {standard.name}")

    try:
        db.session.commit()
        print("\n✅ Standards loaded successfully!")
        print("📊 Summary:")
        print(f"   Standards Added: {stats['standards_added']}")
        print(f"   Standards Skipped: {stats['standards_skipped']}")
        return True
    except Exception as e:
        db.session.rollback()
        print(f"\n❌ Error committing standards: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='Load standards into the database.')
    parser.add_argument('--replace', action='store_true', help='Replace all standard data')
    parser.add_argument('--clear', action='store_true', help='Clear all standard data')
    parser.add_argument('--file', default='standards.json', help='Path to JSON file with standards')
    parser.add_argument('--confirm', action='store_true', help='Skip confirmation prompts')

    args = parser.parse_args()
    app = create_app()

    with app.app_context():
        if args.clear:
            if not args.confirm:
                resp = input("⚠️  This will delete ALL standard data! Type 'YES' to continue: ")
                if resp != 'YES':
                    print("❌ Operation cancelled.")
                    return
            clear_standard_data()
            return

        if args.replace and not args.confirm:
            resp = input("⚠️  This will REPLACE all standard data! Type 'YES' to continue: ")
            if resp != 'YES':
                print("❌ Operation cancelled.")
                return

        success = load_standards_from_file(args.file, replace_mode=args.replace)

        if success:
            print("\n🎉 Standards loading complete!")
            print(f"📈 Total Standards in DB: {Standard.query.count()}")
        else:
            sys.exit(1)

if __name__ == '__main__':
    main()

# End of scripts/load_standards.py

# Start of README.md
**See Transit** 
A web app that brings together technical data from all public transit agencies in the US and worldwide.

**Data**
Transit agencies, industry vendors, and the technologies used to power public transportation.

**Key Entities**
Agencies, technology components, vendors, functional areas, functions, and integration.

**Access**
The landing page is publically available, as is the Agency list page; all other pages are auth protected.
Auth is provided via Microsoft or Google OAuth from application login page.
Registration is restricted to email addresses that are associated with an existing transit agency.

**Agencies**
Agencies have two user types: readers and admins; admins can update all Agency information (i.e. Agency Component relationships).
Agency data can be sourced via LLM or via community input (data source is indicated in app).

**Vendors**
Vendor registration is restricted to email addresses that are associated wtih an existing vendor.
Vendors have two user types: readers and admins; admins can update all Vendor information (i.e. Vendor Components Functional relationships).
Vendor data can be sourced via LLM or via community input (data source is indicated in app).
Vendors must have a paid subscription to use the hosted system (yearly subscription or included with sponsorship).

**Agents**
The application utilizes agents to find and update data in the hosted version (see-tran.org).
- Agency agent - gets agency information, vets it, creates or upscales
- Vendor agent - gets vendor information, vets it, creates or upscales
- Component agent - get component (and subcomponent) informration, vets it, creates or upscales

**Components**
Components are discrete products/solutions, provided by an internal IT team or third party vendor
that deliver technology in support of a discrete transit business function.
Components can be "nested" in order to handle sub components; a composite component is made up of
more than one nested sub-components.

**Roadmap:**
- Agency news
- Vendor news
- Transit technology news
- Forum
- SMS alerts

**See Transit is an open source project, created by industry enthusiasts.**
Contributions are welcomed from public transit teams.
See-Tran.org provides a hosted version with a growing set of community sourced up-to-date data, upscaled with AI.

# End of README.md

# Start of data/ctran/agency.csv
id,name,location,description,website,ceo,address_hq,phone_number,transit_map_link,contact_email,contact_phone,contact_name,short_name,additional_metadata
1,C-TRAN,"Vancouver, Washington","Public transit agency serving Clark County, Washington, providing fixed-route, express commuter, and demand-response services.",https://www.c-tran.com,Leann Caver,"10600 NE 51st Circle, Vancouver, WA 98682",360-695-0123,https://www.c-tran.com/system-maps/c-tran-full-system-map,customerservice@c-tran.com,360-695-0123,Customer Service,c-tran,"{'service_area_population': '500,000+', 'fleet_size': 100, 'annual_ridership': '5 million'}"

# End of data/ctran/agency.csv

# Start of data/ctran/components.csv
id,name,description,version,deployment_date,update_frequency,known_issues,additional_metadata,parent_component_id,is_composite,vendor_id,integration_point_ids,tag_ids
1,Electronic Farebox (Cash Fare Collection),"A bus-mounted farebox that securely accepts coins and bills, prints transfers, and counts fares. C-TRAN replaced its 25-year-old fareboxes with this modern LECIP model in 2016, improving transaction speed with a deep coin hopper and modular design for easy maintenance.",LECIP LF-7000 series farebox,2016-01-01,Rare firmware updates; 5-year maintenance cycles with periodic software support,Occasional coin jams handled via routine maintenance. Initial installation challenges were resolved through collaborative effort.,"{'system_type': 'Fare Collection Hardware', 'payment_methods': ['coins', 'bills'], 'features': ['transfer_printing', 'fare_counting']}",,False,6,,
2,Contactless Smart Card Validator (Hop Fastpass Reader),"An on-board contactless payment validator that allows riders to 'tap' Hop Fastpass cards, mobile wallets, or QR codes to pay fares. These INIT-manufactured readers provide quick (<0.5s) fare validation and support open-loop payments and offline mode transactions.",INIT / FEIG contactless validator,2017-07-01,Remotely updated and monitored through INIT's management application; firmware/configuration updates rolled out centrally as needed,,"{'system_type': 'Fare Collection Hardware', 'response_time': '< 0.5 seconds', 'payment_methods': ['contactless_cards', 'mobile_wallets', 'qr_codes'], 'offline_capable': True}",,False,1,,
3,CAD/AVL Driver Console (INIT Onboard Unit),"An integrated Computer-Aided Dispatch/Automatic Vehicle Location unit by INIT that provides the driver interface for route information, GPS-based tracking, on-time performance, and messaging. Includes a touchscreen/keyboard MDT for log-in, real-time navigation and emergency alarms.",INIT MOBILE-ITCS CAD/AVL (2014 release),2014-01-01,Major system upgrades approximately every 10 years; incremental software patches and map updates periodically via maintenance contract,Occasional GPS dropouts or software glitches are addressed by vendor updates; overall system is stable with ongoing support,"{'system_type': 'CAD/AVL', 'features': ['gps_tracking', 'dispatch_messaging', 'emergency_alarms', 'route_navigation'], 'interface': 'touchscreen_keyboard'}",,False,1,,
5,Digital Two-Way Radio Communication System,A trunked digital radio system (Project 25 standard) that provides voice communications between bus operators and dispatch. Features include one-touch emergency alarm and silent alarm functionality that alert dispatch with the vehicle's GPS location.,Tait P25 digital radio network,2013-01-01,Infrequent firmware updates; infrastructure and mobile units have a lifecycle of ~15+ years,,"{'system_type': 'Radio Communications', 'standard': 'Project 25 (P25)', 'features': ['emergency_alarm', 'silent_alarm', 'gps_location', 'encrypted_voice'], 'coverage': 'system_wide'}",,False,8,,
6,Electronic Destination Sign System,"LED destination displays mounted on the front, side, and rear of the bus to inform passengers of the route number and destination. Energy-efficient and durable with brightness sensors to adjust to ambient light.",Luminator LED Destination Displays (Horizon series),2010-01-01,Route database updated as needed when routes or names change; hardware replaced during fleet renewal or when failures occur (typical lifespan ~12 years),"Occasionally, failed LED segments or driver input errors can display incorrect information, which maintenance or the driver can correct","{'system_type': 'Passenger Information Display', 'display_type': 'LED', 'locations': ['front', 'side', 'rear'], 'features': ['brightness_sensors', 'route_automation']}",,False,7,,
7,Onboard Video Surveillance System,A multi-camera CCTV system that records video and audio on the bus for safety and security. Each bus has a network of 8 to 12 high-definition cameras covering about 95% of the bus's interior and surroundings. Footage is offloaded wirelessly to the central system.,Apollo Video RoadRunner DVR with ViM software,2014-01-01,Software/firmware updates occasionally to improve video quality or storage efficiency; storage drives replaced periodically,,"{'system_type': 'Video Surveillance', 'camera_count': '8-12', 'coverage': '95%', 'recording': 'video_and_audio', 'data_transfer': 'wireless_offload'}",,False,3,,
8,Collision Avoidance Driver Assistance System,"An active safety system that warns bus operators of pedestrians, cyclists, or vehicles in blind spots or when a forward collision risk is detected. Uses multiple vision sensors/cameras and provides audible/visual alerts with up to 3 seconds of warning.",Mobileye Shield+ (Transit Pedestrian Collision Warning),2015-01-01,Installed as an aftermarket kit; calibration updates or software enhancements applied occasionally during regular vehicle servicing,,"{'system_type': 'Driver Assistance', 'warning_time': 'up_to_3_seconds', 'detection': ['pedestrians', 'cyclists', 'vehicles'], 'installation': 'aftermarket_kit'}",,False,5,,
9,Eco-Driving Driver Assistance (Efficiency Coaching),"An in-cab driver assistance tool that provides real-time feedback for efficient driving, particularly on hybrid or electric buses. Analyzes driving behavior and battery usage, giving operators instantaneous coaching for smoother acceleration, optimal coasting, and regenerative braking techniques.",INIT MOBILEefficiency (CarMedialab),2024-01-01,Software-based system updated periodically as algorithms improve; feedback parameters can be adjusted without hardware changes,,"{'system_type': 'Driver Assistance', 'vehicle_types': ['hybrid', 'electric'], 'coaching_areas': ['acceleration', 'coasting', 'regenerative_braking'], 'interface': 'in_cab_display'}",,False,1,,

# End of data/ctran/components.csv

# Start of data/ctran/functional_areas.csv
id,name,description
2,Operations Management (Real-Time),"Encompasses day-to-day oversight of vehicle movements, schedule adherence, detours, and emergency response. Involves CAD/AVL systems, dispatch consoles, and performance dashboards used in the control center."
3,Fare Collection & Revenue Management,"Manages how fares are paid, validated, and processed. Supports fare media, validators, contactless payment, account-based systems, and backend reconciliation across all channels and partners."
5,"Safety, Security & Incident Management","Ensures rider and employee safety through proactive hazard management, incident logging, emergency response planning, and oversight of physical and cybersecurity infrastructure."
15,Customer Experience & Information Services,"Supports real-time passenger information, trip planning tools, mobile apps, service alerts, marketing, and customer feedback systems. Aims to build trust, ease of use, and rider retention."

# End of data/ctran/functional_areas.csv

# Start of data/ctran/function_implementations.csv
id,agency_id,function_id,component_id,deployment_date,version,deployment_notes,status,implementation_notes,additional_metadata
1,1,1,1,2016-01-01,LECIP LF-7000 series,Replaced 25-year-old fareboxes across entire fleet,Active,Improved transaction speed with deep coin hopper and modular design. Eliminated manual transfer punching for drivers.,"{'fleet_coverage': '100%', 'units_deployed': 105, 'replacement_cycle': 'Expected 15+ years'}"
2,1,1,2,2017-07-01,INIT / FEIG contactless validator,Part of regional Hop Fastpass rollout with TriMet and Portland Streetcar,Active,Enables account-based fare capping and seamless transfers across regional transit systems,"{'fleet_coverage': '100%', 'units_deployed': 105, 'regional_integration': True, 'partners': ['TriMet', 'Portland Streetcar']}"
3,1,2,3,2014-01-01,INIT MOBILE-ITCS CAD/AVL (2014 release),"Major upgrade from 2004 system, integrated with Hop e-fare system",Active,"Provides real-time GPS tracking, schedule adherence monitoring, and driver messaging. Integrated with fare collection and passenger information systems.","{'fleet_coverage': '100%', 'units_deployed': 105, 'previous_system': 'INIT 2004 generation', 'integrations': ['fare_collection', 'passenger_info']}"
4,1,3,5,2013-01-01,Tait P25 digital radio network,"System-wide upgrade completed, replacing older analog UHF radios",Active,"Provides clear, encrypted voice channels with emergency alarm functionality. Improved reliability and interoperability with other agencies.","{'fleet_coverage': '100%', 'mobile_radios': 120, 'portable_radios': 45, 'base_stations': 3, 'coverage_area': 'Clark County'}"
5,1,4,6,2010-01-01,Luminator LED Destination Displays,Phased replacement of older flip-dot signs with LED technology,Active,Automatically updates when driver logs into route via CAD system. Provides high-visibility route and destination information in all lighting conditions.,"{'fleet_coverage': '100%', 'units_per_bus': 3, 'locations': ['front', 'side', 'rear'], 'automation': 'cad_integration'}"
6,1,5,7,2014-01-01,Apollo Video RoadRunner DVR with ViM software,"Full fleet retrofit completed, replacing older limited-coverage DVR systems",Active,8-12 HD cameras per bus covering 95% of interior and surroundings. Wireless footage offload and health monitoring for failed cameras.,"{'fleet_coverage': '100%', 'cameras_per_bus': '8-12', 'coverage_percentage': 95, 'data_offload': 'wireless', 'health_monitoring': True}"
7,1,5,8,2015-01-01,Mobileye Shield+ (Transit Pedestrian Collision Warning),Initial deployment on 7 buses as part of statewide pilot program,Pilot,"Provides up to 3 seconds warning for pedestrians, cyclists, or vehicles in collision path. Drivers reported positive feedback during pilot phase.","{'fleet_coverage': '7%', 'units_deployed': 7, 'pilot_program': True, 'warning_time': 'up_to_3_seconds', 'driver_feedback': 'positive'}"
8,1,6,9,2024-01-01,INIT MOBILEefficiency (CarMedialab),Deployed with new electric bus fleet to optimize energy efficiency,Active,"Analyzes driving behavior and battery usage on electric buses. Provides real-time coaching for smooth acceleration, optimal coasting, and regenerative braking.","{'fleet_coverage': 'Electric buses only', 'vehicle_types': ['electric'], 'deployment_scope': 'new_electric_fleet', 'energy_optimization': True}"
9,1,27,2,2017-07-01,INIT / FEIG contactless validator,Part of regional Hop Fastpass rollout with TriMet and Portland Streetcar,Active,Enables account-based fare capping and seamless transfers across regional transit systems,"{'fleet_coverage': '100%', 'units_deployed': 105, 'regional_integration': True, 'partners': ['TriMet', 'Portland Streetcar']}"

# End of data/ctran/function_implementations.csv

# Start of data/ctran/functions.csv
id,name,description,criticality,functional_area_id
1,Fare Collection,"Process and validate passenger fares through various payment methods including cash, contactless cards, and mobile payments",high,3
2,Vehicle Operations Management,Computer-aided dispatch and automatic vehicle location tracking for real-time fleet management,high,2
3,Operator Communications,Two-way radio communication between drivers and dispatch center for operational coordination,high,2
4,Real-Time Passenger Information,Display current route and destination information to passengers through digital signage,medium,15
5,Onboard Safety & Security,Video surveillance and collision avoidance systems to ensure passenger and operator safety,high,5
6,Driver Assistance & Coaching,Systems that assist drivers with safe and efficient vehicle operation including eco-driving coaching,medium,5
27,Contactless & Mobile Payments,"Enable open payment systems supporting mobile wallets, NFC, and contactless bank cards for seamless fare transactions",high,3

# End of data/ctran/functions.csv

# Start of data/ctran/vendors.csv
id,name,short_name,website,vendor_email,vendor_phone,description
1,"INIT Innovations in Transportation, Inc.",INIT,https://www.initusa.com,,757-413-9100,"Leading provider of integrated ITS solutions including CAD/AVL, real-time passenger information, fare collection systems, and electric bus management solutions globally."
3,Apollo Video Technology (Luminator Transit Division),Apollo,https://www.apollovideotechnology.com/,,425-483-7100,"Specializes in mobile video surveillance systems for transit, known for RoadRunner DVR and ViM software, enhancing security and fleet management."
5,Mobileye (Intel Company),Mobileye,https://www.mobileye.com/,,,"Global leader in advanced driver-assistance systems, particularly camera and AI-based collision avoidance technologies."
6,LECIP Inc.,LECIP,https://www.lecipinc.com/,sales@lecipinc.com,312-626-2525,"LECIP Inc. is the U.S. subsidiary of LECIP Holdings Corporation, providing automated fare collection systems, LED lighting, and passenger information systems."
7,Luminator Technology Group,Luminator,https://www.luminator.com/,,972-424-6511,"Manufacturer of destination signage, infotainment screens, and passenger communication systems for transit vehicles."
8,Tait Communications,Tait,https://www.taitcommunications.com/,,281-829-3300,Provider of mission-critical digital radio communication solutions tailored for public safety and transportation.

# End of data/ctran/vendors.csv

