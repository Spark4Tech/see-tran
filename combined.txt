# Project Directory Structure
./
    .flaskenv
    run.py
    README_setup.md
    flask_setup.sh
    tailwind.config.js
    gtfs_loader.py
    .DS_Store
    config.py
    README_msauth.md
    requirements.txt
    cat.py
    README_next.md
    README.md
    .gitignore
    package-lock.json
    package.json
    .nvmrc
    README_data
    postcss.config.js
    app/
        auth.py
        .DS_Store
        __init__.py
        forms/
            __init__.py
            forms.py
        agents/
            agency_agent.py
            __init__.py
            component_agent.py
            vendor_agent.py
        utils/
            logging.py
            __init__.py
            afi.py
            errors.py
        models/
            tran.py
            __init__.py
            gtfs.py
        static/
            .DS_Store
            css/
                .keep
            images/
                favicon.ico
                ST.png
                logo.png
                transit_logos/
                    spokane_logo.png
                    kingco_logo.png
                    intercity_logo.png
                    island_logo.png
                    godurham_logo.png
                    chapelhill_logo.png
                    cota_logo.png
                    c-tran_logo.png
                    trimet_logo.png
                vendor_logos/
                    init_logo.png
                    apollo_logo.png
                    byd_logo.png
                transit_headers/
                    cota_header.png
                    c-tran_header.png
                vendor_headers/
                    apollo_header.png
            js/
                .keep
                main.js
                vendor-page-controller.js
        templates/
            integration_form.html
            agency_implementations.html
            index.html
            registration_required.html
            base.html
            components.html
            standards.html
            login.html
            integrations.html
            functional_areas.html
            component_detail.html
            agencies.html
            contribute.html
            vendors.html
            fragments/
                vendor_details.html
                vendor_form.html
                vendor_list.html
                agency_details.html
                wizard_afi_step2_components.html
                wizard_afi_step4_review.html
                functional_area_details.html
                wizard_afi_step1.html
                agency_list.html
                afi_history.html
                functional_area_form.html
                component_form.html
                wizard_afi_step3_details.html
                functional_area_list.html
                agency_form.html
                component_list.html
                afi_row.html
                afi_list.html
                afi_edit_form.html
            admin/
                dashboard.html
        routes/
            agency.py
            __init__.py
            main.py
            integrations.py
    tests/
        test_phase2_functional_areas.py
        test_auth.py
        test_phase2.py
        __init__.py
        test_vendors_crud.py
        test_phase1.py
        test_app.py
    tailwind/
        config.js
        input.css

# End of Directory Structure

# Start of app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os

db = SQLAlchemy()
migrate = Migrate()

def create_app(test_config=None):
    app = Flask(__name__)
    
    if test_config:
        app.config.update(test_config)
    else:
        # Import config classes
        from config import DevelopmentConfig, ProductionConfig, TestConfig
        
        # Use DevelopmentConfig by default, or based on environment
        flask_env = os.environ.get('FLASK_ENV', 'development')
        if flask_env == 'production':
            app.config.from_object(ProductionConfig)
        elif flask_env == 'testing':
            app.config.from_object(TestConfig)
        else:
            app.config.from_object(DevelopmentConfig)
    
    # Ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass
    
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Import models so Flask-Migrate can detect them
    with app.app_context():
        from app.models import tran  # Import existing models
        from app.models import gtfs  # Import GTFS models
    
    # register blueprints
    from app.routes.main import main as main_bp
    app.register_blueprint(main_bp)

    from app.routes.agency import agency_bp
    app.register_blueprint(agency_bp)
    from app.routes.integrations import integration_bp
    app.register_blueprint(integration_bp)

    # Register auth routes
    from app.auth import auth_bp
    app.register_blueprint(auth_bp)

    # Register admin routes
    from app.routes import admin as admin_bp
    app.register_blueprint(admin_bp)
    
    return app

# End of app/__init__.py

# Start of config.py
# config.py

import os
from dotenv import load_dotenv
from datetime import timedelta

basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

class Config:
    # Core Flask settings
    SECRET_KEY = os.environ.get('SECRET_KEY')
    DEBUG = os.environ.get('FLASK_ENV') == 'development'
    
    # Database settings - SQLite support
    DB_TYPE = os.environ.get('DB_TYPE', 'sqlite')
    
    if DB_TYPE == 'postgres':
        SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
    else:
        # SQLite database
        SQLALCHEMY_DATABASE_URI = f"sqlite:///{os.path.join(basedir, 'instance', 'app.db')}"
    
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    
    # Security settings
    CSRF_ENABLED = True
    
    # Application paths and cookies
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_REFRESH_EACH_REQUEST = True

    WTF_CSRF_TIME_LIMIT = 24 * 3600  # 24 hours in seconds
    WTF_CSRF_SSL_STRICT = False
    
    # File upload settings
    MAX_CONTENT_LENGTH = 500 * 1024 * 1024  # 500 MB limit
    
    # Email settings
    POSTMARK_API_KEY = os.getenv('POSTMARK_API_KEY')
    POSTMARK_SENDER_EMAIL = os.getenv('POSTMARK_SENDER_EMAIL')
    POSTMARK_NOTIFY_EMAIL = os.getenv('POSTMARK_NOTIFY_EMAIL')

    SUPER_ADMIN_EMAIL = os.getenv('SUPER_ADMIN_EMAIL')

    CLAUDE_API_KEY = os.environ.get('CLAUDE_API_KEY')
    CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages'
    CLAUDE_MODEL = os.environ.get('CLAUDE_MODEL', 'claude-3-5-haiku-20241022')
    
    # AWS settings
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = os.environ.get('AWS_REGION', 'us-west-2')
    S3_BUCKET = os.environ.get('S3_BUCKET', 'well-app')
    
    # Application URLs
    SMS_BASE_URL = os.environ.get('SMS_BASE_URL', 'https://see-tran.com')
    
    @staticmethod
    def get_s3_prefix(tenant_id):
        """Generate S3 key prefix for tenant isolation"""
        return f'tenant_{tenant_id}'
    
    # SMS settings
    TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
    TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
    TWILIO_FROM_NUMBER = os.getenv('TWILIO_FROM_NUMBER')

    SMS_TEST_PHONE_NUMBER = os.environ.get('SMS_TEST_PHONE_NUMBER', '+18084649192')

    # OAuth settings
    OAUTH_GOOGLE_CLIENT_ID = os.environ.get('OAUTH_GOOGLE_CLIENT_ID')
    OAUTH_GOOGLE_CLIENT_SECRET = os.environ.get('OAUTH_GOOGLE_CLIENT_SECRET')
    OAUTH_GOOGLE_DISCOVERY_URL = os.environ.get('OAUTH_GOOGLE_DISCOVERY_URL')

    OAUTH_MS_CLIENT_ID = os.environ.get('OAUTH_MS_CLIENT_ID')
    OAUTH_MS_CLIENT_SECRET = os.environ.get('OAUTH_MS_CLIENT_SECRET')
    OAUTH_MS_DISCOVERY_URL = 'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration'

class DevelopmentConfig(Config):
    """Development configuration."""
    FLASK_ENV = 'development'
    DEBUG = True
    DEVELOPMENT = True
    
    # More permissive session cookie settings for development
    SESSION_COOKIE_SECURE = False
    SESSION_COOKIE_DOMAIN = None  # Allow all domains in development

class ProductionConfig(Config):
    """Production configuration."""
    DEBUG = False
    DEVELOPMENT = False
    SESSION_COOKIE_SECURE = True
    PREFERRED_URL_SCHEME = 'https'
    
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_FILE_DIR = '/home/ubuntu/see-tran/flask_session'

class TestConfig(Config):
    """Test configuration."""
    TESTING = True
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False
# End of config.py

# Start of app/routes/main.py
# app/routes/main.py
from flask import Blueprint, render_template, jsonify, request, url_for
from app import db
from app.models.tran import (
    Agency, FunctionalArea, Component, Vendor, IntegrationPoint, 
    UpdateLog, Function, Standard, Tag, TagGroup, UserRole, AgencyFunctionImplementation,
    integration_standard, component_integration
)
from app.forms.forms import AgencyForm, VendorForm, ComponentForm
from app.auth import login_required, get_updated_by
from app.utils.errors import (
    json_error_response, json_success_response, 
    html_error_fragment, html_success_fragment,
    json_form_error_response
)
from app.utils.afi import (
    create_afi_with_optional_children,
    component_supports_function,
    get_children_supporting_function,
    record_afi_history,
)
from sqlalchemy import func, case, distinct
from sqlalchemy.exc import IntegrityError
from datetime import datetime, timedelta

main = Blueprint("main", __name__)

@main.route("/")
def index():
    return render_template("index.html")

@main.route("/components")
def components_page():
    """Components management page"""
    return render_template("components.html")

# Health and utility endpoints
@main.route("/api/health")
def health_check():
    try:
        # Test database connection
        db.session.execute(db.text('SELECT 1'))
        return jsonify({
            "status": "ok", 
            "timestamp": datetime.utcnow().isoformat(),
            "database": "connected"
        })
    except Exception as e:
        return json_error_response(f"Health check failed: {str(e)}", 500)

# Count endpoints for dashboard metrics
@main.route("/api/count/agencies")
def count_agencies():
    try:
        count = Agency.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/functional-areas")
def count_functional_areas():
    try:
        count = FunctionalArea.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/components")
def count_components():
    try:
        count = Component.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/integration-points")
def count_integration_points():
    try:
        count = IntegrationPoint.query.count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/count/vendors")
def count_vendors():
    try:
        count = Vendor.query.count()
        return str(count)
    except Exception as e:
        return "0"

# Components endpoints
@main.route("/api/components/list")
def components_list():
    """Get all components with filtering (refactored to use Jinja template fragment)."""
    try:
        functional_area = (request.args.get('functional_area') or '').strip()
        vendor = (request.args.get('vendor') or '').strip()
        agency = (request.args.get('agency') or '').strip()
        status = (request.args.get('status') or '').strip()
        search = (request.args.get('search') or '').strip()

        query = db.session.query(Component).distinct()

        if functional_area:
            query = (query
                     .join(Component.agency_usages)
                     .join(AgencyFunctionImplementation.function)
                     .join(Function.functional_area)
                     .filter(FunctionalArea.name == functional_area))
        if vendor:
            query = query.join(Component.vendor).filter(Vendor.name == vendor)
        if agency:
            query = (query
                     .join(Component.agency_usages)
                     .join(AgencyFunctionImplementation.agency)
                     .filter(Agency.name == agency))
        if status == 'issues':
            query = query.filter(Component.known_issues.isnot(None))
        elif status == 'no_issues':
            query = query.filter(Component.known_issues.is_(None))
        if search:
            name_like = f"%{search}%"
            query = (query.outerjoin(Component.vendor)
                         .outerjoin(Component.agency_usages)
                         .outerjoin(AgencyFunctionImplementation.function)
                         .filter(db.or_(Component.name.ilike(name_like),
                                        Vendor.name.ilike(name_like),
                                        Function.name.ilike(name_like))))
        query = query.order_by(Component.name.asc())
        components = query.all()

        # Build light-weight view models for the template
        view_components = []
        for component in components:
            vendor_name = component.vendor.name if component.vendor else 'No Vendor'
            agencies_using = (db.session.query(Agency.name)
                              .join(AgencyFunctionImplementation)
                              .filter(AgencyFunctionImplementation.component_id == component.id)
                              .distinct().limit(3).all())
            agencies_display = ", ".join([a.name for a in agencies_using]) or 'No agencies'
            if len(agencies_using) == 3:
                agencies_display += ' +more'
            functions_implemented = (db.session.query(Function.name)
                                     .join(AgencyFunctionImplementation)
                                     .filter(AgencyFunctionImplementation.component_id == component.id)
                                     .distinct().limit(3).all())
            functions_display = ", ".join([f.name for f in functions_implemented]) or 'No functions assigned'
            if len(functions_implemented) == 3:
                functions_display += ' +more'
            view_components.append(type('VC', (), {
                'id': component.id,
                'name': component.name,
                'is_composite': getattr(component, 'is_composite', False),
                'status_indicator': 'red' if component.known_issues else 'green',
                'functions_display': functions_display,
                'vendor_name': vendor_name,
                'agencies_display': agencies_display,
                'deployment_date_str': component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else '',
                'version': component.version,
                'known_issues': component.known_issues,
            }))

        return render_template('fragments/component_list.html', components=view_components)
    except Exception as e:
        return html_error_fragment(f"Error loading components: {str(e)}")

@main.route("/api/components/<int:component_id>/details")
def component_details(component_id):
    """Get detailed information about a specific component"""
    try:
        component = Component.query.get_or_404(component_id)
        
        # Get agency implementations for this component
        implementations = AgencyFunctionImplementation.query\
            .filter_by(component_id=component_id)\
            .join(Agency).join(Function).join(FunctionalArea)\
            .order_by(Agency.name, FunctionalArea.name, Function.name)\
            .all()
        
        # Build agency usage section
        agency_usage_html = ""
        if implementations:
            agency_usage_html = "<h4 class='font-medium text-white mb-3'>Agency Usage:</h4>"
            
            # Group by agency
            agencies = {}
            for impl in implementations:
                agency_name = impl.agency.name
                if agency_name not in agencies:
                    agencies[agency_name] = []
                agencies[agency_name].append(impl)
            
            for agency_name, agency_impls in agencies.items():
                agency_usage_html += f'''
                <div class="mb-4">
                    <h5 class="text-sm font-medium text-blue-400 mb-2">{agency_name}</h5>
                    <div class="space-y-2 ml-3">
                '''
                for impl in agency_impls:
                    status_color = "green" if impl.status == "Active" else "yellow"
                    agency_usage_html += f'''
                    <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-{status_color}-500 rounded-full"></div>
                            <span class="text-sm text-slate-300">{impl.function.name}</span>
                        </div>
                        <div class="text-right">
                            <span class="text-xs text-slate-500">
                                {impl.deployment_date.strftime('%Y-%m-%d') if impl.deployment_date else 'No date'}
                            </span>
                            {f'<br><span class="text-xs text-slate-400">v{impl.version}</span>' if impl.version else ''}
                        </div>
                    </div>
                    '''
                agency_usage_html += "</div></div>"
        else:
            agency_usage_html = "<p class='text-slate-400 text-sm'>No agency usage tracked for this component.</p>"
        
        # User roles (component-specific info)
        roles = ""
        if component.user_roles:
            roles = "<h4 class='font-medium text-white mb-2 mt-4'>User Roles:</h4><ul class='space-y-1'>"
            for role in component.user_roles:
                roles += f'<li class="text-sm text-slate-300">• {role.role_name}: {role.description or "No description"}</li>'
            roles += "</ul>"
        
        # Additional metadata
        metadata = ""
        if component.additional_metadata:
            metadata = "<h4 class='font-medium text-white mb-2 mt-4'>Additional Information:</h4><ul class='space-y-1'>"
            for key, value in component.additional_metadata.items():
                metadata += f'<li class="text-sm text-slate-300">• {key.replace("_", " ").title()}: {value}</li>'
            metadata += "</ul>"
        
        html = f'''
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-3">
                    <h2 class="text-2xl font-bold text-white">{component.name}</h2>
                    {f'<span class="px-2 py-1 bg-blue-600/20 border border-blue-600/30 rounded text-xs text-blue-300">Composite</span>' if component.is_composite else ''}
                </div>
                <button class="px-3 py-1 bg-slate-700 hover:bg-slate-600 rounded text-sm transition-colors" 
                        onclick="clearComponentDetails()">
                    ✕ Close
                </button>
            </div>
            
            <div class="grid grid-cols-1 gap-6">
                <div>
                    <h3 class="font-medium text-white mb-3">Component Information</h3>
                    <div class="space-y-2 text-sm">
                        <p class="text-slate-300"><strong>Version:</strong> {component.version or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Deployment Date:</strong> {component.deployment_date.strftime('%B %d, %Y') if component.deployment_date else "Unknown"}</p>
                        <p class="text-slate-300"><strong>Update Frequency:</strong> {component.update_frequency or "Unknown"}</p>
                        <p class="text-slate-300"><strong>Vendor:</strong> {component.vendor.name if component.vendor else "No Vendor"}</p>
                    </div>
                    
                    {f'<div class="bg-red-900/20 border border-red-700/30 rounded p-3 mt-4"><h4 class="font-medium text-red-300 mb-2">Known Issues:</h4><p class="text-sm text-red-200">{component.known_issues}</p></div>' if component.known_issues else '<div class="bg-green-900/20 border border-green-700/30 rounded p-3 mt-4"><h4 class="font-medium text-green-300 mb-2">Status:</h4><p class="text-sm text-green-200">No known issues</p></div>'}
                    
                    <div class="mt-6">
                        {agency_usage_html}
                    </div>
                    
                    {roles}
                    {metadata}
                </div>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading component details: {str(e)}")

@main.route("/api/agencies/options")
def agencies_filter_options():
    """Get agency options for filter dropdowns"""
    try:
        # Get agencies that have component implementations
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading component details: {str(e)}")

# New full-page component details view
@main.route("/components/<int:component_id>")
def component_detail_page(component_id: int):
    try:
        component = Component.query.get_or_404(component_id)
        # Implementations grouped by agency
        implementations = AgencyFunctionImplementation.query\
            .filter_by(component_id=component_id)\
            .join(Agency).join(Function).join(FunctionalArea)\
            .order_by(Agency.name, FunctionalArea.name, Function.name)\
            .all()
        by_agency = {}
        for impl in implementations:
            by_agency.setdefault(impl.agency.name, []).append(impl)
        # Integration points
        integrations = component.integration_points or []
        return render_template(
            'component_detail.html',
            component=component,
            implementations_by_agency=by_agency,
            integrations=integrations
        )
    except Exception as e:
        return html_error_fragment(f"Error loading component page: {str(e)}")

def clear_component_details_js():
    return '''
    <script>
    function clearComponentDetails() {
        // Reset component details panel
        document.getElementById('component-details').innerHTML = `
            <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
                <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-slate-400 mb-2">Component Details</h3>
                <p class="text-slate-500 text-sm">Select a component to view details</p>
            </div>`;
        
        // Reset vendor details panel
        document.getElementById('vendor-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
        
        // Reset integration details panel
        document.getElementById('integration-details').innerHTML = `
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No component selected</span>
            </div>`;
    }
    </script>
    '''

# Vendors Management Routes
@main.route("/vendors")
def vendors_page():
    """Vendors management page"""
    return render_template("vendors.html")

@main.route("/api/vendors/list")
def vendors_list():
    """Get all vendors with enhanced filtering and component counts"""
    try:
        search = request.args.get('search', '').lower()
        sort_by = request.args.get('sort', 'name')
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base query with component counts
        query = db.session.query(
            Vendor,
            func.count(distinct(Component.id)).label('component_count')
        ).outerjoin(Component).group_by(Vendor.id)
        
        # Apply search filter
        if search:
            query = query.filter(Vendor.name.ilike(f'%{search}%'))
        
        # Apply agency filter
        if agency_filter:
            agency_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Agency)\
                .filter(Agency.name == agency_filter)
            
            query = query.filter(Component.id.in_(agency_component_ids.scalar_subquery()))
        
        # Apply functional area filter
        if functional_area_filter:
            fa_component_ids = db.session.query(Component.id)\
                .join(AgencyFunctionImplementation)\
                .join(Function)\
                .join(FunctionalArea)\
                .filter(FunctionalArea.name == functional_area_filter)
            
            query = query.filter(Component.id.in_(fa_component_ids.scalar_subquery()))
        
        # Apply sorting
        if sort_by == 'components':
            query = query.order_by(func.count(distinct(Component.id)).desc())
        elif sort_by == 'recent':
            # Sort by most recent component deployment
            subquery = db.session.query(
                Component.vendor_id,
                func.max(Component.deployment_date).label('latest_deployment')
            ).group_by(Component.vendor_id).subquery()
            
            query = query.outerjoin(subquery, Vendor.id == subquery.c.vendor_id)\
                         .order_by(subquery.c.latest_deployment.desc().nullslast())
        else:
            query = query.order_by(Vendor.name)
        
        vendors_with_counts = query.all()
        
        for vendor, component_count in vendors_with_counts:
            vendor.component_count = component_count
        
        return render_template('fragments/vendor_list.html', 
                             vendors_with_counts=vendors_with_counts)
    except Exception as e:
        return html_error_fragment(f"Error loading vendors: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/details")
def vendor_details(vendor_id):
    """Get detailed information about a specific vendor"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        
        # Get components grouped by functional area
        components_by_area = {}
        
        components_query = db.session.query(Component, FunctionalArea.name.label('area_name'))\
            .filter(Component.vendor_id == vendor_id)\
            .join(AgencyFunctionImplementation, Component.agency_usages)\
            .join(Function, AgencyFunctionImplementation.function)\
            .join(FunctionalArea, Function.functional_area)\
            .distinct(Component.id, FunctionalArea.name)\
            .all()
        
        for component, area_name in components_query:
            if area_name not in components_by_area:
                components_by_area[area_name] = []
            if component not in components_by_area[area_name]:
                components_by_area[area_name].append(component)
        
        # Get vendor statistics
        total_components = Component.query.filter_by(vendor_id=vendor_id).count()
        components_with_issues = Component.query.filter_by(vendor_id=vendor_id).filter(Component.known_issues.isnot(None)).count()
        recent_deployments = Component.query.filter_by(vendor_id=vendor_id)\
            .filter(Component.deployment_date >= datetime.now().date() - timedelta(days=365)).count()
        
        # Get integration standards
        vendor_components = Component.query.filter_by(vendor_id=vendor_id).all()
        integration_standards = set()
        for component in vendor_components:
            for integration_point in component.integration_points:
                for standard in integration_point.standards:
                    integration_standards.add(standard.name)
        
        vendor.total_components = total_components
        vendor.components_with_issues = components_with_issues
        vendor.recent_deployments = recent_deployments
        vendor.integration_standards = list(integration_standards)
        vendor.components_by_area = components_by_area
        
        return render_template('fragments/vendor_details.html', vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading vendor details: {str(e)}")

@main.route("/api/vendors/form")
def vendor_form():
    """Return new vendor form"""
    try:
        form = VendorForm()
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>/form")
def vendor_edit_form(vendor_id):
    """Return edit vendor form"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        form.populate_from_vendor(vendor)
        
        return render_template('fragments/vendor_form.html', 
                             form=form, 
                             vendor=vendor)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/vendors", methods=['POST'])
@login_required
def create_vendor():
    """Create a new vendor with JSON response"""
    try:
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Vendor.query.filter_by(name=form.name.data).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Create new vendor
            vendor = Vendor()
            form.populate_vendor(vendor)
            
            db.session.add(vendor)
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' created successfully")
        else:
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error creating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['POST'])
@login_required
def update_vendor(vendor_id):
    """Update an existing vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        form = VendorForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current vendor)
            existing = Vendor.query.filter(
                Vendor.name == form.name.data,
                Vendor.id != vendor_id
            ).first()
            if existing:
                return json_error_response(f"Vendor '{form.name.data}' already exists")
            
            # Update vendor
            form.populate_vendor(vendor)
            
            db.session.commit()
            
            return json_success_response(f"Vendor '{vendor.name}' updated successfully")
        else:
            return json_form_error_response(form)
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error updating vendor: {str(e)}")

@main.route("/api/vendors/<int:vendor_id>", methods=['DELETE'])
@login_required
def delete_vendor(vendor_id):
    """Delete a vendor with JSON response"""
    try:
        vendor = Vendor.query.get_or_404(vendor_id)
        name = vendor.name
        
        # Check if vendor has components (prevent deletion)
        component_count = Component.query.filter_by(vendor_id=vendor_id).count()
        if component_count > 0:
            return json_error_response(
                f"Cannot delete vendor '{name}' because it has {component_count} associated components. "
                f"Please reassign or delete the components first."
            )
        
        # Delete the vendor
        db.session.delete(vendor)
        db.session.commit()
        
        return json_success_response(f"Vendor '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error deleting vendor: {str(e)}")

@main.route("/api/vendors/stats")
def vendors_stats():
    """Get vendor statistics for dashboard with optional filtering"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor query
        vendor_query = db.session.query(Vendor)
        
        # Apply filters to get relevant vendors
        if agency_filter or functional_area_filter:
            component_subquery = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_subquery = component_subquery\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                if not agency_filter:
                    component_subquery = component_subquery.join(AgencyFunctionImplementation)
                component_subquery = component_subquery\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Fix: Use scalar_subquery() to avoid SQLAlchemy warning
            vendor_ids_subquery = component_subquery.scalar_subquery()
            vendor_query = vendor_query.filter(Vendor.id.in_(vendor_ids_subquery))
        
        stats = {
            'total_vendors': vendor_query.count(),
            'active_vendors': vendor_query.join(Component).distinct().count(),
            'top_vendor': None,
            'avg_components_per_vendor': 0
        }
        
        # Get top vendor within filtered set
        top_vendor_query = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)
        
        if agency_filter or functional_area_filter:
            # Apply same filter to top vendor query
            vendor_ids_list = [v.id for v in vendor_query.all()]
            if vendor_ids_list:
                top_vendor_query = top_vendor_query.filter(Vendor.id.in_(vendor_ids_list))
        
        top_vendor_result = top_vendor_query.group_by(Vendor.id, Vendor.name)\
                                          .order_by(func.count(Component.id).desc())\
                                          .first()
        
        if top_vendor_result:
            stats['top_vendor'] = {
                'name': top_vendor_result.name,
                'component_count': top_vendor_result.component_count
            }
        
        # Calculate average components per vendor
        if stats['active_vendors'] > 0:
            total_components_query = db.session.query(func.count(Component.id))\
                .filter(Component.vendor_id.isnot(None))
            
            if agency_filter or functional_area_filter:
                vendor_ids_list = [v.id for v in vendor_query.all()]
                if vendor_ids_list:
                    total_components_query = total_components_query\
                        .filter(Component.vendor_id.in_(vendor_ids_list))
            
            total_components = total_components_query.scalar()
            stats['avg_components_per_vendor'] = round(total_components / stats['active_vendors'], 1)
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting vendor stats: {str(e)}")

@main.route("/api/integration/standards")
def integration_standards():
    """Get most common integration standards"""
    try:
        # Get standards from the Standards table
        standards = db.session.query(
            Standard.name,
            func.count(IntegrationPoint.id).label('usage_count')
        ).join(Standard.integration_points)\
         .group_by(Standard.name)\
         .order_by(func.count(IntegrationPoint.id).desc())\
         .limit(5).all()
        
        html = ""
        for standard, count in standards:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-cyan-600/10 border border-cyan-600/20 rounded">
                <span class="text-sm text-cyan-300">{standard}</span>
                <span class="text-xs text-cyan-400">{count} uses</span>
            </div>
            '''
        
        if not html:
            html = '<div class="text-center text-slate-500 text-sm py-4">No integration standards found</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center text-slate-500 text-sm py-4">Error loading standards</div>'

@main.route("/api/vendors/performance")
def vendor_performance():
    """Get vendor performance insights with filtering support"""
    try:
        agency_filter = request.args.get('agency', '')
        functional_area_filter = request.args.get('functional_area', '')
        
        # Base vendor filter condition
        vendor_filter_condition = True
        
        if agency_filter or functional_area_filter:
            # Build subquery for vendor IDs that match filters
            component_query = db.session.query(Component.vendor_id).distinct()
            
            if agency_filter:
                component_query = component_query\
                    .join(AgencyFunctionImplementation)\
                    .join(Agency)\
                    .filter(Agency.name == agency_filter)
            
            if functional_area_filter:
                component_query = component_query\
                    .join(Function)\
                    .join(FunctionalArea)\
                    .filter(FunctionalArea.name == functional_area_filter)
            
            # Get list of vendor IDs that match the filters
            vendor_ids_list = [row[0] for row in component_query.all() if row[0] is not None]
            if vendor_ids_list:
                vendor_filter_condition = Vendor.id.in_(vendor_ids_list)
            else:
                vendor_filter_condition = False  # No vendors match filters
        
        # Most reliable vendor (least issues)
        reliable_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('total_components'),
            func.sum(case((Component.known_issues.isnot(None), 1), else_=0)).label('issues_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .having(func.count(Component.id) > 0)\
         .order_by((func.sum(case((Component.known_issues.isnot(None), 1), else_=0)) / func.count(Component.id)).asc())\
         .first()
        
        # Newest vendor (most recent first deployment)
        newest_vendor = db.session.query(
            Vendor.name,
            func.min(Component.deployment_date).label('first_deployment')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.min(Component.deployment_date).desc())\
         .first()
        
        # Largest vendor (most components)
        largest_vendor = db.session.query(
            Vendor.name,
            func.count(Component.id).label('component_count')
        ).join(Component)\
         .filter(vendor_filter_condition)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(Component.id).desc())\
         .first()
        
        return jsonify({
            'most_reliable': reliable_vendor.name if reliable_vendor else 'N/A',
            'newest': newest_vendor.name if newest_vendor else 'N/A',
            'largest': largest_vendor.name if largest_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting vendor performance: {str(e)}")

@main.route("/api/components/overview")
def components_overview():
    try:
        components = Component.query.join(FunctionalArea).join(Vendor).limit(10).all()
        
        html = ""
        for component in components:
            status_color = "green" if component.known_issues is None else "yellow"
            html += f"""
            <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:bg-slate-800/70 transition-colors">
                <div class="flex items-center space-x-4">
                    <div class="w-3 h-3 bg-{status_color}-500 rounded-full"></div>
                    <div>
                        <h4 class="font-medium text-white">{component.name}</h4>
                        <p class="text-sm text-slate-400">{component.functional_area.name} • {component.vendor.name if component.vendor else 'No Vendor'}</p>
                    </div>
                </div>
                <div class="text-right">
                    <p class="text-sm text-slate-300">{component.version or 'No Version'}</p>
                    <p class="text-xs text-slate-500">{component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else 'No Date'}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-12">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Components Found</h3>
                <p class="text-slate-500 mb-4">Add your first agency to get started.</p>
                <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                    Add Component
                </button>
            </div>
            """
        
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading components overview: {str(e)}")

@main.route("/api/vendors/top")
def top_vendors():
    try:
        vendors = db.session.query(Vendor, func.count(Component.id).label('component_count'))\
            .join(Component).group_by(Vendor.id).order_by(func.count(Component.id).desc()).limit(5).all()
        
        html = ""
        for vendor, count in vendors:
            html += f"""
            <div class="flex items-center justify-between p-3 bg-slate-800/30 rounded-lg">
                <div>
                    <p class="font-medium text-white text-sm">{vendor.name}</p>
                    <p class="text-xs text-slate-400">{count} components</p>
                </div>
                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                    <span class="text-xs font-bold text-white">{count}</span>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-6 text-slate-500">
                <p class="text-sm">No vendor data available</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error loading vendors</p></div>'

@main.route("/api/integration/health")
def integration_health():
    try:
        total_components = Component.query.count()
        integrated_components = db.session.query(Component).join(Component.integration_points).distinct().count()
        
        if total_components > 0:
            health_percentage = (integrated_components / total_components) * 100
        else:
            health_percentage = 0
        
        color = "green" if health_percentage >= 80 else "yellow" if health_percentage >= 50 else "red"
        
        html = f"""
        <div class="text-center">
            <div class="relative inline-flex items-center justify-center w-16 h-16 mb-4">
                <svg class="w-16 h-16 transform -rotate-90" viewBox="0 0 36 36">
                    <path class="text-slate-700" stroke="currentColor" stroke-width="3" fill="none" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                    <path class="text-{color}-500" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="{health_percentage}, 100" d="M18 2.0845
                        a 15.9155 15.9155 0 0 1 0 31.831
                        a 15.9155 15.9155 0 0 1 0 -31.831"/>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-white">{health_percentage:.0f}%</span>
                </div>
            </div>
            <h4 class="text-sm font-medium text-white mb-1">Integration Health</h4>
            <p class="text-xs text-slate-400">{integrated_components} of {total_components} components integrated</p>
        </div>
        """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-6 text-slate-500"><p class="text-sm">Error calculating health</p></div>'

@main.route("/api/activity/recent")
def recent_activity():
    try:
        recent_updates = UpdateLog.query.join(Component).order_by(UpdateLog.update_date.desc()).limit(10).all()
        
        html = ""
        for update in recent_updates:
            time_ago = datetime.utcnow() - update.update_date
            if time_ago.days > 0:
                time_str = f"{time_ago.days}d ago"
            elif time_ago.seconds > 3600:
                time_str = f"{time_ago.seconds // 3600}h ago"
            else:
                time_str = f"{time_ago.seconds // 60}m ago"
            
            html += f"""
            <div class="flex items-center space-x-4 p-4 bg-slate-800/30 rounded-lg hover:bg-slate-800/50 transition-colors">
                <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center">
                    <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <div class="flex-1">
                    <p class="text-sm font-medium text-white">{update.component.name} updated</p>
                    <p class="text-xs text-slate-400">{update.change_summary[:100] + '...' if update.change_summary and len(update.change_summary) > 100 else update.change_summary or 'No summary provided'}</p>
                    <p class="text-xs text-slate-500 mt-1">by {update.updated_by} • {time_str}</p>
                </div>
            </div>
            """
        
        if not html:
            html = """
            <div class="text-center py-8">
                <svg class="w-12 h-12 text-slate-600 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-medium text-slate-400 mb-2">No Recent Activity</h3>
                <p class="text-slate-500">Component updates will appear here.</p>
            </div>
            """
        
        return html
    except Exception as e:
        return f'<div class="text-center py-8 text-slate-500"><p class="text-sm">Error loading activity</p></div>'

@main.route("/api/components/refresh")
def components_refresh():
    return components_overview()

# Agencies Management Routes
@main.route("/agencies")
def agencies_page():
    """Agencys management page"""
    return render_template("agencies.html")

@main.route("/api/agencies/list")
def agencies_list():
    """Get all agencys with filtering"""
    try:
        search = request.args.get('search', '').lower()
        
        query = Agency.query
        
        # Apply search filter
        if search:
            query = query.filter(Agency.name.ilike(f'%{search}%'))
        
        agencies = query.order_by(Agency.name).all()
        for agency in agencies:
            agency.logo_url = url_for('static', filename=f'images/transit_logos/{agency.short_name.lower().replace(" ", "_")}_logo.png')
            
        return render_template('fragments/agency_list.html', 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading agencys: {str(e)}")

@main.route("/api/agencies/<int:agency_id>/details")
def agency_details(agency_id):
    """Get detailed information about a specific agency"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png')

        
        return render_template('fragments/agency_details.html', 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading agency details: {str(e)}")

@main.route("/api/agencies/form")
def agency_form():
    """Return new agency form"""
    try:
        form = AgencyForm()
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=None)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")


@main.route("/api/agencies/<int:agency_id>/form")
def agency_edit_form(agency_id):
    """Return edit agency form"""
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        form.populate_from_agency(agency)
        
        return render_template('fragments/agency_form.html', 
                             form=form, 
                             agency=agency)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/agencies", methods=['POST'])
@login_required
def create_agency():
    """Create a new agency"""
    try:
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names
            existing = Agency.query.filter_by(name=form.name.data).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Create new agency
            agency = Agency()
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            # Handle plain inputs
            agency.short_name = request.form.get('short_name') or None
            agency.email_domain = form.email_domain.data or None
            
            db.session.add(agency)
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' created successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=None)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating agency: {str(e)}")
    
@main.route("/api/agencies/<int:agency_id>", methods=['POST'])  # Note: Using POST with _method=PUT for HTMX
@login_required
def update_agency(agency_id):
    try:
        agency = Agency.query.get_or_404(agency_id)
        form = AgencyForm()
        
        if form.validate_on_submit():
            # Check for duplicate names (excluding current agency)
            existing = Agency.query.filter(
                Agency.name == form.name.data,
                Agency.id != agency_id
            ).first()
            if existing:
                return html_error_fragment(f"Agency '{form.name.data}' already exists")
            
            # Process additional metadata
            additional_metadata = {}
            metadata_keys = request.form.getlist('metadata_key[]')
            metadata_values = request.form.getlist('metadata_value[]')
            
            for key, value in zip(metadata_keys, metadata_values):
                if key.strip() and value.strip():
                    additional_metadata[key.strip()] = value.strip()
            
            # Update agency
            form.populate_agency(agency)
            agency.additional_metadata = additional_metadata if additional_metadata else None
            # Handle plain inputs
            agency.short_name = request.form.get('short_name') or agency.short_name
            agency.email_domain = form.email_domain.data or None
            
            db.session.commit()
            
            return html_success_fragment(f"Agency '{agency.name}' updated successfully")
        else:
            # Form validation failed, return form with errors
            return render_template('fragments/agency_form.html', 
                                 form=form, 
                                 agency=agency)
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating agency: {str(e)}")

@main.route("/api/agencies/<int:agency_id>", methods=['DELETE'])
@login_required
def delete_agency(agency_id):
    try:
        agency = Agency.query.get_or_404(agency_id)
        name = agency.name
        
        # Delete the agency (cascade will handle related records)
        db.session.delete(agency)
        db.session.commit()
        
        return html_success_fragment(f"Agency '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting agency: {str(e)}")
    
@main.route("/api/agencies/stats")
def agencies_stats():
    """Get agency statistics for dashboard"""
    try:
        # Total agencies
        total_agencies = Agency.query.count()
        
        # Active implementations
        active_implementations = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        
        # Average implementations per agency
        avg_implementations = 0
        if total_agencies > 0:
            total_implementations = AgencyFunctionImplementation.query.count()
            avg_implementations = round(total_implementations / total_agencies, 1)
        
        # Average vendors per agency (agencies that use components from different vendors)
        avg_vendors = 0
        if total_agencies > 0:
            # Count unique vendors per agency
            vendor_counts = db.session.query(
                AgencyFunctionImplementation.agency_id,
                func.count(func.distinct(Component.vendor_id)).label('vendor_count')
            ).join(Component)\
             .filter(Component.vendor_id.isnot(None))\
             .group_by(AgencyFunctionImplementation.agency_id)\
             .all()
            
            if vendor_counts:
                total_vendor_relationships = sum([count.vendor_count for count in vendor_counts])
                agencies_with_vendors = len(vendor_counts)
                avg_vendors = round(total_vendor_relationships / agencies_with_vendors, 1)
        
        # Most active agency (agency with most implementations)
        most_active = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('impl_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        stats = {
            'total_agencies': total_agencies,
            'active_implementations': active_implementations,
            'avg_implementations_per_agency': avg_implementations,
            'avg_vendors_per_agency': avg_vendors,
            'most_active_agency': most_active.name if most_active else 'N/A',
            'most_active_count': most_active.impl_count if most_active else 0
        }
        
        return jsonify(stats)
    except Exception as e:
        return json_error_response(f"Error getting agency stats: {str(e)}")

@main.route("/api/count/active-implementations")
def count_active_implementations():
    try:
        count = AgencyFunctionImplementation.query.filter_by(status='Active').count()
        return str(count)
    except Exception as e:
        return "0"

@main.route("/api/agencies/insights")
def agency_insights():
    """Get agency insights for the sidebar"""
    try:
        # Most tech-advanced agency
        tech_leader = db.session.query(
            Agency.name,
            func.count(AgencyFunctionImplementation.id).label('tech_count')
        ).join(AgencyFunctionImplementation)\
         .group_by(Agency.id, Agency.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most common functional area
        common_area = db.session.query(
            FunctionalArea.name,
            func.count(AgencyFunctionImplementation.id).label('usage_count')
        ).join(Function)\
         .join(AgencyFunctionImplementation)\
         .group_by(FunctionalArea.id, FunctionalArea.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        # Most used vendor
        top_vendor = db.session.query(
            Vendor.name,
            func.count(AgencyFunctionImplementation.id).label('deployment_count')
        ).join(Component)\
         .join(AgencyFunctionImplementation)\
         .group_by(Vendor.id, Vendor.name)\
         .order_by(func.count(AgencyFunctionImplementation.id).desc())\
         .first()
        
        return jsonify({
            'tech_leader': tech_leader.name if tech_leader else 'N/A',
            'tech_leader_count': tech_leader.tech_count if tech_leader else 0,
            'common_area': common_area.name if common_area else 'N/A',
            'top_vendor': top_vendor.name if top_vendor else 'N/A'
        })
    except Exception as e:
        return json_error_response(f"Error getting agency insights: {str(e)}")
    
# Functional Areas Management Routes
@main.route("/functional-areas")
def functional_areas_page():
    return render_template("functional_areas.html")

@main.route("/api/functional-areas/list")
def functional_areas_list():
    try:
        search = request.args.get('search', '').lower()
        
        # Simple query - no agency relationship anymore
        query = FunctionalArea.query
        
        # Apply search filter
        if search:
            query = query.filter(FunctionalArea.name.ilike(f'%{search}%'))
        
        # Order by functional area name only
        functional_areas = query.order_by(FunctionalArea.name).all()
        
        return render_template('fragments/functional_area_list.html', 
                             functional_areas=functional_areas)
    except Exception as e:
        return html_error_fragment(f"Error loading functional areas: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/details")
def functional_area_details(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        
        # Sort functions by criticality (high -> medium -> low) then by name
        criticality_order = {'high': 1, 'medium': 2, 'low': 3}
        sorted_functions = sorted(
            functional_area.functions,
            key=lambda f: (criticality_order.get(f.criticality.value, 4), f.name.lower())
        )
        
        # Add component count for each function
        for function in sorted_functions:
            function.component_count = len(function.components)
            function.agency_count = len(set(impl.agency for impl in function.agency_implementations))
        
        functional_area.sorted_functions = sorted_functions
        
        return render_template('fragments/functional_area_details.html', 
                             functional_area=functional_area)
    except Exception as e:
        return html_error_fragment(f"Error loading functional area details: {str(e)}")

@main.route("/api/functional-areas/form")
def functional_area_form():
    try:
        # Get all agencys for the dropdown
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=None, 
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading form: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>/form")
def functional_area_edit_form(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        agencies = Agency.query.order_by(Agency.name).all()
        
        return render_template('fragments/functional_area_form.html', 
                             functional_area=functional_area,
                             agencies=agencies)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")

@main.route("/api/functional-areas", methods=['POST'])
@login_required
def create_functional_area():
    try:
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        # Global duplicate check (functional areas are no longer agency-specific)
        existing = FunctionalArea.query.filter_by(name=data['name']).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists")
        
        # Create new functional area (no agency linkage)
        functional_area = FunctionalArea(
            name=data['name'],
            description=data.get('description') or None
        )
        
        db.session.add(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' created successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['PUT'])
@login_required
def update_functional_area(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        data = request.form
        
        # Validate required fields
        if not data.get('name'):
            return html_error_fragment("Functional area name is required")
        
        # Global duplicate check excluding current record
        existing = FunctionalArea.query.filter(
            FunctionalArea.name == data['name'],
            FunctionalArea.id != functional_area_id
        ).first()
        if existing:
            return html_error_fragment(f"Functional area '{data['name']}' already exists")
        
        # Update fields (no agency linkage)
        functional_area.name = data['name']
        functional_area.description = data.get('description') or None
        
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{functional_area.name}' updated successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating functional area: {str(e)}")

@main.route("/api/functional-areas/<int:functional_area_id>", methods=['DELETE'])
@login_required
def delete_functional_area(functional_area_id):
    try:
        functional_area = FunctionalArea.query.get_or_404(functional_area_id)
        name = functional_area.name
        
        # Delete the functional area (cascade will handle related records)
        db.session.delete(functional_area)
        db.session.commit()
        
        return html_success_fragment(f"Functional area '{name}' deleted successfully")
        
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting functional area: {str(e)}")

@main.route("/api/count/functions")
def count_functions():
    try:
        count = Function.query.count()
        return str(count)
    except Exception as e:
        return "0"
    

@main.route('/contribute')
def contribute():
    return render_template('contribute.html')

@main.route("/api/filter-options/functional-areas")
def functional_areas_filter_options():
    """Get functional area options that have associated components"""
    try:
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Component)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/filter-options/vendors")
def vendors_filter_options():
    """Get vendor options that have associated components"""
    try:
        vendors = db.session.query(Vendor.name)\
            .join(Component)\
            .distinct()\
            .order_by(Vendor.name)\
            .all()
        
        html = '<option value="">All Vendors</option>'
        for vendor in vendors:
            html += f'<option value="{vendor.name}">{vendor.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Vendors</option>'
    
@main.route("/api/vendors/filter-options/agencies")
def vendor_agencies_filter_options():
    """Get agencies that have vendor relationships for filter dropdown"""
    try:
        # Find agencies that have components from vendors
        agencies = db.session.query(Agency.name)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(Agency.name)\
            .all()
        
        html = '<option value="">All Agencies</option>'
        for agency in agencies:
            html += f'<option value="{agency.name}">{agency.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Agencies</option>'

@main.route("/api/vendors/filter-options/functional-areas")
def vendor_functional_areas_filter_options():
    """Get functional areas that have vendor relationships for filter dropdown"""
    try:
        # Find functional areas that have components from vendors
        functional_areas = db.session.query(FunctionalArea.name)\
            .join(Function)\
            .join(AgencyFunctionImplementation)\
            .join(Component)\
            .join(Vendor)\
            .distinct()\
            .order_by(FunctionalArea.name)\
            .all()
        
        html = '<option value="">All Functional Areas</option>'
        for fa in functional_areas:
            html += f'<option value="{fa.name}">{fa.name}</option>'
        
        return html
    except Exception as e:
        return '<option value="">All Functional Areas</option>'

@main.route("/api/components/<int:component_id>/vendor")
def component_vendor_details(component_id):
    """Get vendor information for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.vendor:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No vendor assigned</span>
            </div>
            '''
        
        vendor = component.vendor
        website_link = f'<a href="{vendor.website}" target="_blank" class="text-blue-400 hover:text-blue-300">{vendor.website}</a>' if vendor.website else "No website"
        
        html = f'''
        <div class="space-y-3">
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Name</span>
                <span class="text-white font-medium">{vendor.name}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Website</span>
                <span class="text-white text-sm">{website_link}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Contact</span>
                <span class="text-white text-sm">{vendor.contact_email or vendor.contact_name or "Not provided"}</span>
            </div>
            <div class="flex items-center justify-between">
                <span class="text-slate-400 text-sm">Phone</span>
                <span class="text-white text-sm">{vendor.contact_phone or vendor.vendor_phone or "Not provided"}</span>
            </div>
        </div>
        '''
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading vendor info</span></div>'

@main.route("/api/components/<int:component_id>/integrations")
def component_integration_details(component_id):
    """Get integration points for a specific component (without descriptions)"""
    try:
        component = Component.query.get_or_404(component_id)
        
        if not component.integration_points:
            return '''
            <div class="text-center py-4">
                <span class="text-slate-500 text-sm">No integrations configured</span>
            </div>
            '''
        
        html = '<div class="space-y-2">'
        for ip in component.integration_points:
            html += f'''
            <div class="flex items-center justify-between p-2 bg-slate-700/30 rounded">
                <span class="text-sm text-slate-300">{ip.name}</span>
                <span class="text-xs text-slate-500">{ip.integration_type or "Standard"}</span>
            </div>
            '''
        html += '</div>'
        
        return html
    except Exception as e:
        return f'<div class="text-center py-4"><span class="text-red-400 text-sm">Error loading integrations</span></div>'

@main.route("/api/agencies/<int:agency_id>/implementations")
@login_required
def agency_implementations_page(agency_id: int):
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png') if agency.short_name else None
        implementations = AgencyFunctionImplementation.query\
            .filter_by(agency_id=agency_id)\
            .join(Function).join(FunctionalArea)\
            .order_by(FunctionalArea.name, Function.name)\
            .all()
        return render_template('agency_implementations.html', agency=agency, implementations=implementations)
    except Exception as e:
        return html_error_fragment(f"Error loading implementations page: {str(e)}")

@main.route("/agencies/<int:agency_id>/implementations")
@login_required
def agency_implementations_full_page(agency_id: int):
    try:
        agency = Agency.query.get_or_404(agency_id)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png') if agency.short_name else None
        implementations = AgencyFunctionImplementation.query\
            .filter_by(agency_id=agency_id)\
            .join(Function).join(FunctionalArea)\
            .order_by(FunctionalArea.name, Function.name)\
            .all()
        return render_template('agency_implementations.html', agency=agency, implementations=implementations)
    except Exception as e:
        return html_error_fragment(f"Error loading implementations page: {str(e)}")


@main.route("/api/agencies/<int:agency_id>/implementations/list")
@login_required
def agency_implementations_list(agency_id: int):
    try:
        status = request.args.get('status')
        q = AgencyFunctionImplementation.query.filter_by(agency_id=agency_id)
        if status in ('Active', 'Planned', 'Retired'):
            q = q.filter(AgencyFunctionImplementation.status == status)
        implementations = q.join(Function).join(FunctionalArea).order_by(FunctionalArea.name, Function.name).all()
        return render_template('fragments/afi_list.html', implementations=implementations)
    except Exception as e:
        return html_error_fragment(f"Error loading implementations list: {str(e)}")

@main.route("/api/agencies/<int:agency_id>/implementations", methods=["POST"])  # Create AFI (parent + optional children)
@login_required
def create_agency_implementation(agency_id: int):
    try:
        agency = Agency.query.get_or_404(agency_id)
        function_id = int(request.form.get('function_id'))
        component_id = int(request.form.get('component_id'))
        selected_child_ids = request.form.getlist('selected_child_ids[]') or request.form.getlist('selected_child_ids')
        selected_child_ids = [int(cid) for cid in selected_child_ids] if selected_child_ids else None

        function = Function.query.get_or_404(function_id)
        component = Component.query.get_or_404(component_id)

        # Collect details
        details = {
            'status': request.form.get('status') or 'Active',
            'deployment_date': (datetime.strptime(request.form.get('deployment_date'), '%Y-%m-%d').date()
                                if request.form.get('deployment_date') else None),
            'version': request.form.get('version') or None,
            'deployment_notes': request.form.get('deployment_notes') or None,
            'implementation_notes': request.form.get('implementation_notes') or None,
            'additional_metadata': None,
        }

        # If non-composite or a child is chosen, ensure compatibility
        if not component.is_composite:
            if not component_supports_function(component, function):
                return html_error_fragment("Selected component does not implement the chosen function.")
        # For composite parent, children will be validated per-child in util

        # Create AFI(s)
        create_afi_with_optional_children(
            agency=agency,
            function=function,
            component=component,
            details=details,
            selected_child_ids=selected_child_ids
        )
        db.session.commit()

        # Decide response target based on HX-Current-URL (full page vs sidebar)
        current_url = request.headers.get('HX-Current-URL', '')
        if f"/agencies/{agency.id}/implementations" in current_url:
            implementations = AgencyFunctionImplementation.query\
                .filter_by(agency_id=agency.id)\
                .join(Function).join(FunctionalArea)\
                .order_by(FunctionalArea.name, Function.name)\
                .all()
            return render_template('fragments/afi_list.html', implementations=implementations)

        # Return refreshed agency details into the right panel (legacy sidebar flow)
        agency.header_url = url_for('static', filename=f'images/transit_headers/{agency.short_name.lower().replace(" ", "_")}_header.png') if agency.short_name else None
        return render_template('fragments/agency_details.html', agency=agency)

    except IntegrityError as ie:
        db.session.rollback()
        return html_error_fragment("This implementation already exists for the agency/function/component.")
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error creating implementation: {str(e)}")


@main.route("/api/wizard/afi/step1")
@login_required
def wizard_afi_step1():
    try:
        agency_id = int(request.args.get('agency_id'))
        component_id = request.args.get('component_id')
        agency = Agency.query.get_or_404(agency_id)
        functional_areas = FunctionalArea.query.order_by(FunctionalArea.name).all()
        preselected_component = Component.query.get(int(component_id)) if component_id else None
        return render_template('fragments/wizard_afi_step1.html',
                               agency=agency,
                               functional_areas=functional_areas,
                               preselected_component=preselected_component)
    except Exception as e:
        return html_error_fragment(f"Error loading wizard: {str(e)}")


@main.route("/api/wizard/afi/step2")
@login_required
def wizard_afi_step2():
    try:
        agency_id = int(request.args.get('agency_id'))
        function_id = int(request.args.get('function_id'))
        search = (request.args.get('component_search') or '').strip()
        vendor_id = request.args.get('vendor_id')
        preselected_component_id = request.args.get('component_id')

        agency = Agency.query.get_or_404(agency_id)
        function = Function.query.get_or_404(function_id)

        # Components that directly implement the function
        direct_components = db.session.query(Component).join(Component.functions)\
            .filter(Function.id == function_id)
        
        # Optional filters
        if vendor_id:
            try:
                vid = int(vendor_id)
                direct_components = direct_components.filter(Component.vendor_id == vid)
            except ValueError:
                pass
        if search:
            direct_components = direct_components.filter(Component.name.ilike(f"%{search}%"))
        direct_components = direct_components.distinct().order_by(Component.name).all()

        # Composite parents with children that implement the function
        # Strategy: find children implementing the function, collect their parents
        children_q = db.session.query(Component).join(Component.functions)\
            .filter(Function.id == function_id, Component.parent_component_id.isnot(None))
        if vendor_id:
            try:
                vid = int(vendor_id)
                children_q = children_q.filter(Component.vendor_id == vid)
            except ValueError:
                pass
        if search:
            children_q = children_q.filter(Component.name.ilike(f"%{search}%"))
        child_components = children_q.all()
        parents_map = {}
        for child in child_components:
            parent = child.parent_component
            if not parent:
                continue
            parents_map.setdefault(parent.id, {'parent': parent, 'children': []})
            if child not in parents_map[parent.id]['children']:
                parents_map[parent.id]['children'].append(child)
        composite_parents = list(parents_map.values())

        preselected_component = Component.query.get(int(preselected_component_id)) if preselected_component_id else None

        return render_template('fragments/wizard_afi_step2_components.html',
                               agency=agency,
                               function=function,
                               direct_components=direct_components,
                               composite_parents=composite_parents,
                               preselected_component=preselected_component)
    except Exception as e:
        return html_error_fragment(f"Error loading components: {str(e)}")


@main.route("/api/wizard/afi/step3")
@login_required
def wizard_afi_step3():
    try:
        agency_id = int(request.args.get('agency_id'))
        function_id = int(request.args.get('function_id'))
        component_id = int(request.args.get('component_id'))
        selected_child_ids = request.args.getlist('selected_child_ids') or request.args.getlist('selected_child_ids[]')
        
        agency = Agency.query.get_or_404(agency_id)
        function = Function.query.get_or_404(function_id)
        component = Component.query.get_or_404(component_id)
        selected_children = []
        if selected_child_ids:
            child_ids_int = [int(cid) for cid in selected_child_ids]
            selected_children = Component.query.filter(Component.id.in_(child_ids_int)).all()
        return render_template('fragments/wizard_afi_step3_details.html',
                               agency=agency,
                               function=function,
                               component=component,
                               selected_children=selected_children)
    except Exception as e:
        return html_error_fragment(f"Error loading details: {str(e)}")


@main.route("/api/wizard/afi/step4")
@login_required
def wizard_afi_step4():
    try:
        # Pass-through all params to final review
        agency_id = int(request.args.get('agency_id'))
        function_id = int(request.args.get('function_id'))
        component_id = int(request.args.get('component_id'))
        selected_child_ids = request.args.getlist('selected_child_ids') or request.args.getlist('selected_child_ids[]')
        status = request.args.get('status') or 'Active'
        deployment_date = request.args.get('deployment_date') or ''
        version = request.args.get('version') or ''
        deployment_notes = request.args.get('deployment_notes') or ''
        implementation_notes = request.args.get('implementation_notes') or ''

        agency = Agency.query.get_or_404(agency_id)
        function = Function.query.get_or_404(function_id)
        component = Component.query.get_or_404(component_id)
        selected_children = []
        if selected_child_ids:
            child_ids_int = [int(cid) for cid in selected_child_ids]
            selected_children = Component.query.filter(Component.id.in_(child_ids_int)).all()

        return render_template('fragments/wizard_afi_step4_review.html',
                               agency=agency,
                               function=function,
                               component=component,
                               selected_children=selected_children,
                               status=status,
                               deployment_date=deployment_date,
                               version=version,
                               deployment_notes=deployment_notes,
                               implementation_notes= implementation_notes)
    except Exception as e:
        return html_error_fragment(f"Error loading review: {str(e)}")


@main.route("/api/components/<int:component_id>/children")
@login_required
def component_children_for_function(component_id):
    try:
        function_id = int(request.args.get('function_id'))
        function = Function.query.get_or_404(function_id)
        component = Component.query.get_or_404(component_id)
        children = component.child_components or []
        html = ''
        for child in children:
            supports = component_supports_function(child, function)
            disabled_attr = '' if supports else 'disabled'
            note = '' if supports else '<span class="text-xs text-slate-500 ml-1">(does not implement)</span>'
            html += f'<label class="flex items-center space-x-2 py-1"><input type="checkbox" name="selected_child_ids" value="{child.id}" {disabled_attr} class="accent-blue-500"/><span class="text-sm text-slate-200">{child.name}</span>{note}</label>'
        if not html:
            html = '<div class="text-sm text-slate-400">No subcomponents</div>'
        return html
    except Exception as e:
        return html_error_fragment(f"Error loading children: {str(e)}")

@main.route('/api/options/functions')
@login_required
def options_functions():
    try:
        fa_id = request.args.get('functional_area_id') or request.args.get('fa_id')
        if not fa_id:
            return '<option value="">Select a function</option>'
        fid = int(fa_id)
        functions = Function.query.filter_by(functional_area_id=fid).order_by(Function.name).all()
        html = '<option value="">Select a function</option>'
        for f in functions:
            html += f'<option value="{f.id}">{f.name}</option>'
        return html
    except Exception:
        return '<option value="">Select a function</option>'

@main.route('/api/implementations/<int:impl_id>/edit')
@login_required
def afi_edit_form(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        # Load functions list for select (by FA of current function to keep concise)
        functional_areas = FunctionalArea.query.order_by(FunctionalArea.name).all()
        functions = Function.query.order_by(Function.name).all()
        return render_template('fragments/afi_edit_form.html', impl=impl, functions=functions, functional_areas=functional_areas)
    except Exception as e:
        return html_error_fragment(f"Error loading edit form: {str(e)}")


@main.route('/api/implementations/<int:impl_id>', methods=['POST'])
@login_required
def afi_update(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        old = {
                       'function_id': impl.function_id,
            'status': impl.status,
            'version': impl.version,
            'deployment_date': impl.deployment_date.isoformat() if impl.deployment_date else None,
            'deployment_notes': impl.deployment_notes,
            'implementation_notes': impl.implementation_notes,
        }
        # Optional function change
        function_id = request.form.get('function_id')
        if function_id:
            new_function_id = int(function_id)
            # Only validate and update if the function actually changed
            if new_function_id != impl.function_id:
                new_function = Function.query.get(new_function_id)
                if not new_function:
                    return html_error_fragment('Invalid function selected')
                # Validate compatibility for non-parent, non-composite component
                is_parent = bool(impl.child_afis)
                if (not is_parent) and (not impl.component.is_composite) and (not component_supports_function(impl.component, new_function)):
                    return html_error_fragment('Component does not implement the selected function')
                impl.function_id = new_function.id
        # Other fields
        impl.status = request.form.get('status') or impl.status
        dd = request.form.get('deployment_date')
        impl.deployment_date = datetime.strptime(dd, '%Y-%m-%d').date() if dd else None
        impl.version = request.form.get('version') or None
        impl.deployment_notes = request.form.get('deployment_notes') or None
        impl.implementation_notes = request.form.get('implementation_notes') or None

        db.session.flush()
        new = {
            'function_id': impl.function_id,
            'status': impl.status,
            'version': impl.version,
            'deployment_date': impl.deployment_date.isoformat() if impl.deployment_date else None,
            'deployment_notes': impl.deployment_notes,
            'implementation_notes': impl.implementation_notes,
        }
        action = 'function_changed' if old['function_id'] != new['function_id'] else 'updated'
        record_afi_history(impl, action, old_values=old, new_values=new)
        db.session.commit()
        # Return updated row
        return render_template('fragments/afi_row.html', impl=impl)
    except IntegrityError:
        db.session.rollback()
        return html_error_fragment('Update violates uniqueness or constraints')
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating implementation: {str(e)}")


@main.route('/api/implementations/<int:impl_id>/status', methods=['POST'])
@login_required
def afi_update_status(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        old_status = impl.status
        new_status = request.form.get('status')
        if new_status not in ('Active', 'Planned', 'Retired'):
            return html_error_fragment('Invalid status')
        impl.status = new_status
        db.session.flush()
        record_afi_history(impl, 'status_change', old_values={'status': old_status}, new_values={'status': new_status})
        db.session.commit()
        return render_template('fragments/afi_row.html', impl=impl)
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error updating status: {str(e)}")


@main.route('/api/implementations/<int:impl_id>', methods=['DELETE'])
@login_required
def afi_delete(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        old = {
            'agency_id': impl.agency_id,
            'function_id': impl.function_id,
            'component_id': impl.component_id,
            'status': impl.status,
            'version': impl.version,
        }
        afi_id_for_history = impl.id
        db.session.delete(impl)
        db.session.flush()
        # Create a manual history row after delete
        from app.models.tran import AgencyFunctionImplementationHistory
        hist = AgencyFunctionImplementationHistory(
            afi_id=afi_id_for_history,
            action='deleted',
            changed_by=get_updated_by(),
            old_values=old,
            new_values=None,
        )
        db.session.add(hist)
        db.session.commit()
        return ''  # Let HTMX remove the row via hx-swap=outerHTML
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error deleting implementation: {str(e)}")


@main.route('/api/implementations/<int:parent_id>/child/<int:child_id>', methods=['DELETE'])
@login_required
def afi_remove_child(parent_id: int, child_id: int):
    try:
        # Ensure parent exists
        parent = AgencyFunctionImplementation.query.get_or_404(parent_id)
        # Ensure child belongs to parent
        child = AgencyFunctionImplementation.query.get_or_404(child_id)
        if child.parent_afi_id != parent.id:
            return html_error_fragment('Child does not belong to this composite')
        # Remove child
        from app.utils.afi import remove_child_afi
        ok = remove_child_afi(child_id)
        if not ok:
            db.session.rollback()
            return html_error_fragment('Unable to remove child implementation')
        db.session.commit()
        # Return refreshed parent row or agency details; choose parent row refresh
        parent = AgencyFunctionImplementation.query.get(parent_id)
        return render_template('fragments/afi_row.html', impl=parent)
    except Exception as e:
        db.session.rollback()
        return html_error_fragment(f"Error removing subcomponent: {str(e)}")


@main.route('/api/implementations/<int:impl_id>/history')
@login_required
def afi_history(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        entries = impl.history_entries
        # Sort newest first
        entries = sorted(entries, key=lambda h: h.timestamp or datetime.min, reverse=True)
        return render_template('fragments/afi_history.html', impl=impl, entries=entries)
    except Exception as e:
        return html_error_fragment(f"Error loading history: {str(e)}")

@main.route('/api/implementations/<int:impl_id>/row')
@login_required
def afi_row(impl_id: int):
    try:
        impl = AgencyFunctionImplementation.query.get_or_404(impl_id)
        return render_template('fragments/afi_row.html', impl=impl)
    except Exception as e:
        return html_error_fragment(f"Error loading implementation row: {str(e)}")

# Components CRUD Endpoints
@main.route("/api/components/form")
@login_required
def component_form():
    try:
        form = ComponentForm()
        vendors = Vendor.query.order_by(Vendor.name).all()
        return render_template('fragments/component_form.html', form=form, component=None, vendors=vendors)
    except Exception as e:
        return html_error_fragment(f"Error loading component form: {str(e)}")

@main.route("/api/components/<int:component_id>/form")
@login_required
def component_edit_form(component_id):
    try:
        component = Component.query.get_or_404(component_id)
        form = ComponentForm()
        form.populate_from_component(component)
        vendors = Vendor.query.order_by(Vendor.name).all()
        return render_template('fragments/component_form.html', form=form, component=component, vendors=vendors)
    except Exception as e:
        return html_error_fragment(f"Error loading component edit form: {str(e)}")

@main.route('/api/components', methods=['POST'])
@login_required
def create_component():
    try:
        form = ComponentForm()
        if form.validate_on_submit():
            existing = Component.query.filter_by(name=form.name.data).first()
            if existing:
                return json_error_response(f"Component '{form.name.data}' already exists")
            component = Component()
            form.populate_component(component)
            db.session.add(component)
            db.session.commit()
            return json_success_response(f"Component '{component.name}' created successfully")
        else:
            return json_form_error_response(form)
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error creating component: {str(e)}")

@main.route('/api/components/<int:component_id>', methods=['POST'])
@login_required
def update_component(component_id):
    try:
        component = Component.query.get_or_404(component_id)
        form = ComponentForm()
        if form.validate_on_submit():
            existing = Component.query.filter(Component.name == form.name.data, Component.id != component_id).first()
            if existing:
                return json_error_response(f"Component '{form.name.data}' already exists")
            form.populate_component(component)
            db.session.commit()
            return json_success_response(f"Component '{component.name}' updated successfully")
        else:
            return json_form_error_response(form)
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error updating component: {str(e)}")

@main.route('/api/components/<int:component_id>', methods=['DELETE'])
@login_required
def delete_component(component_id):
    try:
        component = Component.query.get_or_404(component_id)
        name = component.name
        # Prevent delete if used in AFIs
        usage_count = AgencyFunctionImplementation.query.filter_by(component_id=component_id).count()
        if usage_count > 0:
            return json_error_response(f"Cannot delete component '{name}' because it is used in {usage_count} implementations.")
        db.session.delete(component)
        db.session.commit()
        return json_success_response(f"Component '{name}' deleted successfully")
    except Exception as e:
        db.session.rollback()
        return json_error_response(f"Error deleting component: {str(e)}")

# End of app/routes/main.py

# Start of app/routes/agency.py
from flask import Blueprint, render_template, redirect, url_for, flash, request
from app import db
from app.models.tran import Agency
from app.forms.forms import AgencyForm

agency_bp = Blueprint('agency', __name__, url_prefix='/agencies')

@agency_bp.route('/new', methods=['GET', 'POST'])
def add_agency():
    form = AgencyForm()
    if form.validate_on_submit():
        # Check for duplicate agency name
        existing = Agency.query.filter_by(name=form.name.data).first()
        if existing:
            flash('An agency with this name already exists.', 'danger')
            return render_template('fragments/agency_form.html', form=form)
        agency = Agency()
        form.populate_agency(agency)
        # Persist additional plain inputs not on the Flask-WTF form
        agency.short_name = request.form.get('short_name') or None
        agency.email_domain = form.email_domain.data or None
        db.session.add(agency)
        try:
            db.session.commit()
            flash('Agency added successfully!', 'success')
            return redirect(url_for('main.index'))  # Adjust as needed
        except Exception as e:
            db.session.rollback()
            flash('Error adding agency: {}'.format(str(e)), 'danger')
    return render_template('fragments/agency_form.html', form=form)

# End of app/routes/agency.py

# Start of app/models/tran.py
# models/tran.py

from datetime import datetime
from app import db
import enum

# Association Tables
component_integration = db.Table(
    'component_integration',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True)
)

function_component = db.Table(
    'function_component',
    db.Column('function_id', db.Integer, db.ForeignKey('functions.id'), primary_key=True),
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True)
)

component_tag = db.Table(
    'component_tag',
    db.Column('component_id', db.Integer, db.ForeignKey('components.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_tag = db.Table(
    'integration_tag',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('tag_id', db.Integer, db.ForeignKey('tags.id'), primary_key=True)
)

integration_standard = db.Table(
    'integration_standard',
    db.Column('integration_point_id', db.Integer, db.ForeignKey('integration_points.id'), primary_key=True),
    db.Column('standard_id', db.Integer, db.ForeignKey('standards.id'), primary_key=True)
)

# Enums
class Criticality(enum.Enum):
    high = "high"
    medium = "medium"
    low = "low"

class LifecycleStage(enum.Enum):
    planned = "planned"          # Identified / slated for adoption
    pilot = "pilot"              # Limited trial
    production = "production"    # Broad/standard use
    deprecated = "deprecated"    # Use discouraged; in transition
    retired = "retired"          # No longer in use/supported

# Core Models
class Agency(db.Model):
    __tablename__ = 'agencies'

    # TODO: Enhance sizing metrics for agencies: routes, riders, budget; currently stored in additional metadata json

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    location = db.Column(db.String(100))
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))
    email_domain = db.Column(db.String(255))
    ceo = db.Column(db.String(128))
    address_hq = db.Column(db.String(256))
    phone_number = db.Column(db.String(64))
    transit_map_link = db.Column(db.String(256))
    contact_email = db.Column(db.String(255))
    contact_phone = db.Column(db.String(50))
    contact_name = db.Column(db.String(100))
    short_name = db.Column(db.String(50)) # TODO: use short name for constructing agency specific URLs for images, etc.
    additional_metadata = db.Column(db.JSON)
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_transit_system_name'),
    )

    function_implementations = db.relationship('AgencyFunctionImplementation', back_populates='agency', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Agency(name={self.name}, location={self.location})>"
    
    #@property
    #def logo_url(self):
    #    """Generate agency logo URL"""
    #    from flask import url_for
    #    if self.short_name:
    #        return url_for('static', filename=f'images/agency_logos/{self.short_name.lower().replace(" ", "_")}_logo.png')
    #    return None
    
    #@property
    #def header_url(self):
    #    """Generate agency header URL"""
    #    from flask import url_for
    #    if self.short_name:
    #        return url_for('static', filename=f'images/agency_headers/{self.short_name.lower().replace(" ", "_")}_header.png')
    #    return None

class FunctionalArea(db.Model):
    __tablename__ = 'functional_areas'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    functions = db.relationship('Function', back_populates='functional_area', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<FunctionalArea(name={self.name})>"

class Function(db.Model):
    __tablename__ = 'functions'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    criticality = db.Column(db.Enum(Criticality), default=Criticality.medium, nullable=False)

    functional_area_id = db.Column(db.Integer, db.ForeignKey('functional_areas.id'), nullable=False)
    functional_area = db.relationship('FunctionalArea', back_populates='functions')

    components = db.relationship('Component', secondary='function_component', back_populates='functions')
    agency_implementations = db.relationship('AgencyFunctionImplementation', back_populates='function', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Function(name={self.name}, criticality={self.criticality.value})>"

class Vendor(db.Model):
    __tablename__ = 'vendors'
    __table_args__ = (
        db.UniqueConstraint('name', name='uq_vendor_name'),
    )

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    short_name = db.Column(db.String(50))
    website = db.Column(db.String(255))
    vendor_email = db.Column(db.String(255)) #TODO: Create field to store vendor email domain 
    vendor_phone = db.Column(db.String(50))
    description = db.Column(db.String(500))

    components = db.relationship('Component', back_populates='vendor', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Vendor(name={self.name})>"
    
    @property
    def logo_url(self):
        """Generate vendor logo URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_logos/{self.short_name.lower().replace(" ", "_")}_logo.png')
        return None
    
    @property
    def header_url(self):
        """Generate vendor header URL"""
        from flask import url_for
        if self.short_name:
            return url_for('static', filename=f'images/vendor_headers/{self.short_name.lower().replace(" ", "_")}_header.png')
        return None

class Component(db.Model):
    __tablename__ = 'components'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(1000))
    version = db.Column(db.String(50))
    deployment_date = db.Column(db.Date)
    update_frequency = db.Column(db.String(50))
    known_issues = db.Column(db.String(500))
    additional_metadata = db.Column(db.JSON)
    lifecycle_stage = db.Column(db.Enum(LifecycleStage), nullable=True)
    support_end_date = db.Column(db.Date, nullable=True)

    # Component nesting functionality
    parent_component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=True)
    parent_component = db.relationship('Component', remote_side=[id], backref='child_components')
    is_composite = db.Column(db.Boolean, default=False, nullable=False)
    vendor_id = db.Column(db.Integer, db.ForeignKey('vendors.id'), nullable=True)

    vendor = db.relationship('Vendor', back_populates='components')
    functions = db.relationship('Function', secondary='function_component', back_populates='components')
    integration_points = db.relationship('IntegrationPoint', secondary='component_integration', back_populates='components')
    tags = db.relationship('Tag', secondary='component_tag', back_populates='components')
    user_roles = db.relationship('UserRole', back_populates='component', cascade='all, delete-orphan')
    update_logs = db.relationship('UpdateLog', back_populates='component', cascade='all, delete-orphan')
    agency_usages = db.relationship('AgencyFunctionImplementation', back_populates='component', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<Component(name={self.name}, version={self.version})>"
    
class AgencyFunctionImplementation(db.Model):
    __tablename__ = 'agency_function_implementations'
    
    id = db.Column(db.Integer, primary_key=True)
    agency_id = db.Column(db.Integer, db.ForeignKey('agencies.id'), nullable=False)
    function_id = db.Column(db.Integer, db.ForeignKey('functions.id'), nullable=False)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    security_review_date = db.Column(db.Date, nullable=True)
    
    # Agency-specific deployment details
    deployment_date = db.Column(db.Date)
    version = db.Column(db.String(50))
    deployment_notes = db.Column(db.String(1000))
    status = db.Column(db.String(50), default='Active')  # Active, Planned, Retired
    implementation_notes = db.Column(db.String(1000))
    additional_metadata = db.Column(db.JSON)

    # Composite deployment linkage (optional parent AFI for composite umbrella)
    parent_afi_id = db.Column(
        db.Integer,
        db.ForeignKey('agency_function_implementations.id', ondelete='SET NULL'),
        nullable=True
    )

    # Relationships
    agency = db.relationship('Agency', back_populates='function_implementations')
    function = db.relationship('Function', back_populates='agency_implementations')  
    component = db.relationship('Component', back_populates='agency_usages')
    parent_afi = db.relationship(
        'AgencyFunctionImplementation',
        remote_side=[id],
        backref=db.backref('child_afis', cascade='all, delete-orphan')
    )
    
    # Unique constraint and helpful indexes
    __table_args__ = (
        db.UniqueConstraint('agency_id', 'function_id', 'component_id', 
                          name='uq_agency_function_component'),
        db.Index('idx_afi_agency_function', 'agency_id', 'function_id'),
        db.Index('ix_afi_parent_afi_id', 'parent_afi_id'),
    )
    
    def __repr__(self):
        return f"<AgencyFunctionImplementation(agency={self.agency.name if self.agency else None}, function={self.function.name if self.function else None}, component={self.component.name if self.component else None})>"

class IntegrationPoint(db.Model):
    __tablename__ = 'integration_points'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    website = db.Column(db.String(255))

    standards = db.relationship('Standard', secondary=integration_standard, back_populates='integration_points')
    components = db.relationship('Component', secondary='component_integration', back_populates='integration_points')
    tags = db.relationship('Tag', secondary=integration_tag, back_populates='integration_points')

    def __repr__(self):
        return f"<IntegrationPoint(name={self.name})>"

class Standard(db.Model):
    __tablename__ = 'standards'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))
    version = db.Column(db.String(50))
    standard_url = db.Column(db.String(255))

    integration_points = db.relationship('IntegrationPoint', secondary=integration_standard, back_populates='standards')

    def __repr__(self):
        return f"<Standard(name={self.name}, version={self.version})>"

class TagGroup(db.Model):
    __tablename__ = 'tag_groups'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(500))

    tags = db.relationship('Tag', back_populates='tag_group', cascade='all, delete-orphan')

    def __repr__(self):
        return f"<TagGroup(name={self.name})>"

class Tag(db.Model):
    __tablename__ = 'tags'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))
    color = db.Column(db.String(20))

    tag_group_id = db.Column(db.Integer, db.ForeignKey('tag_groups.id'), nullable=False)
    tag_group = db.relationship('TagGroup', back_populates='tags')

    components = db.relationship('Component', secondary='component_tag', back_populates='tags')
    integration_points = db.relationship('IntegrationPoint', secondary=integration_tag, back_populates='tags')

    def __repr__(self):
        return f"<Tag(name={self.name})>"
    
class UserRole(db.Model):
    __tablename__ = 'user_roles'

    id = db.Column(db.Integer, primary_key=True)
    role_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500))

    component_id = db.Column(db.Integer, db.ForeignKey('components.id'))
    component = db.relationship('Component', back_populates='user_roles')

    def __repr__(self):
        return f"<UserRole(role_name={self.role_name})>"

class UpdateLog(db.Model):
    __tablename__ = 'update_logs'

    id = db.Column(db.Integer, primary_key=True)
    component_id = db.Column(db.Integer, db.ForeignKey('components.id'), nullable=False)
    updated_by = db.Column(db.String(100), nullable=False)
    update_date = db.Column(db.DateTime, default=datetime.utcnow)
    change_summary = db.Column(db.String(1000))

    component = db.relationship('Component', back_populates='update_logs')

    def __repr__(self):
        return f"<UpdateLog(component_id={self.component_id}, updated_by={self.updated_by})>"

class AgencyFunctionImplementationHistory(db.Model):
    __tablename__ = 'agency_function_implementation_history'

    id = db.Column(db.Integer, primary_key=True)
    afi_id = db.Column(
        db.Integer,
        db.ForeignKey('agency_function_implementations.id', ondelete='CASCADE'),
        nullable=False,
        index=True,
    )
    timestamp = db.Column(db.DateTime, default=datetime.utcnow, index=True)
    action = db.Column(db.String(50), nullable=False)  # created, updated, status_change, function_changed, deleted
    changed_by = db.Column(db.String(100))
    old_values = db.Column(db.JSON)
    new_values = db.Column(db.JSON)

    afi = db.relationship(
        'AgencyFunctionImplementation',
        backref=db.backref('history_entries', cascade='all, delete-orphan')
    )

    def __repr__(self):
        return f"<AFIHistory(afi_id={self.afi_id}, action={self.action}, timestamp={self.timestamp})>"

# End of app/models/tran.py

# Start of app/forms/forms.py
# app/forms.py (create this file)
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, EmailField, URLField, TelField, FieldList, FormField
from wtforms.validators import DataRequired, Email, URL, Optional, Length
from wtforms.widgets import TextArea

class MetadataField(FlaskForm):
    """Sub-form for metadata key-value pairs"""
    key = StringField('Key', validators=[Optional(), Length(max=100)])
    value = StringField('Value', validators=[Optional(), Length(max=500)])

class AgencyForm(FlaskForm):
    """Form for creating and editing transit agencies"""
    # Basic Information
    name = StringField('Agency Name', 
                      validators=[DataRequired(message="Agency name is required"), 
                                Length(max=100, message="Name must be less than 100 characters")])
    location = StringField('Location', 
                          validators=[Optional(), Length(max=100)])
    description = TextAreaField('Description', 
                               validators=[Optional(), Length(max=500)],
                               widget=TextArea())
    address_hq = TextAreaField('Headquarters Address', 
                              validators=[Optional(), Length(max=256)],
                              widget=TextArea())
    ceo = StringField('Chief Executive Officer', 
                     validators=[Optional(), Length(max=128)])
    contact_name = StringField('Primary Contact Name', 
                              validators=[Optional(), Length(max=100)])
    contact_email = EmailField('Primary Contact Email', 
                              validators=[Optional(), Email(message="Please enter a valid email address")])
    contact_phone = TelField('Primary Contact Phone', 
                            validators=[Optional(), Length(max=50)])
    phone_number = TelField('Main Phone Number', 
                           validators=[Optional(), Length(max=64)])
    website = URLField('Official Website', 
                      validators=[Optional(), URL(message="Please enter a valid URL")])
    transit_map_link = URLField('Transit Map URL', 
                              validators=[Optional(), URL(message="Please enter a valid URL")])
    email_domain = StringField('Agency Email Domain', validators=[Optional(), Length(max=255)])
    
    # Dynamic metadata fields will be handled separately in the template and route
    def populate_from_agency(self, agency):
        """Populate form with data from agency model"""
        self.name.data = agency.name
        self.location.data = agency.location
        self.description.data = agency.description
        self.address_hq.data = agency.address_hq
        self.ceo.data = agency.ceo
        self.contact_name.data = agency.contact_name
        self.contact_email.data = agency.contact_email
        self.contact_phone.data = agency.contact_phone
        self.phone_number.data = agency.phone_number
        self.website.data = agency.website
        self.transit_map_link.data = agency.transit_map_link
        self.email_domain.data = agency.email_domain
    
    def populate_agency(self, agency):
        """Populate agency model with form data"""
        agency.name = self.name.data
        agency.location = self.location.data or None
        agency.description = self.description.data or None
        agency.address_hq = self.address_hq.data or None
        agency.ceo = self.ceo.data or None
        agency.contact_name = self.contact_name.data or None
        agency.contact_email = self.contact_email.data or None
        agency.contact_phone = self.contact_phone.data or None
        agency.phone_number = self.phone_number.data or None
        agency.website = self.website.data or None
        agency.transit_map_link = self.transit_map_link.data or None
        agency.email_domain = (self.email_domain.data or None)

class VendorForm(FlaskForm):
    name = StringField('Vendor Name', validators=[DataRequired(), Length(min=2, max=100)])
    short_name = StringField('Short Name', validators=[Length(max=50)])
    description = TextAreaField('Description', validators=[Length(max=500)])
    website = URLField('Website', validators=[Optional(), URL()])
    vendor_email = StringField('General Email', validators=[Optional(), Email(), Length(max=255)])
    vendor_phone = StringField('General Phone', validators=[Optional(), Length(max=50)])
    
    def populate_from_vendor(self, vendor):
        """Populate form fields from vendor object"""
        self.name.data = vendor.name
        self.short_name.data = vendor.short_name
        self.description.data = vendor.description
        self.website.data = vendor.website
        self.vendor_email.data = vendor.vendor_email
        self.vendor_phone.data = vendor.vendor_phone
    
    def populate_vendor(self, vendor):
        """Populate vendor object from form data"""
        vendor.name = self.name.data
        vendor.short_name = self.short_name.data
        vendor.description = self.description.data
        vendor.website = self.website.data
        vendor.vendor_email = self.vendor_email.data
        vendor.vendor_phone = self.vendor_phone.data

class ComponentForm(FlaskForm):
    name = StringField('Component Name', validators=[DataRequired(), Length(min=2, max=100)])
    description = TextAreaField('Description', validators=[Optional(), Length(max=1000)])
    version = StringField('Version', validators=[Optional(), Length(max=50)])
    deployment_date = StringField('Deployment Date', validators=[Optional(), Length(max=10)])  # YYYY-MM-DD
    update_frequency = StringField('Update Frequency', validators=[Optional(), Length(max=50)])
    known_issues = TextAreaField('Known Issues', validators=[Optional(), Length(max=500)])
    lifecycle_stage = StringField('Lifecycle Stage', validators=[Optional(), Length(max=50)])
    support_end_date = StringField('Support End Date', validators=[Optional(), Length(max=10)])
    vendor_id = StringField('Vendor', validators=[Optional()])

    def populate_from_component(self, component):
        self.name.data = component.name
        self.description.data = component.description
        self.version.data = component.version
        self.deployment_date.data = component.deployment_date.strftime('%Y-%m-%d') if component.deployment_date else ''
        self.update_frequency.data = component.update_frequency
        self.known_issues.data = component.known_issues
        self.lifecycle_stage.data = component.lifecycle_stage.value if component.lifecycle_stage else ''
        self.support_end_date.data = component.support_end_date.strftime('%Y-%m-%d') if component.support_end_date else ''
        self.vendor_id.data = str(component.vendor_id) if component.vendor_id else ''

    def populate_component(self, component):
        component.name = self.name.data
        component.description = self.description.data or None
        component.version = self.version.data or None
        from datetime import datetime
        if self.deployment_date.data:
            try:
                component.deployment_date = datetime.strptime(self.deployment_date.data, '%Y-%m-%d').date()
            except ValueError:
                pass
        component.update_frequency = self.update_frequency.data or None
        component.known_issues = self.known_issues.data or None
        from app.models.tran import LifecycleStage
        if self.lifecycle_stage.data:
            try:
                component.lifecycle_stage = LifecycleStage(self.lifecycle_stage.data)
            except Exception:
                component.lifecycle_stage = None
        if self.support_end_date.data:
            try:
                component.support_end_date = datetime.strptime(self.support_end_date.data, '%Y-%m-%d').date()
            except ValueError:
                pass
        component.vendor_id = int(self.vendor_id.data) if self.vendor_id.data else None
# End of app/forms/forms.py

# Start of app/templates/base.html
<!-- app/templates/base.html -->

<!doctype html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title|default("See-Tran - Transit System Intelligence") }}</title>
  <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">
  <link rel="stylesheet" href="{{ url_for("static", filename="css/tailwind.css") }}">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .glass-effect { 
      backdrop-filter: blur(10px); 
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.1);
    }
    .glow-effect {
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }
    .nav-link::after {
      content: '';
      position: absolute;
      bottom: -4px;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #3b82f6, #06b6d4);
      transition: width 0.3s ease;
    }
    .nav-link:hover::after {
      width: 100%;
    }
    .metric-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(51, 65, 85, 0.9) 100%);
      transition: all 0.3s ease;
    }
    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
  
  <!-- Navigation -->
<nav class="glass-effect border-b border-slate-700/50 sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo and Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-3 group hover:opacity-90 transition-opacity">
          <div class="w-8 h-8 rounded-lg flex items-center justify-center">
            <img src="{{ url_for('static', filename='images/logo.png') }}" 
                 alt="SeeTran Logo" 
                 class="w-5 h-5 object-contain">
          </div>
          <div>
            <h1 class="text-xl font-bold bg-gradient-to-r from-blue-400 to-cyan-400 bg-clip-text text-transparent">
              see-tran
            </h1>
          </div>
        </a>
      </div>

      <!-- Navigation and User Menu -->
      <div class="flex items-center space-x-8">
        <!-- Main Navigation -->
        <div class="hidden md:flex items-center space-x-8">
          <a href="/" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Dashboard</a>
          <a href="/agencies" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Agencies</a>
          <a href="/functional-areas" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Functions</a>
          <a href="/components" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Components</a>
          <a href="/vendors" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Vendors</a>
          <a href="/integrations" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Integrations</a>
          <a href="/reports" class="nav-link text-slate-300 hover:text-white text-sm font-medium">Reports</a>
          {% if session.get('user') and session['user'].get('is_super_admin') %}
            <a href="/admin" class="nav-link text-amber-300 hover:text-amber-200 text-sm font-medium">Admin</a>
          {% endif %}
        </div>

        <!-- User Menu -->
        <div class="flex items-center space-x-4 ml-8">
          {% if session.get('user') %}
            <span class="text-sm text-slate-300 hidden sm:inline">{{ session['user']['email'] }}</span>
            <a href="{{ url_for('auth.logout') }}" class="px-3 py-1 text-sm bg-slate-700 hover:bg-slate-600 rounded">Logout</a>
          {% else %}
            <a href="{{ url_for('auth.login_page') }}" class="px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 rounded">Login</a>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</nav>

  <!-- Main Content -->
  <main class="min-h-screen">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="glass-effect border-t border-slate-700/50 mt-auto">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="text-slate-400 text-sm">
          SeeTran Platform. Transit system visibility and intelligence.
        </div>
        <div class="flex space-x-6 mt-4 md:mt-0 items-center">
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Documentation</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">API</a>
          <a href="#" class="text-slate-400 hover:text-slate-300 text-sm">Support</a>
          <a href="/contribute" class="inline-flex items-center text-emerald-400 hover:text-emerald-300 text-sm font-medium">
            🌐 Open Source <span class="hidden sm:inline">&nbsp;| See how it works</span>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Scripts -->
  <script src="{{ url_for("static", filename="js/htmx.min.js") }}"></script>
  <script src="{{ url_for("static", filename="js/main.js") }}"></script>
  <script>
    // Add smooth scroll behavior
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Add loading states for HTMX requests
    document.body.addEventListener('htmx:beforeRequest', function(e) {
      const target = e.target;
      if (target.classList.contains('btn-loading')) {
        target.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      }
    });
  </script>
  {% block scripts %}{% endblock %}
</body>
</html>
# End of app/templates/base.html

# Start of app/templates/index.html
<!-- app/templates/index.html -->

{% extends "base.html" %}
{% block content %}

<!-- Hero Section -->
<div class="relative overflow-hidden">
  <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-cyan-600/20"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-6">
        <span class="bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 bg-clip-text text-transparent">
          Transit System
        </span>
        <br>
        <span class="text-white">Intelligence Platform</span>
      </h1>
      <p class="text-xl text-slate-300 mb-8 max-w-3xl mx-auto">
        Comprehensive visibility into public transit system infrastructure, vendor relationships, 
        and system integrations in real-time.
      </p>
      <div class="flex flex-col sm:flex-row justify-center gap-4">
        <button hx-get="/api/health" hx-swap="innerHTML" hx-target="#health-demo" 
                class="px-8 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-semibold 
                       hover:from-blue-700 hover:to-cyan-700 transition-all glow-effect">
          Test System Health
        </button>
        <button class="px-8 py-3 border border-slate-600 rounded-lg font-semibold hover:bg-slate-800 transition-all">
          View the Docs
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Dashboard Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  
  <!-- Metrics Overview -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
    
    <!-- Transit Agency Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Transit Agencies</h3>
      <p class="text-xs text-slate-500">Active transportation networks</p>
    </div>

    <!-- Functional Areas Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/functional-areas" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Functional Areas</h3>
      <p class="text-xs text-slate-500">Operational domains</p>
    </div>

    <!-- Active Components Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/components" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Active Components</h3>
      <p class="text-xs text-slate-500">Deployed technology components</p>
    </div>

    <!-- Integration Points Card -->
    <div class="metric-card rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-4">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/integration-points" hx-trigger="load">0</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium mb-1">Integration Points</h3>
      <p class="text-xs text-slate-500">System interconnections</p>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- System Status Panel -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">System Status</h2>
          <div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-500 rounded-full"></div>
            <span class="text-sm text-slate-300">All Systems Operational</span>
          </div>
        </div>
        
        <!-- Demo System Status -->
        <div class="space-y-4">
          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Database Connection</h4>
                <p class="text-sm text-slate-400">SQLite • Local Development</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Response: 2ms</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">Web Server</h4>
                <p class="text-sm text-slate-400">Flask Development Server</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Online</p>
              <p class="text-xs text-slate-500">Port: 5000</p>
            </div>
          </div>

          <div class="flex items-center justify-between p-4 bg-slate-800/50 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-4">
              <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              <div>
                <h4 class="font-medium text-white">HTMX Integration</h4>
                <p class="text-sm text-slate-400">Dynamic UI Updates</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm text-green-400">Active</p>
              <p class="text-xs text-slate-500">v2.0.4</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      
      <!-- System Health Demo -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">System Health</h3>
        <div id="health-demo" class="text-center">
          <div class="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
          </div>
          <h4 class="text-lg font-semibold text-white mb-2">Excellent</h4>
          <p class="text-sm text-slate-400">All systems functioning normally</p>
        </div>
      </div>

      <!-- Getting Started -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Getting Started</h3>
        <div class="space-y-3">
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">1</span>
            </div>
            <p class="text-sm text-slate-300">Add your first transit agency</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">2</span>
            </div>
            <p class="text-sm text-slate-300">Define functional areas</p>
          </div>
          <div class="flex items-center space-x-3 p-3 bg-slate-800/30 rounded-lg">
            <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-xs font-bold text-white">3</span>
            </div>
            <p class="text-sm text-slate-300">Configure system integration</p>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Transit Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Generate Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Information Cards -->
  <div class="mt-12 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">System Tracking</h3>
      <p class="text-slate-400 text-sm">Monitor all your transit technology components, versions, and deployment status in one centralized dashboard.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Vendor Management</h3>
      <p class="text-slate-400 text-sm">Track vendor relationships, contact information, and system dependencies across your entire transit network.</p>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="w-12 h-12 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center mb-4">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-white mb-2">Integration Mapping</h3>
      <p class="text-slate-400 text-sm">Visualize system integrations, data flows, and interconnections to understand your technology ecosystem.</p>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// Auto-refresh metrics every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Add smooth animations for loaded content
document.body.addEventListener('htmx:afterSwap', function(e) {
  const newContent = e.detail.target;
  newContent.style.opacity = '0';
  newContent.style.transform = 'translateY(10px)';
  
  setTimeout(() => {
    newContent.style.transition = 'all 0.3s ease';
    newContent.style.opacity = '1';
    newContent.style.transform = 'translateY(0)';
  }, 50);
});
</script>
{% endblock %}
# End of app/templates/index.html

# Start of app/templates/vendors.html
<!-- app/templates/vendors.html -->

{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Vendor Management</h1>
    <p class="text-slate-400">Manage vendor relationships and track system portfolios across your transit network.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/vendors" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Vendors</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-systems-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Systems/Vendor</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="top-vendor-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Top Vendor Systems</h3>
    </div>
  </div>

  <!-- Enhanced Search and Filters -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8" id="vendor-filters-container">
    <form id="vendor-filters" class="space-y-4">
      
      <!-- Main Filter Row -->
      <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center">
        
        <!-- Search Input -->
        <div class="relative flex-1 max-w-md">
          <input type="text" 
                 id="vendor-search" 
                 name="search"
                 placeholder="Search vendors..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 pl-10 text-white placeholder-slate-400 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 focus:outline-none transition-colors"
                 hx-get="/api/vendors/list" 
                 hx-target="#vendors-list" 
                 hx-trigger="keyup changed delay:300ms" 
                 hx-include="#vendor-filters">
          <svg class="absolute left-3 top-3 w-4 h-4 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>

        <!-- Agency Filter -->
        <div class="flex-1 max-w-xs">
          <select id="agency-filter" 
                  name="agency"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="">All Agencies</option>
            <!-- Options will be loaded dynamically -->
          </select>
        </div>

        <!-- Functional Area Filter -->
        <div class="flex-1 max-w-xs">
          <select id="functional-area-filter" 
                  name="functional_area"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="">All Functional Areas</option>
            <!-- Options will be loaded dynamically -->
          </select>
        </div>

        <!-- Sort Options -->
        <div class="flex-1 max-w-xs">
          <select id="sort-select" 
                  name="sort"
                  class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2.5 text-white focus:border-green-500 focus:ring-1 focus:ring-green-500 focus:outline-none transition-colors"
                  hx-get="/api/vendors/list" 
                  hx-target="#vendors-list" 
                  hx-trigger="change" 
                  hx-include="#vendor-filters">
            <option value="name">Sort by Name</option>
            <option value="components">Sort by Component Count</option>
            <option value="recent">Sort by Recent Activity</option>
          </select>
        </div>
      </div>

      <!-- Active Filters and Actions Row -->
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 pt-4 border-t border-slate-700/30">
        
        <!-- Active Filter Badges -->
        <div class="flex-1">
          <div class="flex items-center space-x-2">
            <span class="text-sm text-slate-400">Filters:</span>
            <div id="active-filters" class="flex flex-wrap gap-2">
              <!-- Filter badges will be populated by JavaScript -->
            </div>
            <button type="button" 
                    onclick="clearAllFilters('#vendor-filters', '#vendors-list')"
                    class="text-xs text-slate-500 hover:text-slate-300 transition-colors ml-2"
                    id="clear-filters-btn" style="display: none;">
              Clear All
            </button>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex gap-2">
          <button type="button"
                  hx-get="/api/vendors/form" 
                  hx-target="#vendor-details" 
                  hx-swap="innerHTML"
                  class="px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Vendor
          </button>
          
          <button type="button" 
                  class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Export List
          </button>
        </div>
      </div>
    </form>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Vendors List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Vendor Portfolio</h2>
          <div class="flex items-center space-x-2 text-sm text-slate-400">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            <span id="vendor-count-display">Loading...</span>
          </div>
        </div>
        
        <div id="vendors-list" class="space-y-6" hx-get="/api/vendors/list" hx-trigger="load">
          <!-- Vendors will be loaded here -->
          <div class="animate-pulse space-y-6">
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
            <div class="h-32 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="space-y-6 sticky top-24 max-h-[calc(100vh-6rem)] overflow-y-auto">
      <!-- Vendor Details Panel -->
      <div id="vendor-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
          <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
        </div>
      </div>

      <!-- Top Integration Standards -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Integration Standards</h3>
        <div id="integration-standards" hx-get="/api/integration/standards" hx-trigger="load" class="space-y-2">
          <!-- Integration standards will be loaded here -->
          <div class="animate-pulse space-y-2">
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
            <div class="h-6 bg-slate-800 rounded"></div>
          </div>
        </div>
      </div>

      <!-- Vendor Performance Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Performance Insights</h3>
        <div class="space-y-3" id="performance-insights">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Reliable</span>
            <span class="text-green-400 font-medium text-sm" id="most-reliable-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Newest Partnership</span>
            <span class="text-blue-400 font-medium text-sm" id="newest-vendor">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Most Systems</span>
            <span class="text-purple-400 font-medium text-sm" id="largest-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button hx-get="/api/vendors/form" hx-target="#vendor-details" hx-swap="innerHTML"
                  class="w-full px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg text-sm font-medium hover:from-purple-700 hover:to-pink-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Vendor
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Vendor Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Contacts
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
// =============================================================================
// VENDOR PAGE STATE MANAGEMENT - Embedded Controller
// =============================================================================

class VendorPageController {
  constructor() {
    this.currentFilters = {
      search: '',
      agency: '',
      functional_area: '',
      sort: 'name'
    };
    this.selectedVendorId = null;
    this.isLoading = false;
    this.refreshTimers = [];
    
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.loadInitialData();
    this.setupPeriodicRefresh();
    console.log('🏢 Vendor page controller initialized');
  }

  setupEventListeners() {
    const form = document.getElementById('vendor-filters');
    if (form) {
      form.addEventListener('input', this.handleFilterChange.bind(this));
      form.addEventListener('change', this.handleFilterChange.bind(this));
    }

    document.body.addEventListener('htmx:beforeRequest', this.handleBeforeRequest.bind(this));
    document.body.addEventListener('htmx:afterRequest', this.handleAfterRequest.bind(this));
    document.body.addEventListener('htmx:afterSwap', this.handleAfterSwap.bind(this));
    document.body.addEventListener('htmx:responseError', this.handleResponseError.bind(this));
  }

  async loadInitialData() {
    try {
      await Promise.all([
        this.loadFilterOptions(),
        this.loadVendorStats(),
        this.loadVendorPerformance()
      ]);
    } catch (error) {
      console.error('Error loading initial data:', error);
      showToast('Error loading page data. Please refresh.', false);
    }
  }

  async loadFilterOptions() {
    try {
      const agencyResponse = await fetch('/api/vendors/filter-options/agencies');
      const agencyHtml = await agencyResponse.text();
      const agencySelect = document.getElementById('agency-filter');
      if (agencySelect) agencySelect.innerHTML = agencyHtml;

      const faResponse = await fetch('/api/vendors/filter-options/functional-areas');
      const faHtml = await faResponse.text();
      const faSelect = document.getElementById('functional-area-filter');
      if (faSelect) faSelect.innerHTML = faHtml;
    } catch (error) {
      console.error('Error loading filter options:', error);
    }
  }

  handleFilterChange(event) {
    const formData = new FormData(document.getElementById('vendor-filters'));
    const newFilters = {};
    
    for (const [key, value] of formData.entries()) {
      newFilters[key] = value.trim();
    }
    this.currentFilters = { ...this.currentFilters, ...newFilters };

    if (event.target.name === 'search') {
      clearTimeout(this.searchTimeout);
      this.searchTimeout = setTimeout(() => {
        this.refreshVendorList();
        this.updateActiveFilters();
      }, 300);
    } else {
      this.refreshVendorList();
      this.updateActiveFilters();
    }

    this.loadVendorStats();
    this.loadVendorPerformance();
  }

  refreshVendorList() {
    if (this.isLoading) return;
    
    const vendorsList = document.getElementById('vendors-list');
    if (vendorsList) {
      this.showListLoading(true);
      htmx.trigger(vendorsList, 'refresh');
    }
  }

  updateActiveFilters() {
    const filterContainer = document.getElementById('active-filters');
    const clearBtn = document.getElementById('clear-filters-btn');
    
    if (!filterContainer) return;
    
    filterContainer.innerHTML = '';
    let hasActiveFilters = false;
    
    Object.entries(this.currentFilters).forEach(([key, value]) => {
      if (value && value !== '' && key !== 'sort') {
        hasActiveFilters = true;
        
        let displayKey = key;
        if (key === 'functional_area') displayKey = 'functional area';
        
        const badge = document.createElement('span');
        badge.className = 'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-600/20 text-purple-300 border border-purple-600/30';
        badge.innerHTML = `
          ${displayKey}: ${value}
          <button onclick="vendorController.clearSpecificFilter('${key}')" class="ml-1 text-purple-400 hover:text-purple-200 transition-colors">
            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
          </button>
        `;
        filterContainer.appendChild(badge);
      }
    });
    
    if (clearBtn) {
      clearBtn.style.display = hasActiveFilters ? 'inline-block' : 'none';
    }
  }

  clearSpecificFilter(filterKey) {
    const form = document.getElementById('vendor-filters');
    if (form) {
      const element = form.querySelector(`[name="${filterKey}"]`);
      if (element) {
        element.value = '';
        this.currentFilters[filterKey] = '';
        this.refreshVendorList();
        this.updateActiveFilters();
        this.loadVendorStats();
        this.loadVendorPerformance();
      }
    }
  }

  clearAllFilters() {
    const form = document.getElementById('vendor-filters');
    if (form) {
      form.reset();
      this.currentFilters = { search: '', agency: '', functional_area: '', sort: 'name' };
      this.refreshVendorList();
      this.updateActiveFilters();
      this.loadVendorStats();
      this.loadVendorPerformance();
    }
  }

  async loadVendorStats() {
    try {
      const params = new URLSearchParams();
      Object.entries(this.currentFilters).forEach(([key, value]) => {
        if (value && value.trim() !== '') params.append(key, value.trim());
      });
      
      const response = await fetch('/api/vendors/stats?' + params.toString());
      const data = await response.json();
      
      if (data.status !== 'error') {
        document.getElementById('active-vendors-count').textContent = data.active_vendors;
        document.getElementById('avg-systems-count').textContent = data.avg_components_per_vendor;
        if (data.top_vendor) {
          document.getElementById('top-vendor-count').textContent = data.top_vendor.component_count;
        }
      }
    } catch (error) {
      console.error('Error loading vendor stats:', error);
    }
  }

  async loadVendorPerformance() {
    try {
      const params = new URLSearchParams();
      Object.entries(this.currentFilters).forEach(([key, value]) => {
        if (value && value.trim() !== '') params.append(key, value.trim());
      });
      
      const response = await fetch('/api/vendors/performance?' + params.toString());
      const data = await response.json();
      
      if (data.status !== 'error') {
        document.getElementById('most-reliable-vendor').textContent = data.most_reliable;
        document.getElementById('newest-vendor').textContent = data.newest;
        document.getElementById('largest-vendor').textContent = data.largest;
      }
    } catch (error) {
      console.error('Error loading vendor performance:', error);
    }
  }

  showListLoading(show) {
    const vendorsList = document.getElementById('vendors-list');
    if (!vendorsList) return;
    
    if (show) {
      vendorsList.style.opacity = '0.6';
      vendorsList.style.pointerEvents = 'none';
    } else {
      vendorsList.style.opacity = '1';
      vendorsList.style.pointerEvents = 'auto';
    }
  }

  updateVendorCount() {
    const metaElement = document.getElementById('vendor-list-meta');
    const countDisplay = document.getElementById('vendor-count-display');
    
    if (metaElement && countDisplay) {
      const count = parseInt(metaElement.dataset.count) || 0;
      countDisplay.textContent = `${count} vendor${count !== 1 ? 's' : ''} found`;
    }
  }

  setupPeriodicRefresh() {
    this.refreshTimers.push(
      setInterval(() => {
        const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
        elements.forEach(el => htmx.trigger(el, 'refresh'));
      }, 30000)
    );
  }

  handleBeforeRequest(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = true;
      this.showListLoading(true);
    }
  }

  handleAfterRequest(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = false;
      this.showListLoading(false);
    }
  }

  handleAfterSwap(event) {
    if (event.target.id === 'vendors-list') {
      setTimeout(() => this.updateVendorCount(), 100);
      this.setupVendorCardEffects();
      if (this.selectedVendorId) {
        this.highlightSelectedVendor(this.selectedVendorId);
      }
    }
  }

  handleResponseError(event) {
    if (event.target.id === 'vendors-list') {
      this.isLoading = false;
      this.showListLoading(false);
      showToast('Error loading vendors. Please try again.', false);
    }
  }

  setupVendorCardEffects() {
    const vendorCards = document.querySelectorAll('.vendor-card');
    vendorCards.forEach(card => {
      card.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-4px)';
        this.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.3)';
      });
      
      card.addEventListener('mouseleave', function() {
        if (!this.classList.contains('selected')) {
          this.style.transform = 'translateY(0)';
          this.style.boxShadow = 'none';
        }
      });
      
      card.addEventListener('click', (e) => {
        if (!e.target.closest('a') && !e.target.closest('button')) {
          this.selectedVendorId = card.dataset.vendorId;
          this.highlightSelectedVendor(this.selectedVendorId);
        }
      });
    });
  }

  highlightSelectedVendor(vendorId) {
    document.querySelectorAll('.vendor-card').forEach(card => {
      card.classList.remove('selected');
      if (!card.matches(':hover')) {
        card.style.transform = 'translateY(0)';
        card.style.boxShadow = 'none';
      }
    });
    
    const selectedCard = document.querySelector(`[data-vendor-id="${vendorId}"]`);
    if (selectedCard) {
      selectedCard.classList.add('selected');
      selectedCard.style.transform = 'translateY(-4px)';
      selectedCard.style.boxShadow = '0 10px 25px rgba(147, 51, 234, 0.3)';
    }
  }

  closeVendorDetails() {
    this.selectedVendorId = null;
    document.getElementById('vendor-details').innerHTML = `
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
        <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-slate-400 mb-2">Vendor Details</h3>
        <p class="text-slate-500 text-sm">Click on a vendor to view detailed information, system portfolio, and contact details.</p>
      </div>`;
  }
}

// =============================================================================
// GLOBAL FUNCTIONS AND INITIALIZATION
// =============================================================================

let vendorController;

function clearSpecificFilter(filterKey) {
  if (vendorController) vendorController.clearSpecificFilter(filterKey);
}

function clearAllFilters() {
  if (vendorController) vendorController.clearAllFilters();
}

function closeVendorDetails() {
  if (vendorController) vendorController.closeVendorDetails();
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
  vendorController = new VendorPageController();
  
  // Make functions globally available
  window.clearSpecificFilter = clearSpecificFilter;
  window.clearAllFilters = clearAllFilters;
  window.closeVendorDetails = closeVendorDetails;
  window.vendorController = vendorController;
});

// Enhanced form handling for vendor operations
document.body.addEventListener('htmx:afterRequest', function(e) {
  // Handle vendor form submissions
  if (e.target.id === 'vendor-form') {
    try {
      const response = JSON.parse(e.detail.xhr.response);
      
      if (response.status === 'success') {
        // Trigger custom events for vendor operations
        if (e.detail.requestConfig.path.includes('POST') && !e.detail.requestConfig.path.match(/\/\d+$/)) {
          // New vendor created
          document.dispatchEvent(new CustomEvent('vendor:created', { 
            detail: { message: response.message } 
          }));
        } else if (e.detail.requestConfig.path.includes('POST') && e.detail.requestConfig.path.match(/\/\d+$/)) {
          // Vendor updated
          const vendorId = e.detail.requestConfig.path.match(/\/(\d+)$/)[1];
          document.dispatchEvent(new CustomEvent('vendor:updated', { 
            detail: { vendorId: vendorId, message: response.message } 
          }));
        }
      }
    } catch (error) {
      // Response is not JSON, handle as before
    }
  }
});

// Handle vendor deletion
document.addEventListener('vendor:deleted', function(e) {
  if (vendorController) {
    vendorController.refreshVendorList();
    vendorController.loadVendorStats();
    vendorController.loadVendorPerformance();
    if (e.detail.vendorId === vendorController.selectedVendorId) {
      vendorController.closeVendorDetails();
    }
  }
});

// Export functionality
function exportVendorList() {
  showToast('Export functionality coming soon!', true);
}

window.exportVendorList = exportVendorList;
</script>
{% endblock %}
# End of app/templates/vendors.html

# Start of app/templates/components.html
{% extends "base.html" %}
{% block content %}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

  <!-- Page Header -->
  <div class="mb-6 sm:mb-8">
    <div class="flex items-center justify-between gap-3">
      <div>
        <h1 class="text-3xl sm:text-4xl font-extrabold text-white tracking-tight">Components</h1>
        <p class="text-slate-400 text-sm sm:text-base mt-1">Browse all transit technology components. Filter and tap a card to view full details.</p>
      </div>
      <div class="hidden sm:flex items-center gap-2">
        <a href="/vendors" class="px-3 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm text-white border border-slate-700/60 transition-colors">Vendors</a>
        <a href="/functional-areas" class="px-3 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm text-white border border-slate-700/60 transition-colors">Functional Areas</a>
      </div>
    </div>
  </div>

  <!-- Dynamic Component Form Container -->
  <div id="component-form-container" class="mb-8"></div>

  <!-- Filters -->
  <div class="glass-effect rounded-xl p-4 sm:p-5 border border-slate-700/50 mb-6 sm:mb-8">
    <!-- One form that drives all filtering -->
    <form id="component-filters"
          class="flex flex-col gap-3 lg:gap-4"
          hx-get="/api/components/list"
          hx-target="#components-list"
          hx-trigger="change, keyup delay:250ms from:#component-search"
          hx-swap="innerHTML transition:true"
          hx-push-url="true">
      
      <div class="flex flex-col lg:flex-row items-stretch lg:items-center justify-between gap-3 lg:gap-4">

        <!-- Left: search + dropdowns -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 lg:gap-4 w-full">

          <!-- Search -->
          <div class="relative col-span-1 sm:col-span-2 lg:col-span-2">
            <input id="component-search" name="search" type="text"
                   placeholder="Search components, vendors, or functions…"
                   class="w-full bg-slate-800 border border-slate-700 rounded-lg pl-10 pr-3 py-2.5 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                   value="{{ request.args.get('search','') }}">
            <svg class="absolute left-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
            </svg>
          </div>

          <!-- Agency -->
          <select id="agency-filter" name="agency"
                  class="bg-slate-800 border border-slate-700 rounded-lg px-3 py-2.5 text-white focus:border-blue-500 focus:outline-none">
            <option value="">All Agencies</option>
          </select>

          <!-- Functional Area -->
          <select id="functional-area-filter" name="functional_area"
                  class="bg-slate-800 border border-slate-700 rounded-lg px-3 py-2.5 text-white focus:border-blue-500 focus:outline-none">
            <option value="">All Functional Areas</option>
          </select>

          <!-- Vendor -->
          <select id="vendor-filter" name="vendor"
                  class="bg-slate-800 border border-slate-700 rounded-lg px-3 py-2.5 text-white focus:border-blue-500 focus:outline-none">
            <option value="">All Vendors</option>
          </select>

          <!-- Status -->
          <select id="status-filter" name="status"
                  class="bg-slate-800 border border-slate-700 rounded-lg px-3 py-2.5 text-white focus:border-blue-500 focus:outline-none">
            <option value="">All Components</option>
            <option value="no_issues">No Issues</option>
            <option value="issues">Has Issues</option>
          </select>
        </div>
      </div>

        <!-- Right: actions -->
      <div class="flex items-center gap-2 w-full lg:w-auto">
          <button type="button" id="filters-reset"
                  class="px-3 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm text-white border border-slate-700/60 transition-colors">
            Reset
          </button>
          <button type="button"
                  class="px-3 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm text-white border border-slate-700/60 transition-colors"
                  hx-get="/api/components/list" hx-target="#components-list" hx-swap="innerHTML">
            Refresh
          </button>
          <button type="button"
                  class="px-4 py-2.5 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white"
                  hx-get="/api/components/form" hx-target="#component-form-container" hx-swap="innerHTML">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add Component
          </button>
          <button type="button" class="px-4 py-2.5 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors text-white">
            Export
          </button>
      </div>
    </form>
  </div>

  <!-- Components Grid -->
  <div class="glass-effect rounded-xl p-4 sm:p-6 border border-slate-700/50">
    <div class="flex items-center justify-between mb-4 sm:mb-6">
      <h2 class="text-xl sm:text-2xl font-bold text-white">Components</h2>
      <span id="result-count" class="text-xs sm:text-sm text-slate-400"></span>
    </div>

    <div id="components-list"
     class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3 sm:gap-4 auto-rows-fr"
     hx-get="/api/components/list"
     hx-trigger="load"
     hx-include="#component-filters">
      <!-- Skeleton -->
      <div class="animate-pulse space-y-3 col-span-full">
        <div class="h-24 bg-slate-800 rounded-lg"></div>
        <div class="h-24 bg-slate-800 rounded-lg"></div>
        <div class="h-24 bg-slate-800 rounded-lg"></div>
      </div>
    </div>
  </div>
</div>

{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function () {
  // Populate dropdowns
  htmx.ajax('GET', '/api/filter-options/functional-areas', { target: '#functional-area-filter', swap: 'innerHTML' })
  htmx.ajax('GET', '/api/filter-options/vendors', { target: '#vendor-filter', swap: 'innerHTML' })
  htmx.ajax('GET', '/api/agencies/options', { target: '#agency-filter', swap: 'innerHTML' })

  // Restore selected values from query string (supports deep-linking)
  const params = new URLSearchParams(window.location.search)
  for (const [k, v] of params.entries()) {
    const el = document.querySelector(`[name="${CSS.escape(k)}"]`)
    if (el) el.value = v
  }

  // Reset filters
  document.getElementById('filters-reset').addEventListener('click', () => {
    const form = document.getElementById('component-filters')
    form.reset()
    // Also clear query string
    history.replaceState({}, '', window.location.pathname)
    htmx.trigger(form, 'change')
  })
})

// Optional: update visible count after each swap
document.body.addEventListener('htmx:afterSwap', function (evt) {
  if (evt.detail.target && evt.detail.target.id === 'components-list') {
    const count = evt.detail.target.querySelectorAll('[data-component-card="1"]').length
    const el = document.getElementById('result-count')
    if (el) el.textContent = count ? `${count} result${count === 1 ? '' : 's'}` : ''
  }
})

// Auto-refresh count metrics if present
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]')
  elements.forEach(el => htmx.trigger(el, 'refresh'))
}, 30000)
</script>
{% endblock %}

# End of app/templates/components.html

# Start of app/templates/functional_areas.html
<!-- app/templates/functional_areas.html -->

{% extends "base.html" %}

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Functional Areas Management</h1>
    <p class="text-slate-400">Manage global functional areas that organize transit technology functions across all agencies.</p>
  </div>

  <!-- Actions Bar -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-6">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Filters -->
      <div class="flex flex-col sm:flex-row gap-4 flex-1">
        <!-- Search -->
        <div class="relative flex-1 max-w-md">
          <input type="text" id="area-search" placeholder="Search functional areas..." 
                 class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
                 hx-get="/api/functional-areas/list" hx-target="#functional-areas-list" hx-trigger="keyup changed delay:300ms" 
                 hx-vals="js:{search: event.target.value}">
          <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
          </svg>
        </div>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button hx-get="/api/functional-areas/form" hx-target="#functional-area-form-container" hx-swap="innerHTML"
                class="px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg font-medium hover:from-purple-700 hover:to-blue-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Functional Area
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Inline Form Container -->
  <div id="functional-area-form-container" class="mb-6"></div>

  <!-- Functional Areas List (Full Width) -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-xl font-semibold text-white">Functional Areas</h2>
      <button hx-get="/api/functional-areas/list" hx-target="#functional-areas-list" 
              class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
        <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
        </svg>
        Refresh
      </button>
    </div>
    
    <div id="functional-areas-list" hx-get="/api/functional-areas/list" hx-trigger="load">
      <!-- Functional areas will be loaded here -->
      <div class="animate-pulse space-y-4">
        <div class="h-24 bg-slate-800 rounded-lg"></div>
        <div class="h-24 bg-slate-800 rounded-lg"></div>
        <div class="h-24 bg-slate-800 rounded-lg"></div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Toggle inline details under a functional area card
function toggleFaDetails(id) {
  const target = document.getElementById(`fa-details-${id}`);
  if (!target) return;
  if (target.innerHTML && target.innerHTML.trim() !== '') {
    // Collapse
    target.innerHTML = '';
  } else {
    // Expand by fetching details
    htmx.ajax('GET', `/api/functional-areas/${id}/details`, { target: target, swap: 'innerHTML' });
  }
}

// Auto-refresh stats every 30 seconds (kept for future if needed)
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Success/error handling for forms
document.body.addEventListener('htmx:afterRequest', function(e) {
  if (e.detail.xhr.status === 200 && (e.detail.requestConfig.verb === 'post' || e.detail.requestConfig.verb === 'put' || e.detail.requestConfig.verb === 'delete')) {
    // Refresh list and leave form in place
    htmx.trigger('#functional-areas-list', 'refresh');
  }
});
</script>
{% endblock %}
# End of app/templates/functional_areas.html

# Start of app/templates/agencies.html
<!-- app/templates/agencies.html -->

{% extends "base.html" %}

{% block content %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-white mb-2">Transit Agency Management</h1>
    <p class="text-slate-400">Manage transit agencies and their organizational structure.</p>
  </div>

  <!-- Stats Overview -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" hx-get="/api/count/agencies" hx-trigger="load">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Total Agencies</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="active-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Active Implementations</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" clip-rule="evenodd"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-implementations-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Tech/Agency</h3>
    </div>

    <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
      <div class="flex items-center justify-between mb-2">
        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
          </svg>
        </div>
        <span class="text-2xl font-bold text-white" id="avg-vendors-count">--</span>
      </div>
      <h3 class="text-slate-400 text-sm font-medium">Avg Vendors/Agency</h3>
    </div>
  </div>

  <!-- Actions Bar -->
  <div class="glass-effect rounded-xl p-6 border border-slate-700/50 mb-8">
    <div class="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
      
      <!-- Search -->
      <div class="relative flex-1 max-w-md">
        <input type="text" id="agency-search" placeholder="Search transit agencies..." 
               class="w-full bg-slate-800 border border-slate-700 rounded-lg px-4 py-2 text-white placeholder-slate-400 focus:border-blue-500 focus:outline-none"
               hx-get="/api/agencies/list" hx-target="#agencies-list" hx-trigger="keyup changed delay:300ms" 
               hx-vals="js:{search: event.target.value}">
        <svg class="absolute right-3 top-2.5 w-5 h-5 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
        </svg>
      </div>

      <!-- Actions -->
      <div class="flex gap-2">
        <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                class="px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg font-medium hover:from-blue-700 hover:to-cyan-700 transition-all">
          <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
          </svg>
          Add Transit Agency
        </button>
        <button class="px-4 py-2 bg-slate-800 hover:bg-slate-700 rounded-lg font-medium transition-colors">
          Export
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    
    <!-- Agencies List -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-white">Transit Agencies</h2>
          <button hx-get="/api/agencies/list" hx-target="#agencies-list" 
                  class="px-3 py-1 bg-slate-800 hover:bg-slate-700 rounded text-sm transition-colors">
            <svg class="w-4 h-4 inline mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"/>
            </svg>
            Refresh
          </button>
        </div>
        
        <div id="agencies-list" hx-get="/api/agencies/list" hx-trigger="load">
          <!-- Agencies will be loaded here -->
          <div class="animate-pulse space-y-4">
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
            <div class="h-24 bg-slate-800 rounded-lg"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Details/Form Sidebar -->
    <div class="space-y-6 sticky top-24 max-h-[calc(100vh-6rem)] overflow-y-auto">
      
      <!-- Agency Details Panel -->
      <div id="agency-details">
        <!-- Default state -->
        <div class="glass-effect rounded-xl p-6 border border-slate-700/50 text-center">
          <div class="w-16 h-16 bg-slate-700 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
              <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-slate-400 mb-2">Agency Details</h3>
          <p class="text-slate-500 text-sm">Click on a transit agency to view details or use the Add button to create a new one.</p>
        </div>
      </div>

      <!-- Agency Insights -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Transit Insights</h3>
        <div class="space-y-3">
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Tech Leader</span>
            <span class="text-blue-400 font-medium text-sm" id="tech-leader-agency">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Top Technology</span>
            <span class="text-green-400 font-medium text-sm" id="common-tech-area">--</span>
          </div>
          <div class="flex justify-between items-center p-3 bg-slate-800/30 rounded-lg">
            <span class="text-slate-300 text-sm">Leading Vendor</span>
            <span class="text-purple-400 font-medium text-sm" id="top-vendor">--</span>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="glass-effect rounded-xl p-6 border border-slate-700/50">
        <h3 class="text-lg font-semibold text-white mb-4">Quick Actions</h3>
        <div class="space-y-3">
          <button hx-get="/api/agencies/form" hx-target="#agency-details" hx-swap="innerHTML"
                  class="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-cyan-700 transition-all text-white shadow-lg">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"/>
            </svg>
            Add New Agency
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
              <path fill-rule="evenodd" d="M4 5a2 2 0 012-2v1a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2V3a2 2 0 012 2v8a4 4 0 01-4 4H6a4 4 0 01-4-4V5z" clip-rule="evenodd"/>
            </svg>
            Agency Report
          </button>
          <button class="w-full px-4 py-3 bg-slate-800 hover:bg-slate-700 rounded-lg text-sm font-medium transition-colors text-white">
            <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
            Export Data
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Load agency stats
document.addEventListener('DOMContentLoaded', function() {
  fetch('/api/agencies/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('active-implementations-count').textContent = data.active_implementations;
      document.getElementById('avg-implementations-count').textContent = data.avg_implementations_per_agency;
      document.getElementById('avg-vendors-count').textContent = data.avg_vendors_per_agency;
    });

  // Load agency insights
  fetch('/api/agencies/insights')
    .then(response => response.json())
    .then(data => {
      document.getElementById('tech-leader-agency').textContent = data.tech_leader;
      document.getElementById('common-tech-area').textContent = data.common_area;
      document.getElementById('top-vendor').textContent = data.top_vendor;
    });
});

// Auto-refresh stats every 30 seconds
setInterval(function() {
  const elements = document.querySelectorAll('[hx-get*="/api/count/"]');
  elements.forEach(el => htmx.trigger(el, 'refresh'));
}, 30000);

// Success/error handling for forms
document.body.addEventListener('htmx:afterRequest', function(e) {
  if (e.detail.xhr.status === 200 && e.detail.requestConfig.verb === 'post') {
    // Success: refresh list and show success message
    htmx.trigger('#agencies-list', 'refresh');
  }
});
</script>
{% endblock %}
# End of app/templates/agencies.html

# Start of README.md
**See Transit** 
A web app that brings together technical data from all public transit agencies in the US and worldwide.

**Data**
Transit agencies, industry vendors, and the technologies used to power public transportation.

**Key Entities**
Agencies, technology components, vendors, functional areas, functions, and integration.

**Access**
The landing page is publically available, as is the Agency list page; all other pages are auth protected.
Auth is provided via Microsoft or Google OAuth from application login page.
Registration is restricted to email addresses that are associated with an existing transit agency.
There is one super admin set in the config (will be added later as a role); super admin can do everything.

**Agencies**
Agencies have two user types: readers and admins; admins can update all Agency information (i.e. Agency Component relationships).
Agency data can be sourced via LLM or via community input (data source is indicated in app).

**Vendors**
Vendor registration is restricted to email addresses that are associated wtih an existing vendor.
Vendors have two user types: readers and admins; admins can update all Vendor information (i.e. Vendor Components Functional relationships).
Vendor data can be sourced via LLM or via community input (data source is indicated in app).
Vendors must have a paid subscription to use the hosted system (yearly subscription or included with sponsorship).

**Agents**
The application utilizes agents to find and update data in the hosted version (see-tran.org).
- Agency agent - gets agency information, vets it, creates or upscales
- Vendor agent - gets vendor information, vets it, creates or upscales
- Component agent - get component (and subcomponent) informration, vets it, creates or upscales

**Components**
Components are discrete products/solutions, provided by an internal IT team or third party vendor
that deliver technology in support of a discrete transit business function.
Components can be "nested" in order to handle sub components; a composite component is made up of
more than one nested sub-components.

**Roadmap:**
- Agency news
- Vendor news
- Transit technology news
- Forum
- SMS alerts

**See Transit is an open source project, created by industry enthusiasts.**
Contributions are welcomed from public transit teams.
See-Tran.org provides a hosted version with a growing set of community sourced up-to-date data, upscaled with AI.

# End of README.md

